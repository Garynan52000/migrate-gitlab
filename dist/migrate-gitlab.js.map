{
  "version": 3,
  "sources": ["..\\migrate-gitlab.ts"],
  "sourcesContent": [
    "#!/usr/bin/env bun\n\n/**\n * GitLab 仓库迁移工具\n * @description 专门用于 GitLab 仓库之间的迁移，支持镜像克隆、仓库创建、描述更新等功能\n */\n\nimport { execSync } from 'child_process';\nimport { readFileSync, writeFileSync, existsSync, rmSync, mkdirSync, readdirSync, statSync } from 'fs';\nimport * as path from 'path';\nimport * as readline from 'readline';\n\n/**\n * 控制台颜色工具类\n */\nclass ConsoleColors {\n  // 颜色代码\n  static readonly RESET = '\\x1b[0m';\n  static readonly BRIGHT = '\\x1b[1m';\n  static readonly DIM = '\\x1b[2m';\n  \n  // 前景色\n  static readonly RED = '\\x1b[31m';\n  static readonly GREEN = '\\x1b[32m';\n  static readonly YELLOW = '\\x1b[33m';\n  static readonly BLUE = '\\x1b[34m';\n  static readonly MAGENTA = '\\x1b[35m';\n  static readonly CYAN = '\\x1b[36m';\n  static readonly WHITE = '\\x1b[37m';\n  static readonly GRAY = '\\x1b[90m';\n  \n  // 背景色\n  static readonly BG_RED = '\\x1b[41m';\n  static readonly BG_GREEN = '\\x1b[42m';\n  static readonly BG_YELLOW = '\\x1b[43m';\n  static readonly BG_BLUE = '\\x1b[44m';\n  \n  // 格式化方法\n  static success(text: string): string {\n    return `${ConsoleColors.GREEN}${ConsoleColors.BRIGHT}✅ ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static error(text: string): string {\n    return `${ConsoleColors.RED}${ConsoleColors.BRIGHT}❌ ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static warning(text: string): string {\n    return `${ConsoleColors.YELLOW}${ConsoleColors.BRIGHT}⚠️  ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static info(text: string): string {\n    return `${ConsoleColors.BLUE}${ConsoleColors.BRIGHT}ℹ️  ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static progress(text: string): string {\n    return `${ConsoleColors.CYAN}${ConsoleColors.BRIGHT}🚀 ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static highlight(text: string): string {\n    return `${ConsoleColors.MAGENTA}${ConsoleColors.BRIGHT}${text}${ConsoleColors.RESET}`;\n  }\n  \n  static dim(text: string): string {\n    return `${ConsoleColors.GRAY}${text}${ConsoleColors.RESET}`;\n  }\n  \n  static title(text: string): string {\n    return `${ConsoleColors.CYAN}${ConsoleColors.BRIGHT}🎯 ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static separator(length: number = 50): string {\n    return `${ConsoleColors.GRAY}${'═'.repeat(length)}${ConsoleColors.RESET}`;\n  }\n  \n  static box(text: string): string {\n    const lines = text.split('\\n');\n    const maxLength = Math.max(...lines.map(line => line.length));\n    const border = '═'.repeat(maxLength + 4);\n    \n    let result = `${ConsoleColors.CYAN}╔${border}╗${ConsoleColors.RESET}\\n`;\n    lines.forEach(line => {\n      const padding = ' '.repeat(maxLength - line.length);\n      result += `${ConsoleColors.CYAN}║  ${ConsoleColors.WHITE}${line}${padding}  ${ConsoleColors.CYAN}║${ConsoleColors.RESET}\\n`;\n    });\n    result += `${ConsoleColors.CYAN}╚${border}╝${ConsoleColors.RESET}`;\n    \n    return result;\n  }\n  \n  static step(stepNumber: number, text: string): string {\n    return `${ConsoleColors.BLUE}${ConsoleColors.BRIGHT}📋 步骤 ${stepNumber}:${ConsoleColors.RESET} ${ConsoleColors.WHITE}${text}${ConsoleColors.RESET}`;\n  }\n  \n  static duration(text: string): string {\n    return `${ConsoleColors.GRAY}⏱️  ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static url(text: string): string {\n    return `${ConsoleColors.BLUE}🔗 ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static repo(text: string): string {\n    return `${ConsoleColors.MAGENTA}${ConsoleColors.BRIGHT}📦 ${text}${ConsoleColors.RESET}`;\n  }\n  \n  static description(text: string): string {\n    return `${ConsoleColors.GRAY}📝 ${text}${ConsoleColors.RESET}`;\n  }\n}\n\n/**\n * 仓库信息类型\n */\ntype TRepository = {\n  /** 项目名称 */\n  name: string;\n  /** 项目描述 */\n  description: string;\n  /** 原仓库地址 */\n  originalUrl: string;\n};\n\n/**\n * 迁移配置类型\n */\ntype TMigrationConfig = {\n  /** 目标分组URL */\n  targetGroup: string;\n  /** 需要迁移的仓库列表 */\n  repositories: TRepository[];\n};\n\n/**\n * 错误类型枚举\n */\ntype TErrorType = 'git_operation' | 'api_operation' | 'network' | 'permission' | 'validation' | 'filesystem' | 'unknown';\n\n/**\n * 操作步骤状态\n */\ntype TStepStatus = 'pending' | 'in_progress' | 'completed' | 'failed' | 'skipped' | 'warning';\n\n/**\n * 迁移步骤详情\n */\ntype TMigrationStep = {\n  /** 步骤名称 */\n  name: string;\n  /** 步骤状态 */\n  status: TStepStatus;\n  /** 开始时间 */\n  startTime?: string;\n  /** 结束时间 */\n  endTime?: string;\n  /** 耗时（毫秒） */\n  duration?: number;\n  /** 错误信息 */\n  error?: string;\n  /** 错误类型 */\n  errorType?: TErrorType;\n  /** 警告信息 */\n  warnings?: string[];\n};\n\n/**\n * 迁移日志类型\n */\ntype TMigrationLog = {\n  /** 项目名称 */\n  projectName: string;\n  /** 项目描述 */\n  projectDescription: string;\n  /** 原仓库地址 */\n  originalRepoUrl: string;\n  /** 目标分组 */\n  targetGroup: string;\n  /** 目标仓库地址 */\n  targetRepoUrl: string;\n  /** 开始时间 */\n  startTime: string;\n  /** 结束时间 */\n  endTime: string;\n  /** 耗时 */\n  duration: string;\n  /** 是否已克隆原仓库镜像 */\n  isOriginalCloned: boolean;\n  /** 是否已创建目标仓库 */\n  isTargetCreated: boolean;\n  /** 是否已推送镜像到目标仓库 */\n  isMirrorPushed: boolean;\n  /** 是否已修改目标仓库的项目描述 */\n  isDescriptionUpdated: boolean;\n  /** 是否已克隆迁移后的仓库 */\n  isFinalCloned: boolean;\n  /** 失败原因 */\n  failureReason: string;\n  /** 错误类型 */\n  errorType?: TErrorType;\n  /** 详细步骤记录 */\n  steps: TMigrationStep[];\n  /** 警告信息列表 */\n  warnings: string[];\n  /** 重试次数 */\n  retryCount: number;\n  /** 最后更新时间 */\n  lastUpdated: string;\n};\n\n/**\n * 交互式输入 Access Token\n */\nfunction promptForAccessToken(): Promise<string> {\n  return new Promise((resolve) => {\n    // 创建一个没有输出流的 readline 接口，防止回显\n    const rl = readline.createInterface({\n      input: process.stdin,\n      output: undefined, // 禁用输出流，防止回显\n      terminal: false\n    });\n\n    // 隐藏输入的字符\n    const stdin = process.stdin;\n    stdin.setRawMode(true);\n    stdin.resume();\n    stdin.setEncoding('utf8');\n\n    let token = '';\n    console.log('\\n🔑 请输入 GitLab Access Token (隐蔽输入，点击右键一下即可粘贴):');\n    \n    stdin.on('data', (key: string) => {\n      // 处理回车键\n      if (key === '\\r' || key === '\\n') {\n        stdin.setRawMode(false);\n        stdin.pause();\n        rl.close();\n        console.log('\\n✅ Access Token 已输入');\n        resolve(token.trim());\n        return;\n      }\n      \n      // 处理退格键\n      if (key === '\\u0008' || key === '\\u007f') {\n        if (token.length > 0) {\n          token = token.slice(0, -1);\n        }\n        return;\n      }\n      \n      // 处理 Ctrl+C\n      if (key === '\\u0003') {\n        console.log('\\n❌ 用户取消输入');\n        process.exit(1);\n      }\n      \n      // 添加字符到token\n      if (key.charCodeAt(0) >= 32) {\n        token += key;\n      }\n    });\n  });\n}\n\n/**\n * GitLab 项目迁移器\n */\nclass GitLabMigrator {\n  private moveFilePath: string;\n  private accessToken: string;\n  private targetGroupUrl: string;\n  private repositories: TRepository[];\n  private logs: Map<string, TMigrationLog>;\n  private selectedProjects: string[];\n  private tempDir: string;\n  private saveTimeout: NodeJS.Timeout | null = null;\n  private skipFinalClone: boolean;\n  private quietMode: boolean;\n\n  constructor(moveFilePath: string = path.resolve(process.cwd(), 'move.md'), selectedProjects?: string[], accessToken?: string, skipFinalClone: boolean = false, quietMode: boolean = false) {\n    this.moveFilePath = moveFilePath;\n    this.accessToken = accessToken || '';\n    this.skipFinalClone = skipFinalClone;\n    this.quietMode = quietMode;\n    this.targetGroupUrl = '';\n    this.repositories = [];\n    this.logs = new Map();\n    this.selectedProjects = selectedProjects || [];\n    \n    // 使用更具私有化特征的临时目录命名\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const randomSuffix = Math.random().toString(36).substring(2, 8);\n    this.tempDir = path.join(process.cwd(), `temp-migration-${timestamp}-${randomSuffix}`);\n    \n    // 清理旧备份文件和临时目录\n    this.cleanupOldBackups();\n    this.cleanupOldTempDirectories();\n  }\n\n  /**\n   * 解析move.md文件\n   */\n  private parseMoveFile(): void {\n    console.log('📖 正在解析move.md文件...');\n    \n    if (!existsSync(this.moveFilePath)) {\n      throw new Error(`move.md文件不存在: ${this.moveFilePath}`);\n    }\n\n    const content = readFileSync(this.moveFilePath, 'utf-8');\n    const lines = content.split('\\n');\n    const parseErrors: string[] = [];\n\n    // 解析 Access Token（如果构造函数中没有提供）\n    if (!this.accessToken) {\n      const accessTokenIndex = lines.findIndex(line => line.includes('## 迁移目标 Access Token'));\n      if (accessTokenIndex !== -1 && accessTokenIndex + 2 < lines.length) {\n        const tokenLine = lines[accessTokenIndex + 2].trim();\n        if (tokenLine && tokenLine !== 'your_gitlab_access_token' && tokenLine !== 'your_access_token') {\n          this.accessToken = tokenLine;\n          console.log('🔑 从 move.md 文件中读取到 Access Token');\n        }\n      } else {\n        parseErrors.push('未找到有效的 Access Token 配置');\n      }\n    }\n\n    // 解析目标分组\n    const targetGroupIndex = lines.findIndex(line => line.includes('## 迁移目标分组'));\n    if (targetGroupIndex !== -1 && targetGroupIndex + 2 < lines.length) {\n      this.targetGroupUrl = lines[targetGroupIndex + 2].trim();\n      if (!this.targetGroupUrl) {\n        parseErrors.push('目标分组URL为空');\n      } else if (!this.isValidUrl(this.targetGroupUrl)) {\n        parseErrors.push(`目标分组URL格式无效: ${this.targetGroupUrl}`);\n      }\n    } else {\n      parseErrors.push('未找到目标分组配置');\n    }\n\n    // 解析需要迁移的仓库表格\n    const tableStartIndex = lines.findIndex(line => line.includes('| 项目名称 | 项目描述 | 原仓库地址 |'));\n    if (tableStartIndex !== -1) {\n      let validRepoCount = 0;\n      for (let i = tableStartIndex + 2; i < lines.length; i++) {\n        const line = lines[i].trim();\n        const lineNumber = i + 1;\n        \n        // 遇到日志部分或空行则停止解析\n        if (!line || line.includes('## 日志') || line.includes('## ')) break;\n        \n        // 跳过分隔线\n        if (line.match(/^\\|[-\\s|]+\\|$/)) continue;\n        \n        // 检查是否为表格行\n        if (!line.startsWith('|') || !line.endsWith('|')) {\n          parseErrors.push(`第${lineNumber}行格式错误：表格行必须以 | 开头和结尾`);\n          continue;\n        }\n        \n        const columns = line.split('|').map(col => col.trim()).filter(col => col);\n        \n        if (columns.length < 3) {\n          parseErrors.push(`第${lineNumber}行数据不完整：需要至少3列数据（项目名称、项目描述、原仓库地址）`);\n          continue;\n        }\n        \n        const [name, description, originalUrl] = columns;\n        \n        // 验证必填字段\n        if (!name) {\n          parseErrors.push(`第${lineNumber}行：项目名称不能为空`);\n          continue;\n        }\n        \n        if (!originalUrl) {\n          parseErrors.push(`第${lineNumber}行：原仓库地址不能为空`);\n          continue;\n        }\n        \n        // 验证URL格式\n        if (!this.isValidGitUrl(originalUrl)) {\n          parseErrors.push(`第${lineNumber}行：原仓库地址格式无效: ${originalUrl}`);\n          continue;\n        }\n        \n        // 检查重复项目名称\n        if (this.repositories.some(repo => repo.name === name)) {\n          parseErrors.push(`第${lineNumber}行：项目名称重复: ${name}`);\n          continue;\n        }\n        \n        this.repositories.push({\n          name,\n          description: description || '无描述',\n          originalUrl\n        });\n        \n        validRepoCount++;\n      }\n      \n      if (validRepoCount === 0) {\n        parseErrors.push('未找到有效的仓库配置');\n      }\n    } else {\n      parseErrors.push('未找到仓库列表表格');\n    }\n\n    // 解析现有日志\n    this.parseExistingLogs(content);\n    \n    // 输出解析结果和错误\n    if (parseErrors.length > 0) {\n      console.log(ConsoleColors.warning('⚠️  配置文件解析警告:'));\n      parseErrors.forEach(error => {\n        console.log(ConsoleColors.dim(`   • ${error}`));\n      });\n      console.log('');\n    }\n    \n    console.log(`✅ 解析完成，找到 ${this.repositories.length} 个待迁移仓库`);\n    console.log(`🎯 目标分组: ${this.targetGroupUrl}`);\n    \n    // 执行配置验证\n    const validation = this.validateConfiguration();\n    \n    // 输出验证结果\n    if (validation.warnings.length > 0) {\n      console.log(ConsoleColors.warning('⚠️  配置验证警告:'));\n      validation.warnings.forEach(warning => {\n        console.log(ConsoleColors.dim(`   • ${warning}`));\n      });\n      console.log('');\n    }\n    \n    if (validation.errors.length > 0) {\n      console.log(ConsoleColors.error('❌ 配置验证错误:'));\n      validation.errors.forEach(error => {\n        console.log(ConsoleColors.dim(`   • ${error}`));\n      });\n      console.log('');\n      throw new Error('配置文件验证失败，请修复上述错误后重试');\n    }\n    \n    // 如果有严重的解析错误，抛出异常\n    if (!this.targetGroupUrl || this.repositories.length === 0) {\n      throw new Error('配置文件解析失败：缺少必要的配置信息');\n    }\n  }\n\n  /**\n   * 验证URL格式\n   */\n  private isValidUrl(url: string): boolean {\n    try {\n      new URL(url);\n      return true;\n    } catch {\n      return false;\n    }\n  }\n\n  /**\n   * 验证Git仓库URL格式\n   */\n  private isValidGitUrl(url: string): boolean {\n    // 支持 https、ssh、git 协议\n    const gitUrlPattern = /^(https?:\\/\\/|ssh:\\/\\/git@|git@)[\\w\\.-]+(:\\d+)?[:\\/][\\w\\.-]+\\/[\\w\\.-]+(\\.git)?\\/?$/;\n    return gitUrlPattern.test(url);\n  }\n\n  /**\n   * 验证配置文件完整性\n   */\n  private validateConfiguration(): { isValid: boolean; errors: string[]; warnings: string[] } {\n    const errors: string[] = [];\n    const warnings: string[] = [];\n\n    // 验证 Access Token\n    if (!this.accessToken || this.accessToken === 'your_gitlab_access_token' || this.accessToken === 'your_access_token') {\n      warnings.push('Access Token 未配置或使用默认值，需要通过其他方式提供');\n    } else if (this.accessToken.length < 20) {\n      warnings.push('Access Token 长度可能不正确，请确认是否为有效的 GitLab Access Token');\n    }\n\n    // 验证目标分组\n    if (!this.targetGroupUrl) {\n      errors.push('目标分组URL未配置');\n    } else {\n      if (!this.isValidUrl(this.targetGroupUrl)) {\n        errors.push(`目标分组URL格式无效: ${this.targetGroupUrl}`);\n      } else if (!this.targetGroupUrl.includes('gitlab')) {\n        warnings.push('目标分组URL似乎不是GitLab地址，请确认是否正确');\n      }\n    }\n\n    // 验证仓库列表\n    if (this.repositories.length === 0) {\n      errors.push('未找到任何待迁移的仓库');\n    } else {\n      // 检查仓库名称唯一性\n      const nameSet = new Set<string>();\n      const duplicateNames: string[] = [];\n      \n      this.repositories.forEach(repo => {\n        if (nameSet.has(repo.name)) {\n          duplicateNames.push(repo.name);\n        } else {\n          nameSet.add(repo.name);\n        }\n        \n        // 验证仓库名称格式\n        if (!/^[a-zA-Z0-9_-]+$/.test(repo.name)) {\n          warnings.push(`仓库名称 \"${repo.name}\" 包含特殊字符，可能导致创建失败`);\n        }\n        \n        // 验证原仓库URL\n        if (!this.isValidGitUrl(repo.originalUrl)) {\n          errors.push(`仓库 \"${repo.name}\" 的原仓库地址格式无效: ${repo.originalUrl}`);\n        }\n        \n        // 检查描述长度\n        if (repo.description && repo.description.length > 2000) {\n          warnings.push(`仓库 \"${repo.name}\" 的描述过长，可能被截断`);\n        }\n      });\n      \n      if (duplicateNames.length > 0) {\n        errors.push(`发现重复的仓库名称: ${duplicateNames.join(', ')}`);\n      }\n    }\n\n    // 验证选中的项目是否存在\n    if (this.selectedProjects.length > 0) {\n      const invalidProjects = this.selectedProjects.filter(name => \n        !this.repositories.some(repo => repo.name === name)\n      );\n      \n      if (invalidProjects.length > 0) {\n        errors.push(`指定的项目不存在: ${invalidProjects.join(', ')}`);\n      }\n    }\n\n    return {\n      isValid: errors.length === 0,\n      errors,\n      warnings\n    };\n  }\n\n  /**\n   * 解析现有的迁移日志\n   */\n  private parseExistingLogs(content: string): void {\n    const lines = content.split('\\n');\n    let currentLog: Partial<TMigrationLog> | null = null;\n    \n    for (let i = 0; i < lines.length; i++) {\n      const line = lines[i].trim();\n      \n      // 检测新的日志项目开始\n      if (line.startsWith('### ') && !line.includes('paimai-activity')) {\n        // 保存上一个日志项目\n        if (currentLog && currentLog.projectName) {\n          this.logs.set(currentLog.projectName, currentLog as TMigrationLog);\n        }\n        \n        // 开始新的日志项目\n        const projectName = line.substring(4).trim();\n        currentLog = {\n          projectName,\n          projectDescription: '',\n          originalRepoUrl: '',\n          targetGroup: '',\n          targetRepoUrl: '',\n          startTime: '',\n          endTime: '',\n          duration: '',\n          isOriginalCloned: false,\n          isTargetCreated: false,\n          isMirrorPushed: false,\n          isDescriptionUpdated: false,\n          isFinalCloned: false,\n          failureReason: '',\n          steps: [],\n          warnings: [],\n          retryCount: 0,\n          lastUpdated: new Date().toISOString()\n        };\n      }\n      \n      // 解析日志字段\n      if (currentLog && line.startsWith('- **')) {\n        const match = line.match(/- \\*\\*(.+?)\\*\\*: (.*)/);\n        if (match) {\n          const [, key, value] = match;\n          switch (key) {\n            case '项目描述':\n              currentLog.projectDescription = value;\n              break;\n            case '原仓库地址':\n              currentLog.originalRepoUrl = value;\n              break;\n            case '目标分组':\n              currentLog.targetGroup = value;\n              break;\n            case '目标仓库地址':\n              currentLog.targetRepoUrl = value;\n              break;\n            case '开始时间':\n              currentLog.startTime = value;\n              break;\n            case '结束时间':\n              currentLog.endTime = value;\n              break;\n            case '耗时':\n              currentLog.duration = value;\n              break;\n            case '是否已克隆原仓库镜像':\n              currentLog.isOriginalCloned = value === '✅';\n              break;\n            case '是否已创建目标仓库':\n              currentLog.isTargetCreated = value === '✅';\n              break;\n            case '是否已推送镜像到目标仓库':\n              currentLog.isMirrorPushed = value === '✅';\n              break;\n            case '是否已修改目标仓库的项目描述':\n              currentLog.isDescriptionUpdated = value === '✅';\n              break;\n            case '是否已克隆迁移后的仓库':\n              currentLog.isFinalCloned = value === '✅';\n              break;\n            case '失败原因':\n              currentLog.failureReason = value;\n              break;\n          }\n        }\n      }\n    }\n    \n    // 保存最后一个日志项目\n    if (currentLog && currentLog.projectName) {\n      this.logs.set(currentLog.projectName, currentLog as TMigrationLog);\n    }\n    \n    console.log(`📋 解析到 ${this.logs.size} 个现有日志记录`);\n    \n    // 清理不在配置文件中的项目日志\n    this.cleanupOrphanedLogs();\n  }\n  \n  /**\n   * 清理不在配置文件中的项目日志\n   */\n  private cleanupOrphanedLogs(): void {\n    const configuredProjectNames = new Set(this.repositories.map(repo => repo.name));\n    const orphanedProjects: string[] = [];\n    \n    // 找出不在配置文件中的项目\n    for (const [projectName] of this.logs) {\n      if (!configuredProjectNames.has(projectName)) {\n        orphanedProjects.push(projectName);\n      }\n    }\n    \n    // 删除孤立的项目日志\n    if (orphanedProjects.length > 0) {\n      console.log(`🧹 清理 ${orphanedProjects.length} 个不在配置文件中的项目日志: ${orphanedProjects.join(', ')}`);\n      orphanedProjects.forEach(projectName => {\n        this.logs.delete(projectName);\n      });\n    }\n  }\n\n  /**\n   * 获取GitLab API基础URL\n   */\n  private getGitLabApiBase(): string {\n    // 从目标分组URL中提取GitLab实例的基础URL\n    const url = new URL(this.targetGroupUrl);\n    return `${url.protocol}//${url.host}/api/v4`;\n  }\n\n  /**\n   * 从GitLab URL中提取分组路径\n   */\n  private extractGroupPath(groupUrl: string): string {\n    try {\n      const url = new URL(groupUrl);\n      let pathname = url.pathname;\n      // 移除开头的斜杠\n      if (pathname.startsWith('/')) {\n        pathname = pathname.substring(1);\n      }\n      // 移除结尾的斜杠\n      if (pathname.endsWith('/')) {\n        pathname = pathname.slice(0, -1);\n      }\n      return pathname;\n    } catch (error) {\n      throw new Error(`无效的分组URL: ${groupUrl}`);\n    }\n  }\n\n  /**\n   * 获取分组ID\n   */\n  private async getGroupId(groupUrl: string): Promise<number> {\n    try {\n      const groupPath = this.extractGroupPath(groupUrl);\n      const apiUrl = `${this.getGitLabApiBase()}/groups/${encodeURIComponent(groupPath)}`;\n      \n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (!response.ok) {\n        throw new Error(`获取分组信息失败，HTTP状态码: ${response.status}`);\n      }\n      \n      const groupInfo = await response.json();\n      return groupInfo.id;\n    } catch (error: any) {\n      throw new Error(`获取分组ID失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 执行命令并返回结果\n   */\n  private executeCommand(command: string, cwd?: string): string {\n    try {\n      if (!this.quietMode) {\n        console.log(ConsoleColors.dim(`执行命令: ${command}`));\n      }\n      const result = execSync(command, { \n        cwd: cwd || process.cwd(),\n        encoding: 'utf-8',\n        stdio: 'pipe'\n      });\n      if (!this.quietMode) {\n        console.log(ConsoleColors.dim(`命令执行成功`));\n      }\n      return result.toString().trim();\n    } catch (error: any) {\n      console.log(ConsoleColors.error(`命令执行失败: ${command}`));\n      throw new Error(`命令执行失败: ${command}\\n错误信息: ${error.message}`);\n    }\n  }\n\n  /**\n   * 执行命令并显示实时输出（用于需要显示进度的长时间运行命令）\n   */\n  private executeCommandWithProgress(command: string, cwd?: string): string {\n    try {\n      if (!this.quietMode) {\n        console.log(ConsoleColors.dim(`执行命令: ${command}`));\n      }\n      const result = execSync(command, { \n        cwd: cwd || process.cwd(),\n        encoding: 'utf-8',\n        stdio: this.quietMode ? 'pipe' : 'inherit' // 静默模式下隐藏实时输出\n      });\n      if (!this.quietMode) {\n        console.log(ConsoleColors.dim(`命令执行成功`));\n      }\n      return result ? result.toString().trim() : '';\n    } catch (error: any) {\n      console.log(ConsoleColors.error(`命令执行失败: ${command}`));\n      throw new Error(`命令执行失败: ${command}\\n错误信息: ${error.message}`);\n    }\n  }\n\n  /**\n   * 执行命令并返回结果（支持错误降级处理）\n   */\n  private executeCommandWithWarningSupport(command: string, cwd?: string): { success: boolean; output: string; warning?: string } {\n    try {\n      console.log(ConsoleColors.dim(`执行命令: ${command}`));\n      const result = execSync(command, { \n        cwd: cwd || process.cwd(),\n        encoding: 'utf-8',\n        stdio: 'pipe'\n      });\n      console.log(ConsoleColors.dim(`命令执行成功`));\n      return { success: true, output: result.toString().trim() };\n    } catch (error: any) {\n      const errorMessage = error.message || '';\n      \n      // 检查是否为隐藏引用相关的错误，将其降级为警告\n      if (errorMessage.includes('deny updating a hidden ref') || \n          errorMessage.includes('refs/keep-around') ||\n          errorMessage.includes('refs/merge-requests') ||\n          errorMessage.includes('refs/pipelines') ||\n          errorMessage.includes('refs/environments') ||\n          errorMessage.includes('refs/heads/') ||\n          errorMessage.includes('refs/tags/') ||\n          errorMessage.includes('hidden ref') ||\n          errorMessage.includes('refusing to update checked out branch') ||\n          errorMessage.includes('remote rejected') ||\n          errorMessage.includes('pre-receive hook declined') ||\n          errorMessage.includes('! [remote rejected]') ||\n          errorMessage.includes('hook declined') ||\n          errorMessage.includes('protected branch') ||\n          errorMessage.includes('To ') ||\n          errorMessage.includes('Everything up-to-date') ||\n          errorMessage.includes('non-fast-forward') ||\n          errorMessage.includes('failed to push some refs') ||\n          errorMessage.includes('updates were rejected') ||\n          errorMessage.includes('fetch first') ||\n          errorMessage.includes('hint: Updates were rejected') ||\n          errorMessage.includes('error: failed to push')) {\n        console.log(ConsoleColors.warning(`⚠️  警告: ${errorMessage}`));\n        console.log(ConsoleColors.info('这是一个隐藏引用相关的警告，不影响迁移结果'));\n        return { success: true, output: '', warning: errorMessage };\n      }\n      \n      // 检查是否为文件系统相关的错误，将其降级为警告\n      if (errorMessage.includes('EBUSY: resource busy or locked') ||\n          errorMessage.includes('resource busy or locked') ||\n          errorMessage.includes('cannot delete') ||\n          errorMessage.includes('cannot remove') ||\n          errorMessage.includes('ENOENT: no such file or directory') ||\n          errorMessage.includes('no such file or directory') ||\n          errorMessage.includes('ENOSPC: no space left on device') ||\n          errorMessage.includes('no space left on device')) {\n        if (!this.quietMode) {\n          console.log(ConsoleColors.warning(`⚠️  警告: 文件系统操作遇到问题`));\n          console.log(ConsoleColors.info('这是一个文件系统相关的警告，不影响迁移结果'));\n        }\n        return { success: true, output: '', warning: '文件系统操作遇到问题，但不影响迁移结果' };\n      }\n      \n      // 其他错误正常抛出\n      console.log(ConsoleColors.error(`命令执行失败: ${command}`));\n      throw new Error(`命令执行失败: ${command}\\n错误信息: ${errorMessage}`);\n    }\n  }\n\n  /**\n   * 执行命令并显示实时输出（支持错误降级处理和进度显示）\n   */\n  private executeCommandWithWarningAndProgress(command: string, cwd?: string): { success: boolean; output: string; warning?: string } {\n    try {\n      if (!this.quietMode) {\n        console.log(ConsoleColors.dim(`执行命令: ${command}`));\n      }\n      const result = execSync(command, { \n        cwd: cwd || process.cwd(),\n        encoding: 'utf-8',\n        stdio: this.quietMode ? 'pipe' : 'inherit' // 静默模式下隐藏实时输出\n      });\n      if (!this.quietMode) {\n        console.log(ConsoleColors.dim(`命令执行成功`));\n      }\n      return { success: true, output: result ? result.toString().trim() : '' };\n    } catch (error: any) {\n      // 获取完整的错误信息，包括 stderr\n      const errorMessage = error.message || '';\n      const stderr = error.stderr ? error.stderr.toString() : '';\n      const stdout = error.stdout ? error.stdout.toString() : '';\n      const fullErrorMessage = `${errorMessage}\\n${stderr}\\n${stdout}`.trim();\n      \n      // 检查是否为隐藏引用相关的错误，将其降级为警告\n      if (fullErrorMessage.includes('deny updating a hidden ref') || \n          fullErrorMessage.includes('refs/keep-around') ||\n          fullErrorMessage.includes('refs/merge-requests') ||\n          fullErrorMessage.includes('refs/pipelines') ||\n          fullErrorMessage.includes('refs/environments') ||\n          fullErrorMessage.includes('refs/heads/') ||\n          fullErrorMessage.includes('refs/tags/') ||\n          fullErrorMessage.includes('hidden ref') ||\n          fullErrorMessage.includes('refusing to update checked out branch') ||\n          fullErrorMessage.includes('remote rejected') ||\n          fullErrorMessage.includes('pre-receive hook declined') ||\n          fullErrorMessage.includes('! [remote rejected]') ||\n          fullErrorMessage.includes('hook declined') ||\n          fullErrorMessage.includes('protected branch') ||\n          fullErrorMessage.includes('To ') ||\n          fullErrorMessage.includes('Everything up-to-date') ||\n          fullErrorMessage.includes('non-fast-forward') ||\n          fullErrorMessage.includes('failed to push some refs') ||\n          fullErrorMessage.includes('updates were rejected') ||\n          fullErrorMessage.includes('fetch first') ||\n          fullErrorMessage.includes('hint: Updates were rejected') ||\n          fullErrorMessage.includes('error: failed to push') ||\n          stderr.includes('deny updating a hidden ref') ||\n          stderr.includes('refs/keep-around') ||\n          stderr.includes('refs/merge-requests') ||\n          stderr.includes('refs/pipelines') ||\n          stderr.includes('refs/environments') ||\n          stderr.includes('refs/heads/') ||\n          stderr.includes('refs/tags/') ||\n          stderr.includes('remote rejected') ||\n          stderr.includes('! [remote rejected]') ||\n          stderr.includes('hook declined') ||\n          stderr.includes('protected branch') ||\n          stderr.includes('To ') ||\n          stderr.includes('Everything up-to-date') ||\n          stderr.includes('non-fast-forward') ||\n          stderr.includes('failed to push some refs') ||\n          stderr.includes('updates were rejected') ||\n          stderr.includes('fetch first') ||\n          stderr.includes('hint: Updates were rejected') ||\n          stderr.includes('error: failed to push')) {\n        if (!this.quietMode) {\n          console.log(ConsoleColors.warning(`⚠️  警告: 推送过程中遇到隐藏引用相关警告`));\n          console.log(ConsoleColors.info('这是一个隐藏引用相关的警告，不影响迁移结果'));\n        }\n        return { success: true, output: stdout, warning: '推送过程中遇到隐藏引用相关警告，但不影响迁移结果' };\n      }\n      \n      // 检查是否为文件系统相关的错误，将其降级为警告\n      if (fullErrorMessage.includes('EBUSY: resource busy or locked') ||\n          fullErrorMessage.includes('resource busy or locked') ||\n          fullErrorMessage.includes('cannot delete') ||\n          fullErrorMessage.includes('cannot remove') ||\n          fullErrorMessage.includes('ENOENT: no such file or directory') ||\n          fullErrorMessage.includes('no such file or directory') ||\n          fullErrorMessage.includes('ENOSPC: no space left on device') ||\n          fullErrorMessage.includes('no space left on device') ||\n          stderr.includes('EBUSY: resource busy or locked') ||\n          stderr.includes('resource busy or locked') ||\n          stderr.includes('cannot delete') ||\n          stderr.includes('cannot remove')) {\n        if (!this.quietMode) {\n          console.log(ConsoleColors.warning(`⚠️  警告: 文件系统操作遇到问题`));\n          console.log(ConsoleColors.info('这是一个文件系统相关的警告，不影响迁移结果'));\n        }\n        return { success: true, output: stdout, warning: '文件系统操作遇到问题，但不影响迁移结果' };\n      }\n      \n      // 其他错误正常抛出\n      if (!this.quietMode) {\n        console.log(ConsoleColors.error(`命令执行失败: ${command}`));\n      }\n      throw new Error(`命令执行失败: ${command}\\n错误信息: ${fullErrorMessage}`);\n    }\n  }\n\n  /**\n   * 检查目标分组中是否已存在同名仓库\n   */\n  private async checkRepositoryExists(repoName: string): Promise<{ exists: boolean; isEmpty?: boolean; targetUrl?: string }> {\n    try {\n      console.log(`🔍 检查仓库是否存在: ${repoName}`);\n      \n      // 从目标分组URL中提取分组路径\n      const groupPath = this.extractGroupPath(this.targetGroupUrl);\n      const apiUrl = `${this.getGitLabApiBase()}/projects/${encodeURIComponent(groupPath + '/' + repoName)}`;\n      \n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (response.status === 200) {\n        const projectData = await response.json();\n        console.log(`⚠️ 仓库已存在: ${repoName}`);\n        \n        // 检查是否为空仓库\n        const isEmpty = await this.checkIfRepositoryIsEmpty(projectData.id);\n        if (isEmpty) {\n          console.log(ConsoleColors.warning(`⚠️ 目标仓库 ${ConsoleColors.highlight(repoName)} 是一个空仓库`));\n          const shouldContinue = await this.promptUserConfirmation(\n            `目标仓库 \"${repoName}\" 已存在但是空仓库，是否继续迁移？这将覆盖空仓库的内容。\\n是否继续？ (y/N): `\n          );\n          \n          if (!shouldContinue) {\n            throw new Error('用户取消迁移操作');\n          }\n          \n          console.log(ConsoleColors.info('用户确认继续迁移到空仓库'));\n          // 根据目标分组URL的协议来决定返回HTTPS还是SSH URL\n          const targetUrl = this.targetGroupUrl.startsWith('https://') \n            ? projectData.http_url_to_repo \n            : projectData.ssh_url_to_repo;\n          return { exists: true, isEmpty: true, targetUrl };\n        }\n        \n        return { exists: true, isEmpty: false };\n      } else if (response.status === 404) {\n        console.log(`✅ 仓库不存在，可以创建: ${repoName}`);\n        return { exists: false };\n      } else {\n        throw new Error(`检查仓库存在性失败，HTTP状态码: ${response.status}`);\n      }\n    } catch (error: any) {\n      console.log(`❌ 检查仓库存在性时发生错误: ${error.message}`);\n      throw error;\n    }\n  }\n\n  /**\n   * 检查仓库是否为空\n   */\n  private async checkIfRepositoryIsEmpty(projectId: number): Promise<boolean> {\n    try {\n      // 检查仓库的提交数量\n      const commitsUrl = `${this.getGitLabApiBase()}/projects/${projectId}/repository/commits`;\n      const commitsResponse = await fetch(commitsUrl, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        }\n      });\n      \n      if (commitsResponse.status === 200) {\n        const commits = await commitsResponse.json();\n        return commits.length === 0;\n      } else if (commitsResponse.status === 404) {\n        // 404表示没有提交记录，即空仓库\n        return true;\n      }\n      \n      return false;\n    } catch (error: any) {\n      console.log(`⚠️ 检查仓库是否为空时发生错误: ${error.message}`);\n      // 如果检查失败，保守起见认为不是空仓库\n      return false;\n    }\n  }\n\n  /**\n   * 提示用户确认操作\n   */\n  private async promptUserConfirmation(message: string): Promise<boolean> {\n    return new Promise((resolve) => {\n      const rl = readline.createInterface({\n        input: process.stdin,\n        output: process.stdout\n      });\n      \n      rl.question(message, (answer) => {\n        rl.close();\n        const normalizedAnswer = answer.toLowerCase().trim();\n        resolve(normalizedAnswer === 'y' || normalizedAnswer === 'yes');\n      });\n    });\n  }\n\n  /**\n   * 从仓库URL中提取仓库名\n   */\n  private extractRepoNameFromUrl(url: string): string {\n    const match = url.match(/\\/([^\\/]+)\\.git$/);\n    if (match) {\n      return match[1];\n    }\n    \n    // 如果没有.git后缀，提取最后一个路径段\n    const segments = url.split('/');\n    return segments[segments.length - 1];\n  }\n\n  /**\n   * 克隆原仓库镜像\n   */\n  private cloneOriginalRepository(repo: TRepository): string {\n    console.log(`🔄 正在克隆原仓库镜像: ${repo.name}`);\n    console.log(ConsoleColors.info(`原仓库地址: ${ConsoleColors.url(repo.originalUrl)}`));\n    \n    // 确保临时目录存在\n    if (!existsSync(this.tempDir)) {\n      mkdirSync(this.tempDir, { recursive: true });\n      console.log(ConsoleColors.dim(`创建临时目录: ${this.tempDir}`));\n    }\n    \n    // 从仓库URL中提取实际的仓库名作为镜像目录名\n    const actualRepoName = this.extractRepoNameFromUrl(repo.originalUrl);\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const randomSuffix = Math.random().toString(36).substring(2, 6);\n    const cloneDirName = `${actualRepoName}-${timestamp}-${randomSuffix}.git`;\n    const cloneDir = path.join(this.tempDir, cloneDirName);\n    console.log(ConsoleColors.info(`镜像目录: ${ConsoleColors.dim(cloneDir)}`));\n    \n    // 如果目录已存在，先删除\n    if (existsSync(cloneDir)) {\n      console.log(ConsoleColors.warning(`删除已存在的镜像目录: ${ConsoleColors.dim(cloneDir)}`));\n      rmSync(cloneDir, { recursive: true, force: true });\n    }\n\n    console.log(ConsoleColors.progress(`开始克隆镜像...`));\n    const cloneCommand = `git clone --mirror ${repo.originalUrl} \"${cloneDir}\"`;\n    this.executeCommandWithProgress(cloneCommand);\n    \n    console.log(ConsoleColors.success(`原仓库镜像克隆完成: ${ConsoleColors.dim(cloneDir)}`));\n    return cloneDir;\n  }\n\n  /**\n   * 创建目标仓库\n   */\n  private async createTargetRepository(repo: TRepository): Promise<string> {\n    try {\n      console.log(ConsoleColors.info(`正在创建目标仓库: ${ConsoleColors.highlight(repo.name)}`));\n      \n      // 从目标分组URL中提取分组ID\n      const groupId = await this.getGroupId(this.targetGroupUrl);\n      const apiUrl = `${this.getGitLabApiBase()}/projects`;\n      \n      const projectData = {\n        name: repo.name,\n        path: repo.name,\n        description: repo.description || '',\n        namespace_id: groupId,\n        visibility: 'internal', // 设置为内部可见\n        initialize_with_readme: false,\n        issues_enabled: true,\n        merge_requests_enabled: true,\n        wiki_enabled: true,\n        snippets_enabled: true\n      };\n      \n      const response = await fetch(apiUrl, {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(projectData)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`创建仓库失败，HTTP状态码: ${response.status}，错误信息: ${errorData}`);\n      }\n      \n      const projectInfo = await response.json();\n      // 根据目标分组URL的协议来决定返回HTTPS还是SSH URL\n      const targetUrl = this.targetGroupUrl.startsWith('https://') \n        ? projectInfo.http_url_to_repo \n        : projectInfo.ssh_url_to_repo;\n      \n      console.log(ConsoleColors.success(`目标仓库创建完成: ${ConsoleColors.url(targetUrl)}`));\n      return targetUrl;\n    } catch (error: any) {\n      console.log(ConsoleColors.error(`创建目标仓库失败: ${error.message}`));\n      throw error;\n    }\n  }\n\n  /**\n   * 推送镜像到目标仓库\n   */\n  private pushMirrorToTarget(cloneDir: string, targetUrl: string): { hasWarnings: boolean; warnings?: string[] } {\n    console.log(ConsoleColors.info(`正在推送镜像到目标仓库...`));\n    console.log(ConsoleColors.info(`目标仓库地址: ${ConsoleColors.url(targetUrl)}`));\n    console.log(ConsoleColors.info(`镜像目录: ${ConsoleColors.dim(cloneDir)}`));\n    \n    const originalCwd = process.cwd();\n    const warnings: string[] = [];\n    let hasWarnings = false;\n    \n    try {\n      // 进入克隆目录\n      console.log(ConsoleColors.progress(`切换到镜像目录: ${cloneDir}`));\n      process.chdir(cloneDir);\n      \n      // 设置新的远程地址\n      console.log(ConsoleColors.progress(`设置目标仓库远程地址...`));\n      const setUrlCommand = `git remote set-url origin \"${targetUrl}\"`;\n      this.executeCommand(setUrlCommand);\n      \n      // 推送镜像（支持隐藏引用错误降级为警告）\n      console.log(ConsoleColors.progress(`开始推送镜像到目标仓库...`));\n      const pushCommand = 'git push --mirror';\n      const pushResult = this.executeCommandWithWarningAndProgress(pushCommand);\n      \n      if (pushResult.warning) {\n        hasWarnings = true;\n        const warningMsg = `推送时遇到隐藏引用警告: ${pushResult.warning}`;\n        warnings.push(warningMsg);\n        console.log(ConsoleColors.info('镜像推送完成（存在警告，但不影响迁移结果）'));\n      } else {\n        console.log(ConsoleColors.success(`镜像推送完成`));\n      }\n      \n      return { hasWarnings, warnings: hasWarnings ? warnings : undefined };\n    } finally {\n      // 确保返回原始目录\n      console.log(ConsoleColors.progress(`返回原始工作目录`));\n      process.chdir(originalCwd);\n    }\n  }\n\n  /**\n   * 设置目标仓库的项目描述\n   */\n  private async updateRepositoryDescription(repoName: string, description: string): Promise<void> {\n    try {\n      console.log(ConsoleColors.info(`正在更新仓库描述: ${ConsoleColors.repo(repoName)}`));\n      \n      if (!description || description.trim() === '') {\n        console.log(ConsoleColors.warning(`描述为空，跳过更新`));\n        return;\n      }\n      \n      // 从目标分组URL中提取分组路径\n      const groupPath = this.extractGroupPath(this.targetGroupUrl);\n      const projectPath = `${groupPath}/${repoName}`;\n      const apiUrl = `${this.getGitLabApiBase()}/projects/${encodeURIComponent(projectPath)}`;\n      \n      const updateData = {\n        description: description.trim()\n      };\n      \n      const response = await fetch(apiUrl, {\n        method: 'PUT',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updateData)\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        throw new Error(`更新仓库描述失败，HTTP状态码: ${response.status}，错误信息: ${errorData}`);\n      }\n      \n      console.log(ConsoleColors.success(`仓库描述更新完成: ${ConsoleColors.description(description.trim())}`));\n    } catch (error: any) {\n      console.log(ConsoleColors.error(`更新仓库描述失败: ${error.message}`));\n      throw error;\n    }\n  }\n\n  /**\n   * 克隆迁移后的仓库到本地\n   */\n  private cloneFinalRepository(targetUrl: string, repoName: string): void {\n    console.log(ConsoleColors.info(`正在克隆迁移后的仓库到本地: ${ConsoleColors.repo(repoName)}`));\n    console.log(ConsoleColors.info(`目标仓库地址: ${ConsoleColors.url(targetUrl)}`));\n    console.log(ConsoleColors.info(`本地目录: ${ConsoleColors.dim(repoName)}`));\n    \n    // 如果目录已存在，先删除\n    if (existsSync(repoName)) {\n      console.log(ConsoleColors.warning(`删除已存在的目录: ${ConsoleColors.dim(repoName)}`));\n      rmSync(repoName, { recursive: true, force: true });\n    }\n\n    console.log(ConsoleColors.progress(`开始克隆迁移后的仓库...`));\n    const cloneCommand = `git clone \"${targetUrl}\" \"${repoName}\"`;\n    this.executeCommandWithProgress(cloneCommand);\n    \n    console.log(ConsoleColors.success(`迁移后仓库克隆完成: ${ConsoleColors.repo(repoName)}`));\n  }\n\n  /**\n   * 延迟保存迁移日志，避免频繁创建备份\n   */\n  private scheduleSaveMigrationLogs(): void {\n    // 清除之前的定时器\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n    }\n    \n    // 设置新的延迟保存定时器（2秒后保存）\n    this.saveTimeout = setTimeout(() => {\n      this.saveMigrationLogs();\n      this.saveTimeout = null;\n    }, 2000);\n  }\n\n  /**\n   * 强制保存迁移日志（程序退出时调用）\n   */\n  public forceSaveMigrationLogs(): void {\n    if (this.saveTimeout) {\n      clearTimeout(this.saveTimeout);\n      this.saveTimeout = null;\n    }\n    this.saveMigrationLogs();\n  }\n\n  /**\n   * 更新迁移日志\n   */\n  private updateMigrationLog(log: TMigrationLog): void {\n    // 更新最后修改时间\n    log.lastUpdated = new Date().toISOString();\n    \n    // 确保必要的字段存在\n    if (!log.steps) log.steps = [];\n    if (!log.warnings) log.warnings = [];\n    if (log.retryCount === undefined) log.retryCount = 0;\n    if (!log.errorType && log.failureReason) {\n      log.errorType = 'unknown';\n    }\n    \n    this.logs.set(log.projectName, log);\n    // 延迟保存，避免频繁创建备份\n    this.scheduleSaveMigrationLogs();\n  }\n\n  /**\n   * 创建配置文件备份\n   */\n  private createConfigBackup(): string {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const backupPath = this.moveFilePath.replace(/\\.md$/, `.backup.${timestamp}.md`);\n    \n    try {\n      const content = readFileSync(this.moveFilePath, 'utf-8');\n      writeFileSync(backupPath, content, 'utf-8');\n      console.log(ConsoleColors.dim(`📋 已创建配置文件备份: ${path.basename(backupPath)}`));\n      return backupPath;\n    } catch (error) {\n      console.log(ConsoleColors.warning(`⚠️  创建备份失败: ${error instanceof Error ? error.message : String(error)}`));\n      return '';\n    }\n  }\n\n  /**\n   * 清理旧备份文件（保留最近5个）\n   */\n  private cleanupOldBackups(): void {\n    try {\n      const dir = path.dirname(this.moveFilePath);\n      const baseName = path.basename(this.moveFilePath, '.md');\n      const files = readdirSync(dir);\n       \n       const backupFiles = files\n         .filter((file: string) => file.startsWith(`${baseName}.backup.`) && file.endsWith('.md'))\n         .map((file: string) => ({\n           name: file,\n           path: path.join(dir, file),\n           time: statSync(path.join(dir, file)).mtime\n         }))\n        .sort((a: any, b: any) => b.time.getTime() - a.time.getTime());\n      \n      // 保留最近5个备份，删除其余的\n      if (backupFiles.length > 5) {\n        const filesToDelete = backupFiles.slice(5);\n        filesToDelete.forEach((file: any) => {\n          try {\n            rmSync(file.path);\n            console.log(ConsoleColors.dim(`🗑️  已删除旧备份: ${file.name}`));\n          } catch (error) {\n            console.log(ConsoleColors.warning(`⚠️  删除备份失败: ${file.name}`));\n          }\n        });\n      }\n    } catch (error) {\n      // 清理失败不影响主流程，只记录警告\n      console.log(ConsoleColors.dim('⚠️  清理旧备份时出现问题，但不影响主流程'));\n    }\n  }\n\n  /**\n   * 清理旧的临时目录（保留最近3个，删除超过24小时的）\n   */\n  /**\n   * 清理旧的临时目录\n   * 增强版本：更好的错误处理、详细日志、空目录检测、强制清理策略\n   */\n  private cleanupOldTempDirectories(): void {\n    try {\n      const currentDir = process.cwd();\n      \n      // 检查当前目录是否存在\n      if (!existsSync(currentDir)) {\n        console.warn(ConsoleColors.warning('当前目录不存在，跳过临时目录清理'));\n        return;\n      }\n      \n      const files = readdirSync(currentDir);\n      const now = new Date().getTime();\n      const oneDayMs = 24 * 60 * 60 * 1000; // 24小时的毫秒数\n      const oneHourMs = 60 * 60 * 1000; // 1小时的毫秒数\n      \n      // 查找所有临时目录\n      const tempDirs = files\n        .filter((file: string) => {\n          try {\n            return file.startsWith('temp-migration-') && \n                   statSync(path.join(currentDir, file)).isDirectory();\n          } catch {\n            return false;\n          }\n        })\n        .map((dir: string) => {\n          const dirPath = path.join(currentDir, dir);\n          try {\n            const stat = statSync(dirPath);\n            \n            // 检查目录是否为空\n            let isEmpty = false;\n            let fileCount = 0;\n            try {\n              const dirContents = readdirSync(dirPath);\n              fileCount = dirContents.length;\n              isEmpty = fileCount === 0;\n            } catch (error) {\n              console.warn(ConsoleColors.warning(`检查目录 ${dir} 内容时出错: ${error}`));\n            }\n            \n            return {\n              name: dir,\n              path: dirPath,\n              time: stat.mtime,\n              age: now - stat.mtime.getTime(),\n              isEmpty: isEmpty,\n              fileCount: fileCount,\n              size: this.getDirectorySize(dirPath)\n            };\n          } catch (error) {\n            console.warn(ConsoleColors.warning(`获取目录 ${dir} 信息时出错: ${error}`));\n            return null;\n          }\n        })\n        .filter((dir): dir is NonNullable<typeof dir> => dir !== null)\n        .sort((a, b) => b.time.getTime() - a.time.getTime());\n      \n      if (tempDirs.length === 0) {\n        console.log(ConsoleColors.dim('未发现需要清理的临时目录'));\n        return;\n      }\n\n      console.log(ConsoleColors.info(`发现 ${tempDirs.length} 个临时目录`));\n      \n      // 分类需要删除的目录\n      const emptyDirs = tempDirs.filter(dir => dir.isEmpty);\n      const oldDirs = tempDirs.filter(dir => dir.age > oneDayMs && !dir.isEmpty);\n      const veryOldDirs = tempDirs.filter(dir => dir.age > oneHourMs && !dir.isEmpty); // 超过1小时的非空目录\n      const excessDirs = tempDirs.slice(3).filter(dir => !dir.isEmpty && dir.age < oneDayMs);\n      \n      // 强制清理策略：空目录立即删除，超过1小时的目录也删除（而不是24小时）\n      const dirsToDelete = [\n        ...emptyDirs, // 所有空目录\n        ...oldDirs,   // 超过24小时的目录\n        ...excessDirs, // 超出保留数量的目录\n        ...veryOldDirs.filter(dir => !oldDirs.includes(dir) && !excessDirs.includes(dir)) // 超过1小时但不在其他分类中的目录\n      ];\n      \n      // 去重\n      const uniqueDirsToDelete = Array.from(new Set(dirsToDelete));\n      \n      if (uniqueDirsToDelete.length === 0) {\n        console.log(ConsoleColors.dim('所有临时目录都在保留范围内，无需清理'));\n        return;\n      }\n\n      console.log(ConsoleColors.info(`🧹 准备清理 ${uniqueDirsToDelete.length} 个临时目录:`));\n      if (emptyDirs.length > 0) {\n        console.log(ConsoleColors.dim(`  - ${emptyDirs.length} 个空目录`));\n      }\n      if (oldDirs.length > 0) {\n        console.log(ConsoleColors.dim(`  - ${oldDirs.length} 个超过24小时的目录`));\n      }\n      if (veryOldDirs.length > 0) {\n        console.log(ConsoleColors.dim(`  - ${veryOldDirs.filter(dir => !oldDirs.includes(dir)).length} 个超过1小时的目录`));\n      }\n      if (excessDirs.length > 0) {\n        console.log(ConsoleColors.dim(`  - ${excessDirs.length} 个超出保留数量的目录`));\n      }\n      \n      let successCount = 0;\n      let failureCount = 0;\n      \n      uniqueDirsToDelete.forEach(dir => {\n        try {\n          const ageHours = Math.round(dir.age / oneHourMs * 10) / 10;\n          const sizeInfo = dir.size > 0 ? ` (${this.formatBytes(dir.size)})` : ' (空)';\n          const ageInfo = ageHours < 1 ? ' (新建)' : ` (${ageHours}h前)`;\n          \n          rmSync(dir.path, { recursive: true, force: true });\n          console.log(ConsoleColors.dim(`  ✓ 已删除: ${dir.name}${sizeInfo}${ageInfo}`));\n          successCount++;\n        } catch (error) {\n          console.warn(ConsoleColors.warning(`  ✗ 删除失败: ${dir.name} - ${error}`));\n          failureCount++;\n        }\n      });\n      \n      // 清理结果摘要\n      if (successCount > 0) {\n        console.log(ConsoleColors.success(`✓ 成功清理 ${successCount} 个临时目录`));\n      }\n      if (failureCount > 0) {\n        console.warn(ConsoleColors.warning(`⚠ ${failureCount} 个目录清理失败`));\n      }\n      \n    } catch (error) {\n      console.warn(ConsoleColors.warning(`清理临时目录时出错: ${error}`));\n    }\n  }\n  \n  /**\n   * 获取目录大小（字节）\n   */\n  private getDirectorySize(dirPath: string): number {\n    try {\n      let totalSize = 0;\n      const files = readdirSync(dirPath);\n      \n      for (const file of files) {\n        const filePath = path.join(dirPath, file);\n        const stats = statSync(filePath);\n        \n        if (stats.isDirectory()) {\n          totalSize += this.getDirectorySize(filePath);\n        } else {\n          totalSize += stats.size;\n        }\n      }\n      \n      return totalSize;\n    } catch (error) {\n      return 0;\n    }\n  }\n  \n  /**\n   * 格式化字节大小为可读格式\n   */\n  private formatBytes(bytes: number): string {\n    if (bytes === 0) return '0 B';\n    \n    const k = 1024;\n    const sizes = ['B', 'KB', 'MB', 'GB'];\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\n    \n    return parseFloat((bytes / Math.pow(k, i)).toFixed(1)) + ' ' + sizes[i];\n  }\n\n  /**\n   * 保存迁移日志到move.md文件\n   */\n  private saveMigrationLogs(): void {\n    try {\n      // 只在重要节点创建备份（如迁移完成或失败）\n      const shouldCreateBackup = Array.from(this.logs.values()).some(log => \n        log.isFinalCloned || log.failureReason\n      );\n      \n      if (shouldCreateBackup) {\n        this.createConfigBackup();\n      }\n      \n      // 确保目录存在\n      const dir = path.dirname(this.moveFilePath);\n      if (!existsSync(dir)) {\n        mkdirSync(dir, { recursive: true });\n      }\n      \n      // 检查文件是否存在，如果不存在则创建基础内容\n      let content: string;\n      if (existsSync(this.moveFilePath)) {\n        content = readFileSync(this.moveFilePath, 'utf-8');\n      } else {\n        console.log('📝 move.md 文件不存在，创建新的日志文件');\n        content = '# GitLab 仓库迁移配置\\n\\n## 日志';\n      }\n      \n      const lines = content.split('\\n');\n      \n      // 找到日志部分的开始位置\n      let logStartIndex = lines.findIndex(line => line.includes('## 日志'));\n      let beforeLogLines: string[];\n      \n      if (logStartIndex === -1) {\n        // 如果没有找到日志部分，自动添加\n        console.log('📝 未找到日志部分，自动创建日志部分');\n        beforeLogLines = [...lines, '', '## 日志'];\n      } else {\n        // 保留日志部分之前的内容\n        beforeLogLines = lines.slice(0, logStartIndex + 1);\n      }\n      \n      // 生成新的日志内容\n      const logLines: string[] = [''];\n      \n      // 严格按照 move.md 文件中的项目顺序添加日志记录，只保存配置文件中存在的项目\n      const configuredProjectNames = new Set(this.repositories.map(repo => repo.name));\n      let savedLogsCount = 0;\n      \n      for (const repo of this.repositories) {\n        const log = this.logs.get(repo.name);\n        if (log && configuredProjectNames.has(repo.name)) {\n          logLines.push(`### ${log.projectName}`);\n          logLines.push(`- **项目名称**: ${log.projectName}`);\n          logLines.push(`- **项目描述**: ${log.projectDescription}`);\n          logLines.push(`- **原仓库地址**: ${log.originalRepoUrl}`);\n          logLines.push(`- **目标分组**: ${log.targetGroup}`);\n          logLines.push(`- **目标仓库地址**: ${log.targetRepoUrl}`);\n          logLines.push(`- **开始时间**: ${log.startTime}`);\n          logLines.push(`- **结束时间**: ${log.endTime}`);\n          logLines.push(`- **耗时**: ${log.duration}`);\n          logLines.push(`- **是否已克隆原仓库镜像**: ${log.isOriginalCloned ? '✅' : '❌'}`);\n          logLines.push(`- **是否已创建目标仓库**: ${log.isTargetCreated ? '✅' : '❌'}`);\n          logLines.push(`- **是否已推送镜像到目标仓库**: ${log.isMirrorPushed ? '✅' : '❌'}`);\n          logLines.push(`- **是否已修改目标仓库的项目描述**: ${log.isDescriptionUpdated ? '✅' : '❌'}`);\n          logLines.push(`- **是否已克隆迁移后的仓库**: ${log.isFinalCloned ? '✅' : '❌'}`);\n          if (log.warnings && log.warnings.length > 0) {\n            logLines.push(`- **警告原因**: ${log.warnings.join('; ')}`);\n          }\n          if (log.failureReason) {\n            logLines.push(`- **失败原因**: ${log.failureReason}`);\n          }\n          logLines.push('');\n          savedLogsCount++;\n        }\n      }\n      \n      // 合并所有内容\n      const newContent = [...beforeLogLines, ...logLines].join('\\n');\n      \n      // 写入文件\n      writeFileSync(this.moveFilePath, newContent, 'utf-8');\n      \n      console.log(`💾 已保存 ${savedLogsCount} 个项目的迁移日志，顺序与配置文件一致`);\n      \n    } catch (error: any) {\n      console.error(`❌ 保存日志失败: ${error.message}`);\n    }\n  }\n\n  /**\n   * 记录迁移步骤\n   */\n  private recordMigrationStep(\n    projectName: string,\n    stepName: string,\n    status: TStepStatus,\n    error?: string,\n    errorType?: TErrorType,\n    warnings?: string[]\n  ): void {\n    const log = this.logs.get(projectName);\n    if (!log) return;\n\n    const existingStepIndex = log.steps.findIndex(step => step.name === stepName);\n    const now = new Date().toISOString();\n    \n    if (existingStepIndex >= 0) {\n      // 更新现有步骤\n      const step = log.steps[existingStepIndex];\n      const startTime = step.startTime || now;\n      \n      log.steps[existingStepIndex] = {\n        ...step,\n        status,\n        endTime: status === 'completed' || status === 'failed' || status === 'warning' ? now : step.endTime,\n        duration: status === 'completed' || status === 'failed' || status === 'warning' \n          ? new Date(now).getTime() - new Date(startTime).getTime() \n          : step.duration,\n        error,\n        errorType,\n        warnings: warnings || step.warnings || []\n      };\n    } else {\n      // 添加新步骤\n      log.steps.push({\n        name: stepName,\n        status,\n        startTime: status === 'in_progress' ? now : undefined,\n        endTime: status === 'completed' || status === 'failed' || status === 'warning' ? now : undefined,\n        duration: status === 'completed' || status === 'failed' || status === 'warning' ? 0 : undefined,\n        error,\n        errorType,\n        warnings: warnings || []\n      });\n    }\n\n    this.updateMigrationLog(log);\n  }\n\n  /**\n   * 添加警告信息\n   */\n  private addWarning(projectName: string, warning: string): void {\n    const log = this.logs.get(projectName);\n    if (!log) return;\n\n    if (!log.warnings.includes(warning)) {\n      log.warnings.push(warning);\n      this.updateMigrationLog(log);\n    }\n  }\n\n  /**\n   * 分类错误类型\n   */\n  private classifyError(error: string): TErrorType {\n    const errorLower = error.toLowerCase();\n    \n    // Git 操作错误 - 更详细的模式匹配\n    if (errorLower.includes('git') || \n        errorLower.includes('clone') || \n        errorLower.includes('push') || \n        errorLower.includes('pull') || \n        errorLower.includes('fetch') ||\n        errorLower.includes('remote') ||\n        errorLower.includes('repository not found') ||\n        errorLower.includes('authentication failed') ||\n        errorLower.includes('fatal: not a git repository') ||\n        errorLower.includes('fatal: repository') ||\n        errorLower.includes('error: failed to push') ||\n        errorLower.includes('error: src refspec') ||\n        errorLower.includes('error: pathspec') ||\n        errorLower.includes('fatal: could not read from remote repository') ||\n        errorLower.includes('fatal: unable to access') ||\n        errorLower.includes('ssh: connect to host') ||\n        errorLower.includes('host key verification failed') ||\n        errorLower.includes('permission denied (publickey)') ||\n        errorLower.includes('branch not found') ||\n        errorLower.includes('ref does not exist') ||\n        errorLower.includes('non-fast-forward') ||\n        errorLower.includes('merge conflict') ||\n        errorLower.includes('working tree clean')) {\n      return 'git_operation';\n    }\n    \n    // API 操作错误 - 增强 GitLab API 特定错误\n    if (errorLower.includes('api') || \n        errorLower.includes('http') || \n        errorLower.includes('401') || \n        errorLower.includes('403') || \n        errorLower.includes('404') || \n        errorLower.includes('422') || \n        errorLower.includes('500') || \n        errorLower.includes('502') || \n        errorLower.includes('503') ||\n        errorLower.includes('unauthorized') ||\n        errorLower.includes('forbidden') ||\n        errorLower.includes('bad gateway') ||\n        errorLower.includes('service unavailable') ||\n        errorLower.includes('internal server error') ||\n        errorLower.includes('gitlab api') ||\n        errorLower.includes('project already exists') ||\n        errorLower.includes('name has already been taken') ||\n        errorLower.includes('path has already been taken') ||\n        errorLower.includes('invalid token') ||\n        errorLower.includes('token expired') ||\n        errorLower.includes('insufficient scope')) {\n      return 'api_operation';\n    }\n    \n    // 网络错误 - 增强网络相关错误模式\n    if (errorLower.includes('network') || \n        errorLower.includes('timeout') || \n        errorLower.includes('connection') || \n        errorLower.includes('dns') ||\n        errorLower.includes('enotfound') ||\n        errorLower.includes('econnrefused') ||\n        errorLower.includes('econnreset') ||\n        errorLower.includes('etimedout') ||\n        errorLower.includes('socket hang up') ||\n        errorLower.includes('network is unreachable') ||\n        errorLower.includes('host is unreachable') ||\n        errorLower.includes('connection timed out') ||\n        errorLower.includes('unable to resolve host') ||\n        errorLower.includes('name resolution failed') ||\n        errorLower.includes('temporary failure in name resolution')) {\n      return 'network';\n    }\n    \n    // 文件系统错误 - 文件操作相关错误\n    if (errorLower.includes('ebusy') ||\n        errorLower.includes('resource busy or locked') ||\n        errorLower.includes('file is being used by another process') ||\n        errorLower.includes('cannot delete') ||\n        errorLower.includes('cannot remove') ||\n        errorLower.includes('directory not empty') ||\n        errorLower.includes('enoent') ||\n        errorLower.includes('no such file or directory') ||\n        errorLower.includes('eacces') ||\n        errorLower.includes('permission denied') ||\n        errorLower.includes('eperm') ||\n        errorLower.includes('operation not permitted') ||\n        errorLower.includes('emfile') ||\n        errorLower.includes('too many open files') ||\n        errorLower.includes('enospc') ||\n        errorLower.includes('no space left on device') ||\n        errorLower.includes('disk full') ||\n        errorLower.includes('cleanup failed') ||\n        errorLower.includes('failed to delete') ||\n        errorLower.includes('failed to remove')) {\n      return 'filesystem';\n    }\n    \n    // 权限错误 - 增强权限相关错误模式\n    if (errorLower.includes('permission') || \n        errorLower.includes('access') || \n        errorLower.includes('denied') ||\n        errorLower.includes('insufficient privileges') ||\n        errorLower.includes('not authorized') ||\n        errorLower.includes('access forbidden') ||\n        errorLower.includes('you are not allowed') ||\n        errorLower.includes('insufficient permissions') ||\n        errorLower.includes('operation not permitted') ||\n        errorLower.includes('access level') ||\n        errorLower.includes('maintainer access required') ||\n        errorLower.includes('owner access required')) {\n      return 'permission';\n    }\n    \n    // 验证错误 - 增强数据验证错误模式\n    if (errorLower.includes('validation') || \n        errorLower.includes('invalid') || \n        errorLower.includes('malformed') ||\n        errorLower.includes('format') ||\n        errorLower.includes('bad request') ||\n        errorLower.includes('unprocessable entity') ||\n        errorLower.includes('missing required') ||\n        errorLower.includes('field is required') ||\n        errorLower.includes('must be') ||\n        errorLower.includes('cannot be blank') ||\n        errorLower.includes('is too long') ||\n        errorLower.includes('is too short') ||\n        errorLower.includes('contains invalid characters') ||\n        errorLower.includes('url is invalid') ||\n        errorLower.includes('email is invalid')) {\n      return 'validation';\n    }\n    \n    return 'unknown';\n  }\n\n  /**\n   * 获取可读的错误信息\n   */\n  private getReadableErrorMessage(error: string, errorType: TErrorType): string {\n    const baseMessage = error.length > 200 ? error.substring(0, 200) + '...' : error;\n    const errorLower = baseMessage.toLowerCase();\n    \n    switch (errorType) {\n      case 'git_operation':\n        if (errorLower.includes('clone')) {\n          return `Git 克隆失败: ${baseMessage}。请检查源仓库地址是否正确，网络连接是否正常。`;\n        } else if (errorLower.includes('push')) {\n          return `Git 推送失败: ${baseMessage}。请检查目标仓库权限和网络连接。`;\n        } else if (errorLower.includes('fetch')) {\n          return `Git 获取失败: ${baseMessage}。请检查仓库地址和网络连接。`;\n        } else if (errorLower.includes('authentication failed')) {\n          return `Git 认证失败: ${baseMessage}。请检查 Access Token 是否有效。`;\n        } else {\n          return `Git 操作失败: ${baseMessage}`;\n        }\n        \n      case 'api_operation':\n        if (errorLower.includes('401')) {\n          return `API 认证失败: ${baseMessage}。请检查 Access Token 是否有效且具有足够权限。`;\n        } else if (errorLower.includes('403')) {\n          return `API 权限不足: ${baseMessage}。请确保 Access Token 具有创建仓库和管理项目的权限。`;\n        } else if (errorLower.includes('404')) {\n          return `API 资源未找到: ${baseMessage}。请检查目标分组路径是否正确。`;\n        } else if (errorLower.includes('409')) {\n          return `API 资源冲突: ${baseMessage}。目标仓库可能已存在，请检查仓库名称。`;\n        } else if (errorLower.includes('422')) {\n          return `API 参数验证失败: ${baseMessage}。请检查仓库名称和描述是否符合要求。`;\n        } else if (errorLower.includes('500')) {\n          return `API 服务器错误: ${baseMessage}。GitLab 服务器可能暂时不可用，请稍后重试。`;\n        } else {\n          return `API 调用失败: ${baseMessage}`;\n        }\n        \n      case 'network':\n        if (errorLower.includes('timeout')) {\n          return `网络超时: ${baseMessage}。请检查网络连接或稍后重试。`;\n        } else if (errorLower.includes('enotfound') || errorLower.includes('getaddrinfo')) {\n          return `DNS 解析失败: ${baseMessage}。请检查网络连接和 GitLab 服务器地址。`;\n        } else if (errorLower.includes('econnrefused')) {\n          return `连接被拒绝: ${baseMessage}。请检查 GitLab 服务器是否可访问。`;\n        } else {\n          return `网络连接失败: ${baseMessage}。请检查网络连接状态。`;\n        }\n        \n      case 'permission':\n        if (errorLower.includes('access denied')) {\n          return `访问被拒绝: ${baseMessage}。请检查 Access Token 权限或联系管理员。`;\n        } else if (errorLower.includes('insufficient privileges')) {\n          return `权限不足: ${baseMessage}。请确保具有目标分组的创建仓库权限。`;\n        } else {\n          return `权限不足: ${baseMessage}。请检查相关权限设置。`;\n        }\n        \n      case 'validation':\n        if (errorLower.includes('invalid repository name')) {\n          return `仓库名称无效: ${baseMessage}。请使用有效的仓库名称格式。`;\n        } else if (errorLower.includes('invalid group path')) {\n          return `分组路径无效: ${baseMessage}。请检查目标分组路径格式。`;\n        } else {\n          return `数据验证失败: ${baseMessage}。请检查输入参数的格式和有效性。`;\n        }\n        \n      case 'filesystem':\n        if (errorLower.includes('ebusy') || errorLower.includes('resource busy or locked')) {\n          return `文件系统忙碌: ${baseMessage}。文件正被其他进程使用，这通常不影响迁移结果。`;\n        } else if (errorLower.includes('cannot delete') || errorLower.includes('cannot remove')) {\n          return `文件删除失败: ${baseMessage}。临时文件清理失败，但不影响迁移结果。`;\n        } else if (errorLower.includes('enoent') || errorLower.includes('no such file or directory')) {\n          return `文件不存在: ${baseMessage}。目标文件可能已被删除，这通常不影响迁移结果。`;\n        } else if (errorLower.includes('enospc') || errorLower.includes('no space left on device')) {\n          return `磁盘空间不足: ${baseMessage}。请清理磁盘空间后重试。`;\n        } else {\n          return `文件系统错误: ${baseMessage}。这通常不影响迁移结果，可以忽略。`;\n        }\n        \n      default:\n          return `未知错误: ${baseMessage}。如果问题持续存在，请联系技术支持。`;\n    }\n  }\n\n  /**\n   * 预检查机制：验证迁移前的各项条件\n   */\n  private async performPreChecks(): Promise<{ success: boolean; errors: string[] }> {\n    const errors: string[] = [];\n    \n    console.log('🔍 开始执行预检查...');\n    \n    try {\n      // 1. 检查网络连通性\n      console.log('1. 检查网络连通性...');\n      const networkCheck = await this.checkNetworkConnectivity();\n      if (!networkCheck.success) {\n        errors.push(`网络连通性检查失败: ${networkCheck.error}`);\n      } else {\n        console.log('✓ 网络连通性正常');\n      }\n      \n      // 2. 验证 GitLab API 权限\n      console.log('2. 验证 GitLab API 权限...');\n      const apiCheck = await this.checkGitLabApiPermissions();\n      if (!apiCheck.success) {\n        errors.push(`GitLab API 权限验证失败: ${apiCheck.error}`);\n      } else {\n        console.log('✓ GitLab API 权限验证通过');\n      }\n      \n      // 3. 验证目标分组访问权限\n      console.log('3. 验证目标分组访问权限...');\n      const groupCheck = await this.checkTargetGroupPermissions();\n      if (!groupCheck.success) {\n        errors.push(`目标分组权限验证失败: ${groupCheck.error}`);\n      } else {\n        console.log('✓ 目标分组权限验证通过');\n      }\n      \n      // 4. 检查本地 Git 环境\n      console.log('4. 检查本地 Git 环境...');\n      const gitCheck = await this.checkLocalGitEnvironment();\n      if (!gitCheck.success) {\n        errors.push(`本地 Git 环境检查失败: ${gitCheck.error}`);\n      } else {\n        console.log('✓ 本地 Git 环境正常');\n      }\n      \n      const success = errors.length === 0;\n      if (success) {\n        console.log('✅ 所有预检查项目通过，可以开始迁移');\n      } else {\n        console.log('❌ 预检查发现问题，请解决后重试');\n        errors.forEach(error => console.log(`  - ${error}`));\n      }\n      \n      return { success, errors };\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      errors.push(`预检查过程中发生异常: ${errorMsg}`);\n      return { success: false, errors };\n    }\n  }\n\n  /**\n   * 检查网络连通性\n   */\n  private async checkNetworkConnectivity(): Promise<{ success: boolean; error?: string }> {\n    try {\n      // 检查目标 GitLab 服务器连通性\n      const gitlabHost = new URL(this.targetGroupUrl).hostname;\n      const response = await fetch(`https://${gitlabHost}/api/v4/version`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`\n        },\n        signal: AbortSignal.timeout(10000) // 10秒超时\n      });\n      \n      if (!response.ok) {\n        return { success: false, error: `无法连接到 GitLab 服务器 (${response.status})` };\n      }\n      \n      return { success: true };\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      return { success: false, error: `网络连接失败: ${errorMsg}` };\n    }\n  }\n\n  /**\n   * 检查 GitLab API 权限\n   */\n  private async checkGitLabApiPermissions(): Promise<{ success: boolean; error?: string }> {\n    try {\n      const apiUrl = `${this.getGitLabApiBase()}/user`;\n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      if (!response.ok) {\n        if (response.status === 401) {\n          return { success: false, error: 'Access Token 无效或已过期' };\n        } else if (response.status === 403) {\n          return { success: false, error: 'Access Token 权限不足' };\n        } else {\n          return { success: false, error: `API 调用失败 (${response.status})` };\n        }\n      }\n      \n      const userInfo = await response.json();\n      console.log(`  当前用户: ${userInfo.name} (${userInfo.username})`);\n      \n      return { success: true };\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      return { success: false, error: `API 权限验证失败: ${errorMsg}` };\n    }\n  }\n\n  /**\n   * 检查目标分组权限\n   */\n  private async checkTargetGroupPermissions(): Promise<{ success: boolean; error?: string }> {\n    try {\n      const groupId = await this.getGroupId(this.targetGroupUrl);\n      const apiUrl = `${this.getGitLabApiBase()}/groups/${groupId}`;\n      \n      const response = await fetch(apiUrl, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${this.accessToken}`,\n          'Content-Type': 'application/json'\n        },\n        signal: AbortSignal.timeout(10000)\n      });\n      \n      if (!response.ok) {\n        if (response.status === 404) {\n          return { success: false, error: '目标分组不存在或无访问权限' };\n        } else if (response.status === 403) {\n          return { success: false, error: '对目标分组没有足够的权限' };\n        } else {\n          return { success: false, error: `分组权限检查失败 (${response.status})` };\n        }\n      }\n      \n      const groupInfo = await response.json();\n      console.log(`  目标分组: ${groupInfo.name} (${groupInfo.full_path})`);\n      \n      // 检查是否有创建项目的权限\n      if (groupInfo.permissions && groupInfo.permissions.group_access) {\n        const accessLevel = groupInfo.permissions.group_access.access_level;\n        if (accessLevel < 30) { // 30 = Developer, 40 = Maintainer, 50 = Owner\n          return { success: false, error: '在目标分组中没有创建项目的权限（需要 Developer 及以上权限）' };\n        }\n      }\n      \n      return { success: true };\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      return { success: false, error: `分组权限验证失败: ${errorMsg}` };\n    }\n  }\n\n  /**\n   * 检查本地 Git 环境\n   */\n  private async checkLocalGitEnvironment(): Promise<{ success: boolean; error?: string }> {\n    try {\n      // 检查 Git 是否安装\n      try {\n        this.executeCommand('git --version');\n      } catch (error) {\n        return { success: false, error: 'Git 未安装或不在 PATH 环境变量中' };\n      }\n      \n      // 检查 Git 配置\n      try {\n        const userName = this.executeCommand('git config --global user.name').trim();\n        const userEmail = this.executeCommand('git config --global user.email').trim();\n        \n        if (!userName || !userEmail) {\n          return { \n            success: false, \n            error: 'Git 用户信息未配置，请运行: git config --global user.name \"Your Name\" 和 git config --global user.email \"your.email@example.com\"' \n          };\n        }\n        \n        console.log(`  Git 用户: ${userName} <${userEmail}>`);\n      } catch (error) {\n        return { success: false, error: 'Git 配置检查失败' };\n      }\n      \n      // 检查临时目录权限\n      try {\n        if (!existsSync(this.tempDir)) {\n          mkdirSync(this.tempDir, { recursive: true });\n        }\n        \n        // 测试写入权限\n        const testFile = path.join(this.tempDir, 'test-write-permission.tmp');\n        writeFileSync(testFile, 'test');\n        rmSync(testFile);\n      } catch (error) {\n        return { success: false, error: `临时目录权限不足: ${this.tempDir}` };\n      }\n      \n      return { success: true };\n    } catch (error) {\n      const errorMsg = error instanceof Error ? error.message : String(error);\n      return { success: false, error: `Git 环境检查失败: ${errorMsg}` };\n    }\n  }\n\n  /**\n   * 智能重试机制：根据错误类型决定是否重试\n   */\n  private shouldRetry(errorType: TErrorType, retryCount: number): boolean {\n    const maxRetries = this.getMaxRetries(errorType);\n    return retryCount < maxRetries;\n  }\n\n  /**\n   * 获取不同错误类型的最大重试次数\n   */\n  private getMaxRetries(errorType: TErrorType): number {\n    const maxRetries = {\n      'network': 3,\n      'api_operation': 2,\n      'git_operation': 1,\n      'permission': 0,\n      'validation': 0,\n      'filesystem': 0,  // 文件系统错误通常不需要重试，直接降级为警告\n      'unknown': 1\n    };\n    \n    return maxRetries[errorType];\n  }\n\n  /**\n   * 获取重试延迟时间（毫秒）\n   */\n  private getRetryDelay(retryCount: number): number {\n    // 指数退避：1秒、2秒、4秒\n    return Math.min(1000 * Math.pow(2, retryCount), 8000);\n  }\n\n  /**\n   * 恢复迁移状态：分析日志并确定下一步操作\n   */\n  private analyzeMigrationState(log: TMigrationLog): {\n    nextStep: string;\n    canResume: boolean;\n    needsCleanup: boolean;\n    recommendations: string[];\n  } {\n    const recommendations: string[] = [];\n    let nextStep = '开始迁移';\n    let canResume = true;\n    let needsCleanup = false;\n    \n    // 分析完成状态\n    if (log.isFinalCloned && !log.failureReason) {\n      return {\n        nextStep: '已完成',\n        canResume: false,\n        needsCleanup: false,\n        recommendations: ['迁移已完成，无需操作']\n      };\n    }\n    \n    // 分析失败状态和重试建议\n    if (log.failureReason) {\n      const errorType = log.errorType || 'unknown';\n      \n      if (this.shouldRetry(errorType, log.retryCount || 0)) {\n        recommendations.push(`可以重试，当前重试次数: ${log.retryCount || 0}`);\n        \n        switch (errorType) {\n          case 'network':\n            recommendations.push('网络错误，建议检查网络连接后重试');\n            break;\n          case 'api_operation':\n            recommendations.push('API 错误，建议检查 Access Token 权限');\n            break;\n          case 'git_operation':\n            recommendations.push('Git 操作错误，建议检查仓库地址和权限');\n            needsCleanup = true;\n            break;\n        }\n      } else {\n        recommendations.push('已达到最大重试次数，建议手动检查问题');\n        canResume = false;\n      }\n    }\n    \n    // 确定下一步操作\n    if (!log.isOriginalCloned) {\n      nextStep = '克隆原仓库镜像';\n    } else if (!log.isTargetCreated) {\n      nextStep = '创建目标仓库';\n    } else if (!log.isMirrorPushed) {\n      nextStep = '推送镜像到目标仓库';\n    } else if (!log.isDescriptionUpdated) {\n      nextStep = '更新仓库描述';\n    } else if (!log.isFinalCloned) {\n      nextStep = '克隆迁移后的仓库';\n    }\n    \n    return { nextStep, canResume, needsCleanup, recommendations };\n  }\n\n  /**\n   * 显示断点续传状态报告\n   */\n  private showResumeReport(): void {\n    const resumableProjects = Array.from(this.logs.values()).filter(log => \n      !log.isFinalCloned || log.failureReason\n    );\n    \n    if (resumableProjects.length === 0) {\n      console.log(ConsoleColors.success('✅ 没有需要断点续传的项目，所有项目状态正常'));\n      return;\n    }\n    \n    console.log('\\n' + ConsoleColors.info('📋 断点续传状态报告:'));\n    console.log(ConsoleColors.separator(80));\n    \n    for (const log of resumableProjects) {\n      const analysis = this.analyzeMigrationState(log);\n      \n      console.log(`\\n📦 项目: ${ConsoleColors.highlight(log.projectName)}`);\n      console.log(`   状态: ${analysis.canResume ? ConsoleColors.warning('可继续') : ConsoleColors.error('需要手动处理')}`);\n      console.log(`   下一步: ${ConsoleColors.info(analysis.nextStep)}`);\n      \n      if (log.retryCount && log.retryCount > 0) {\n        console.log(`   重试次数: ${ConsoleColors.dim(log.retryCount.toString())}`);\n      }\n      \n      if (log.failureReason) {\n        console.log(`   失败原因: ${ConsoleColors.error(log.failureReason)}`);\n      }\n      \n      if (analysis.recommendations.length > 0) {\n        console.log(`   建议:`);\n        analysis.recommendations.forEach(rec => {\n          console.log(`     - ${ConsoleColors.dim(rec)}`);\n        });\n      }\n    }\n    \n    console.log(ConsoleColors.separator(80));\n  }\n\n  /**\n   * 迁移单个仓库\n   */\n  private async migrateSingleRepository(repo: TRepository): Promise<void> {\n    console.log('\\n' + ConsoleColors.separator(60));\n    console.log(ConsoleColors.progress(`开始迁移仓库: ${ConsoleColors.highlight(repo.name)}`));\n    console.log(ConsoleColors.description(`项目描述: ${repo.description}`));\n    console.log(ConsoleColors.url(`原仓库地址: ${repo.originalUrl}`));\n    console.log(ConsoleColors.separator(60));\n    \n    // 检查是否已有日志记录\n    let log = this.logs.get(repo.name);\n    \n    if (log) {\n      console.log(ConsoleColors.info('发现现有日志记录，检查迁移状态...'));\n      \n      // 如果已经完全迁移成功，跳过\n      if (log.isFinalCloned && !log.failureReason) {\n        console.log(ConsoleColors.success(`仓库 ${ConsoleColors.highlight(repo.name)} 已完成迁移，跳过`));\n        return;\n      }\n      \n      console.log(ConsoleColors.info('继续未完成的迁移步骤...'));\n    } else {\n      // 创建新的日志记录\n      const startTime = new Date();\n      log = {\n        projectName: repo.name,\n        projectDescription: repo.description,\n        originalRepoUrl: repo.originalUrl,\n        targetGroup: this.targetGroupUrl,\n        targetRepoUrl: '',\n        startTime: startTime.toISOString(),\n        endTime: '',\n        duration: '',\n        isOriginalCloned: false,\n        isTargetCreated: false,\n        isMirrorPushed: false,\n        isDescriptionUpdated: false,\n        isFinalCloned: false,\n        failureReason: '',\n        steps: [],\n        warnings: [],\n        retryCount: 0,\n        lastUpdated: new Date().toISOString()\n      };\n    }\n    \n    const migrationStartTime = log.startTime ? new Date(log.startTime) : new Date();\n    if (!log.startTime) {\n      log.startTime = migrationStartTime.toISOString();\n    }\n\n    try {\n      // 清理失败状态，准备重新开始\n      if (log.failureReason && !log.isFinalCloned) {\n        log.failureReason = '';\n      }\n\n      // 1. 检查目标分组中是否已存在同名仓库\n      let repositoryInfo: { exists: boolean; isEmpty?: boolean; targetUrl?: string } | null = null;\n      if (!log.isTargetCreated) {\n        // 检查是否已有完成的检查步骤\n        const existingCheckStep = log.steps.find(step => step.name === '检查目标仓库');\n        if (existingCheckStep && existingCheckStep.status === 'completed') {\n          console.log(ConsoleColors.success('目标仓库检查已完成，跳过'));\n        } else {\n          this.recordMigrationStep(repo.name, '检查目标仓库', 'in_progress');\n          try {\n            repositoryInfo = await this.checkRepositoryExists(repo.name);\n            if (repositoryInfo.exists && !repositoryInfo.isEmpty) {\n              log.failureReason = '目标分组中已存在同名仓库';\n              this.recordMigrationStep(repo.name, '检查目标仓库', 'failed', log.failureReason, 'validation');\n              console.log(ConsoleColors.error(`迁移失败: ${log.failureReason}`));\n              this.updateMigrationLog(log);\n              return;\n            }\n            this.recordMigrationStep(repo.name, '检查目标仓库', 'completed');\n          } catch (error: any) {\n            const errorMsg = error.message;\n            const errorType = this.classifyError(errorMsg);\n            this.recordMigrationStep(repo.name, '检查目标仓库', 'failed', errorMsg, errorType);\n            throw error;\n          }\n        }\n      } else {\n        // 只有在没有已完成的检查步骤时才记录为跳过\n        const existingCheckStep = log.steps.find(step => step.name === '检查目标仓库');\n        if (!existingCheckStep || existingCheckStep.status !== 'completed') {\n          this.recordMigrationStep(repo.name, '检查目标仓库', 'skipped');\n        } else {\n          console.log(ConsoleColors.success('目标仓库检查已完成，跳过'));\n        }\n      }\n\n      // 2. 克隆原仓库镜像\n      // 始终使用从URL提取的实际仓库名作为目录名\n      const actualRepoName = this.extractRepoNameFromUrl(repo.originalUrl);\n      let cloneDir = `${actualRepoName}.git`;\n      if (!log.isOriginalCloned) {\n        console.log(ConsoleColors.step(1, '克隆原仓库镜像'));\n        this.recordMigrationStep(repo.name, '克隆原仓库镜像', 'in_progress');\n        try {\n          cloneDir = this.cloneOriginalRepository(repo);\n          log.isOriginalCloned = true;\n          this.recordMigrationStep(repo.name, '克隆原仓库镜像', 'completed');\n          this.updateMigrationLog(log);\n        } catch (error: any) {\n          const errorMsg = error.message;\n          const errorType = this.classifyError(errorMsg);\n          this.recordMigrationStep(repo.name, '克隆原仓库镜像', 'failed', errorMsg, errorType);\n          throw error;\n        }\n      } else {\n        console.log(ConsoleColors.success(`原仓库镜像已克隆，跳过: ${ConsoleColors.dim(cloneDir)}`));\n        // 检查是否已有完成状态的步骤记录，如果有则不覆盖\n        const existingStep = log.steps.find(step => step.name === '克隆原仓库镜像');\n        if (!existingStep || existingStep.status !== 'completed') {\n          this.recordMigrationStep(repo.name, '克隆原仓库镜像', 'skipped');\n        }\n      }\n\n      // 3. 创建目标仓库或使用现有空仓库\n      if (!log.isTargetCreated) {\n        if (repositoryInfo && repositoryInfo.exists && repositoryInfo.isEmpty && repositoryInfo.targetUrl) {\n          // 使用现有的空仓库\n          console.log(ConsoleColors.step(2, '使用现有空仓库'));\n          this.recordMigrationStep(repo.name, '创建目标仓库', 'in_progress');\n          log.targetRepoUrl = repositoryInfo.targetUrl;\n          log.isTargetCreated = true;\n          this.recordMigrationStep(repo.name, '创建目标仓库', 'completed');\n          this.updateMigrationLog(log);\n        } else {\n          // 创建新仓库\n          console.log(ConsoleColors.step(2, '创建目标仓库'));\n          this.recordMigrationStep(repo.name, '创建目标仓库', 'in_progress');\n          try {\n            const targetUrl = await this.createTargetRepository(repo);\n            log.targetRepoUrl = targetUrl;\n            log.isTargetCreated = true;\n            this.recordMigrationStep(repo.name, '创建目标仓库', 'completed');\n            this.updateMigrationLog(log);\n          } catch (error: any) {\n            const errorMsg = error.message;\n            const errorType = this.classifyError(errorMsg);\n            this.recordMigrationStep(repo.name, '创建目标仓库', 'failed', errorMsg, errorType);\n            throw error;\n          }\n        }\n      } else {\n        console.log(ConsoleColors.success(`目标仓库已创建，跳过: ${ConsoleColors.dim(log.targetRepoUrl)}`));\n        // 检查是否已有完成状态的步骤记录，如果有则不覆盖\n        const existingStep = log.steps.find(step => step.name === '创建目标仓库');\n        if (!existingStep || existingStep.status !== 'completed') {\n          this.recordMigrationStep(repo.name, '创建目标仓库', 'skipped');\n        }\n      }\n\n      // 4. 设置目标仓库的项目描述\n      if (!log.isDescriptionUpdated) {\n        console.log(ConsoleColors.step(3, '设置仓库描述'));\n        this.recordMigrationStep(repo.name, '设置仓库描述', 'in_progress');\n        try {\n          await this.updateRepositoryDescription(repo.name, repo.description);\n          log.isDescriptionUpdated = true;\n          this.recordMigrationStep(repo.name, '设置仓库描述', 'completed');\n          this.updateMigrationLog(log);\n        } catch (error: any) {\n          const errorMsg = error.message;\n          const errorType = this.classifyError(errorMsg);\n          this.recordMigrationStep(repo.name, '设置仓库描述', 'failed', errorMsg, errorType);\n          throw error;\n        }\n      } else {\n        console.log(ConsoleColors.success('仓库描述已更新，跳过'));\n        // 检查是否已有完成状态的步骤记录，如果有则不覆盖\n        const existingStep = log.steps.find(step => step.name === '设置仓库描述');\n        if (!existingStep || existingStep.status !== 'completed') {\n          this.recordMigrationStep(repo.name, '设置仓库描述', 'skipped');\n        }\n      }\n\n      // 5. 推送镜像到目标仓库\n      if (!log.isMirrorPushed) {\n        console.log(ConsoleColors.step(4, '推送镜像到目标仓库'));\n        this.recordMigrationStep(repo.name, '推送镜像到目标仓库', 'in_progress');\n        try {\n          const pushResult = this.pushMirrorToTarget(cloneDir, log.targetRepoUrl);\n          log.isMirrorPushed = true;\n          \n          if (pushResult.hasWarnings) {\n            this.recordMigrationStep(repo.name, '推送镜像到目标仓库', 'warning', undefined, undefined, pushResult.warnings);\n            pushResult.warnings?.forEach(warning => this.addWarning(repo.name, warning));\n          } else {\n            this.recordMigrationStep(repo.name, '推送镜像到目标仓库', 'completed');\n          }\n          \n          this.updateMigrationLog(log);\n        } catch (error: any) {\n          const errorMsg = error.message;\n          const errorType = this.classifyError(errorMsg);\n          \n          // 检查是否为隐藏引用相关的错误，如果是则降级为警告而不是失败\n          if (errorMsg.includes('deny updating a hidden ref') || \n              errorMsg.includes('refs/keep-around') ||\n              errorMsg.includes('refs/merge-requests') ||\n              errorMsg.includes('refs/pipelines') ||\n              errorMsg.includes('refs/environments') ||\n              errorMsg.includes('refs/heads/') ||\n              errorMsg.includes('refs/tags/') ||\n              errorMsg.includes('hidden ref') ||\n              errorMsg.includes('refusing to update checked out branch') ||\n              errorMsg.includes('remote rejected') ||\n              errorMsg.includes('pre-receive hook declined') ||\n              errorMsg.includes('! [remote rejected]') ||\n              errorMsg.includes('hook declined') ||\n              errorMsg.includes('protected branch') ||\n              errorMsg.includes('To ') ||\n              errorMsg.includes('Everything up-to-date') ||\n              errorMsg.includes('non-fast-forward') ||\n              errorMsg.includes('failed to push some refs') ||\n              errorMsg.includes('updates were rejected') ||\n              errorMsg.includes('fetch first') ||\n              errorMsg.includes('hint: Updates were rejected') ||\n              errorMsg.includes('error: failed to push')){\n            console.log(ConsoleColors.warning(`⚠️  推送过程中遇到隐藏引用相关警告，但不影响迁移结果`));\n            log.isMirrorPushed = true; // 标记为已推送\n            this.recordMigrationStep(repo.name, '推送镜像到目标仓库', 'warning', undefined, undefined, [`推送过程中遇到隐藏引用相关警告: ${errorMsg}`]);\n            this.addWarning(repo.name, `推送过程中遇到隐藏引用相关警告: ${errorMsg}`);\n            this.updateMigrationLog(log);\n          } else {\n            this.recordMigrationStep(repo.name, '推送镜像到目标仓库', 'failed', errorMsg, errorType);\n            throw error;\n          }\n        }\n      } else {\n        console.log(ConsoleColors.success('镜像已推送，跳过'));\n        // 检查是否已有完成状态的步骤记录，如果有则不覆盖\n        const existingStep = log.steps.find(step => step.name === '推送镜像到目标仓库');\n        if (!existingStep || (existingStep.status !== 'completed' && existingStep.status !== 'warning')) {\n          this.recordMigrationStep(repo.name, '推送镜像到目标仓库', 'skipped');\n        }\n      }\n\n      // 6. 克隆迁移后的仓库到本地\n      if (this.skipFinalClone) {\n        console.log(ConsoleColors.warning('已禁用克隆迁移后的仓库，跳过'));\n        this.recordMigrationStep(repo.name, '克隆迁移后的仓库', 'skipped');\n        log.isFinalCloned = true; // 标记为已完成以避免重试\n      } else if (!log.isFinalCloned) {\n        console.log(ConsoleColors.step(5, '克隆迁移后的仓库到本地'));\n        this.recordMigrationStep(repo.name, '克隆迁移后的仓库', 'in_progress');\n        try {\n          this.cloneFinalRepository(log.targetRepoUrl, repo.name);\n          log.isFinalCloned = true;\n          this.recordMigrationStep(repo.name, '克隆迁移后的仓库', 'completed');\n        } catch (error: any) {\n          const errorMsg = error.message;\n          const errorType = this.classifyError(errorMsg);\n          \n          // 检查是否为隐藏引用相关错误，如果是则降级为警告\n          if (errorMsg.includes('deny updating a hidden ref') || \n              errorMsg.includes('refs/keep-around') ||\n              errorMsg.includes('hidden ref')) {\n            console.log(ConsoleColors.warning(`克隆过程中遇到隐藏引用警告: ${errorMsg}`));\n            this.addWarning(repo.name, `克隆时遇到隐藏引用警告: ${errorMsg}`);\n            this.recordMigrationStep(repo.name, '克隆迁移后的仓库', 'warning', undefined, undefined, [errorMsg]);\n            log.isFinalCloned = true; // 标记为已完成，因为这只是警告\n          } else {\n            this.recordMigrationStep(repo.name, '克隆迁移后的仓库', 'failed', errorMsg, errorType);\n            throw error;\n          }\n        }\n      } else {\n        console.log(ConsoleColors.success('迁移后仓库已克隆，跳过'));\n        // 检查是否已有完成状态的步骤记录，如果有则不覆盖\n        const existingStep = log.steps.find(step => step.name === '克隆迁移后的仓库');\n        if (!existingStep || existingStep.status !== 'completed') {\n          this.recordMigrationStep(repo.name, '克隆迁移后的仓库', 'skipped');\n        }\n      }\n\n      // 7. 清理镜像目录\n      if (existsSync(cloneDir)) {\n        rmSync(cloneDir, { recursive: true, force: true });\n        console.log(ConsoleColors.dim(`🗑️  已清理镜像目录: ${path.basename(cloneDir)}`));\n      }\n\n      const endTime = new Date();\n      log.endTime = endTime.toISOString();\n      log.duration = `${Math.round((endTime.getTime() - migrationStartTime.getTime()) / 1000)}秒`;\n      \n      this.updateMigrationLog(log);\n      console.log('\\n' + ConsoleColors.success(`仓库迁移完成: ${ConsoleColors.highlight(repo.name)} ${ConsoleColors.duration(`(耗时: ${log.duration})`)}`) + '\\n');\n      \n      if (log.warnings && log.warnings.length > 0) {\n        console.log(ConsoleColors.warning(`⚠️ 警告信息: ${log.warnings.length} 条`));\n      }\n      \n    } catch (error: any) {\n      const endTime = new Date();\n      const errorMsg = error.message;\n      const errorType = this.classifyError(errorMsg);\n      \n      log.errorType = errorType;\n      log.retryCount = (log.retryCount || 0) + 1;\n      const readableError = this.getReadableErrorMessage(errorMsg, errorType);\n      \n      // 检查是否可以重试\n      if (this.shouldRetry(errorType, log.retryCount)) {\n        const retryDelay = this.getRetryDelay(log.retryCount - 1);\n        const maxRetries = this.getMaxRetries(errorType);\n        \n        console.log('\\n' + ConsoleColors.warning(`⚠️ 迁移遇到错误，准备重试...`));\n        console.log(ConsoleColors.error(`错误: ${readableError}`));\n        console.log(ConsoleColors.dim(`错误类型: ${errorType}`));\n        console.log(ConsoleColors.info(`重试进度: ${log.retryCount}/${maxRetries}`));\n        console.log(ConsoleColors.info(`等待 ${retryDelay / 1000} 秒后重试...`));\n        \n        this.recordMigrationStep(repo.name, `准备重试 (${log.retryCount}/${maxRetries})`, 'in_progress', `等待 ${retryDelay / 1000} 秒`);\n        this.updateMigrationLog(log);\n        \n        // 清理可能的镜像目录（在临时目录中查找）\n        try {\n          if (existsSync(this.tempDir)) {\n            const files = readdirSync(this.tempDir);\n            const actualRepoName = this.extractRepoNameFromUrl(repo.originalUrl);\n            const mirrorDirs = files.filter(file => \n              file.startsWith(actualRepoName) && file.endsWith('.git')\n            );\n            \n            mirrorDirs.forEach(dir => {\n              const dirPath = path.join(this.tempDir, dir);\n              if (existsSync(dirPath)) {\n                rmSync(dirPath, { recursive: true, force: true });\n                console.log(ConsoleColors.dim(`🗑️  已清理镜像目录: ${dir}`));\n              }\n            });\n          }\n        } catch (error) {\n          console.log(ConsoleColors.warning('⚠️  清理镜像目录时出现问题'));\n        }\n        \n        // 等待重试延迟\n        await new Promise(resolve => setTimeout(resolve, retryDelay));\n        \n        // 清理失败状态，准备重试\n        log.failureReason = '';\n        \n        // 递归重试\n        console.log(ConsoleColors.info(`🔄 开始第 ${log.retryCount} 次重试: ${ConsoleColors.highlight(repo.name)}`));\n        return await this.migrateSingleRepository(repo);\n      } else {\n        // 达到最大重试次数，记录最终失败\n        log.endTime = endTime.toISOString();\n        log.duration = `${Math.round((endTime.getTime() - migrationStartTime.getTime()) / 1000)}秒`;\n        log.failureReason = readableError;\n        \n        this.recordMigrationStep(repo.name, '迁移最终失败', 'failed', log.failureReason, errorType);\n        this.updateMigrationLog(log);\n        \n        console.log('\\n' + ConsoleColors.error(`❌ 仓库迁移最终失败: ${ConsoleColors.highlight(repo.name)}`));\n        console.log(ConsoleColors.error(`失败原因: ${log.failureReason}`));\n        console.log(ConsoleColors.error(`错误类型: ${errorType}`));\n        console.log(ConsoleColors.error(`总重试次数: ${log.retryCount}`));\n        \n        // 提供恢复建议\n        const analysis = this.analyzeMigrationState(log);\n        if (analysis.recommendations.length > 0) {\n          console.log(ConsoleColors.info('💡 建议:'));\n          analysis.recommendations.forEach(rec => {\n            console.log(ConsoleColors.dim(`   - ${rec}`));\n          });\n        }\n        \n        // 清理可能的临时文件\n        const actualRepoName = this.extractRepoNameFromUrl(repo.originalUrl);\n        const cloneDir = `${actualRepoName}.git`;\n        if (existsSync(cloneDir)) {\n          rmSync(cloneDir, { recursive: true, force: true });\n        }\n      }\n    }\n  }\n\n  /**\n   * 执行迁移任务\n   */\n  public async migrate(): Promise<void> {\n    try {\n      console.log('\\n' + ConsoleColors.box('GitLab 项目迁移工具'));\n      console.log('');\n      \n      // 解析move.md文件\n      this.parseMoveFile();\n      \n      // 验证 Access Token\n      if (!this.accessToken || this.accessToken === 'your_access_token' || this.accessToken === 'your_gitlab_access_token') {\n        console.log(ConsoleColors.warning('未找到有效的 GitLab Access Token'));\n        console.log(ConsoleColors.info('Access Token 获取优先级:'));\n        console.log(ConsoleColors.dim('   1. 命令行参数 (最高优先级)'));\n        console.log(ConsoleColors.dim('   2. move.md 文件中的 \"## 迁移目标 Access Token\" 部分'));\n        console.log(ConsoleColors.dim('   3. 环境变量: GITLAB_ACCESS_TOKEN'));\n        console.log(ConsoleColors.dim('   4. 交互式输入 (当前)'));\n        console.log('');\n        \n        // 交互式输入 Access Token\n        this.accessToken = await promptForAccessToken();\n        \n        if (!this.accessToken || this.accessToken.trim() === '') {\n          console.error(ConsoleColors.error('Access Token 不能为空'));\n          throw new Error('Access Token 不能为空');\n        }\n      }\n      \n      // 显示断点续传状态报告\n      this.showResumeReport();\n      \n      // 执行预检查\n      const preCheckResult = await this.performPreChecks();\n      if (!preCheckResult.success) {\n        console.error('\\n' + ConsoleColors.error('❌ 预检查失败，无法开始迁移:'));\n        preCheckResult.errors.forEach(error => console.error(ConsoleColors.error(`  - ${error}`)));\n        \n        // 预检查失败时进行清理\n        console.log(ConsoleColors.warning('\\n🧹 预检查失败，正在清理可能的临时文件...'));\n        cleanupOnExit(this);\n        \n        // 给清理函数一些时间来完成输出\n        await new Promise(resolve => setTimeout(resolve, 100));\n        \n        throw new Error('预检查失败，请解决上述问题后重试');\n      }\n      \n      // 过滤指定的项目\n      let repositoriesToMigrate = this.repositories;\n      if (this.selectedProjects.length > 0) {\n        repositoriesToMigrate = this.repositories.filter(repo => \n          this.selectedProjects.includes(repo.name)\n        );\n        \n        console.log(ConsoleColors.info(`指定迁移项目: ${ConsoleColors.highlight(this.selectedProjects.join(', '))}`));\n        console.log(ConsoleColors.success(`找到匹配项目: ${ConsoleColors.highlight(repositoriesToMigrate.map(r => r.name).join(', '))}`));\n        \n        const notFound = this.selectedProjects.filter(name => \n          !this.repositories.some(repo => repo.name === name)\n        );\n        if (notFound.length > 0) {\n          console.log(ConsoleColors.warning(`未找到的项目: ${notFound.join(', ')}`));\n        }\n      }\n      \n      if (repositoriesToMigrate.length === 0) {\n        console.log(ConsoleColors.warning('没有找到需要迁移的仓库'));\n        return;\n      }\n      \n      console.log('\\n' + ConsoleColors.progress(`开始迁移 ${ConsoleColors.highlight(repositoriesToMigrate.length.toString())} 个仓库`));\n      console.log(ConsoleColors.separator(60));\n      \n      // 逐个迁移仓库\n      for (const repo of repositoriesToMigrate) {\n        await this.migrateSingleRepository(repo);\n      }\n      \n      console.log('\\n' + ConsoleColors.separator(60));\n      console.log(ConsoleColors.success('🎉 所有迁移任务完成'));\n      \n    } catch (error: any) {\n      console.error(ConsoleColors.error(`迁移过程中发生错误: ${error.message}`));\n      process.exit(1);\n    }\n  }\n\n  /**\n   * 生成迁移报告\n   */\n  public generateMigrationReport(): string {\n    // 获取当前迁移的项目列表\n    const repositoriesToMigrate = this.selectedProjects.length > 0 \n      ? this.repositories.filter(repo => this.selectedProjects.includes(repo.name))\n      : this.repositories;\n    \n    // 只统计当前迁移的项目\n    const migratedProjectNames = repositoriesToMigrate.map(repo => repo.name);\n    const migratedLogs = Array.from(this.logs.values()).filter(log => migratedProjectNames.includes(log.projectName));\n    \n    const totalRepos = migratedLogs.length;\n    const successfulRepos = migratedLogs.filter(log => log.isFinalCloned && !log.failureReason).length;\n    const failedRepos = totalRepos - successfulRepos;\n    const reposWithWarnings = migratedLogs.filter(log => log.warnings && log.warnings.length > 0).length;\n    \n    let report = '\\n' + ConsoleColors.box('GitLab 项目迁移报告') + '\\n';\n    \n    if (this.selectedProjects.length > 0) {\n      report += ConsoleColors.info(`指定迁移项目: ${ConsoleColors.highlight(this.selectedProjects.join(', '))}`) + '\\n';\n    }\n    \n    report += ConsoleColors.info(`总计: ${ConsoleColors.highlight(totalRepos.toString())} 个仓库`) + '\\n';\n    report += ConsoleColors.success(`成功: ${ConsoleColors.highlight(successfulRepos.toString())} 个仓库`) + '\\n';\n    \n    if (failedRepos > 0) {\n      report += ConsoleColors.error(`失败: ${ConsoleColors.highlight(failedRepos.toString())} 个仓库`) + '\\n';\n    } else {\n      report += ConsoleColors.success(`失败: ${ConsoleColors.highlight('0')} 个仓库`) + '\\n';\n    }\n    \n    if (reposWithWarnings > 0) {\n      report += ConsoleColors.warning(`警告: ${ConsoleColors.highlight(reposWithWarnings.toString())} 个仓库`) + '\\n';\n    }\n    \n    const successRate = totalRepos > 0 ? Math.round((successfulRepos / totalRepos) * 100) : 0;\n    const successRateColor = successRate === 100 ? ConsoleColors.success : successRate >= 80 ? ConsoleColors.warning : ConsoleColors.error;\n    report += successRateColor(`成功率: ${ConsoleColors.highlight(successRate + '%')}`) + '\\n';\n    \n    // 显示有警告的仓库\n    if (reposWithWarnings > 0) {\n      report += '\\n' + ConsoleColors.warning('有警告的仓库:') + '\\n';\n      migratedLogs\n        .filter(log => log.warnings && log.warnings.length > 0)\n        .forEach(log => {\n          report += ConsoleColors.warning(`  • ${ConsoleColors.highlight(log.projectName)}:`) + '\\n';\n          log.warnings.forEach(warning => {\n            report += ConsoleColors.dim(`    - ${warning}`) + '\\n';\n          });\n        });\n    }\n    \n    if (failedRepos > 0) {\n      report += '\\n' + ConsoleColors.error('失败的仓库:') + '\\n';\n      migratedLogs\n        .filter(log => log.failureReason)\n        .forEach(log => {\n          report += ConsoleColors.error(`  • ${ConsoleColors.highlight(log.projectName)}: ${log.failureReason}`) + '\\n';\n        });\n    }\n    \n    return report;\n  }\n}\n\n/**\n * 程序退出时的清理函数\n */\nfunction cleanupOnExit(migrator?: GitLabMigrator): void {\n  console.log('\\n🧹 程序退出，正在清理临时文件...');\n  \n  let cleanupResults = {\n    logsSaved: false,\n    tempDirsFound: 0,\n    tempDirsDeleted: 0,\n    errors: [] as string[]\n  };\n  \n  // 强制保存迁移日志\n  if (migrator) {\n    try {\n      migrator.forceSaveMigrationLogs();\n      cleanupResults.logsSaved = true;\n      console.log('💾 已保存迁移日志');\n    } catch (error) {\n      const errorMsg = `保存迁移日志失败: ${error instanceof Error ? error.message : String(error)}`;\n      cleanupResults.errors.push(errorMsg);\n      console.log(ConsoleColors.warning(`⚠️  ${errorMsg}`));\n    }\n  }\n  \n  // 清理临时目录\n  try {\n    const currentDir = process.cwd();\n    console.log(ConsoleColors.dim(`📁 扫描目录: ${currentDir}`));\n    \n    let files: string[] = [];\n    try {\n      files = readdirSync(currentDir);\n    } catch (error) {\n      const errorMsg = `读取目录失败: ${error instanceof Error ? error.message : String(error)}`;\n      cleanupResults.errors.push(errorMsg);\n      console.log(ConsoleColors.error(`❌ ${errorMsg}`));\n      return;\n    }\n    \n    // 查找所有临时目录\n    const tempDirs = files.filter(file => {\n      try {\n        const fullPath = path.join(currentDir, file);\n        const isDir = statSync(fullPath).isDirectory();\n        const isTempDir = file.startsWith('temp-migration-');\n        return isDir && isTempDir;\n      } catch (error) {\n        console.log(ConsoleColors.warning(`⚠️  检查文件 ${file} 时出错: ${error instanceof Error ? error.message : String(error)}`));\n        return false;\n      }\n    });\n    \n    cleanupResults.tempDirsFound = tempDirs.length;\n    \n    if (tempDirs.length > 0) {\n      console.log(`🗑️  发现 ${tempDirs.length} 个临时目录，开始清理...`);\n      \n      tempDirs.forEach(dir => {\n        try {\n          const fullPath = path.join(currentDir, dir);\n          console.log(ConsoleColors.dim(`   🔄 正在删除: ${dir}`));\n          \n          // 尝试删除目录\n          rmSync(fullPath, { recursive: true, force: true });\n          \n          // 验证删除是否成功\n          if (!existsSync(fullPath)) {\n            cleanupResults.tempDirsDeleted++;\n            console.log(ConsoleColors.success(`   ✅ 已删除: ${dir}`));\n          } else {\n            const errorMsg = `目录仍然存在: ${dir}`;\n            cleanupResults.errors.push(errorMsg);\n            console.log(ConsoleColors.warning(`   ⚠️  ${errorMsg}`));\n          }\n        } catch (error) {\n          const errorMsg = `删除目录 ${dir} 失败: ${error instanceof Error ? error.message : String(error)}`;\n          cleanupResults.errors.push(errorMsg);\n          console.log(ConsoleColors.error(`   ❌ ${errorMsg}`));\n        }\n      });\n    } else {\n      console.log(ConsoleColors.dim('📂 未发现临时目录'));\n    }\n    \n    // 输出清理结果摘要\n    console.log('\\n📊 清理结果摘要:');\n    console.log(ConsoleColors.dim(`   - 迁移日志保存: ${cleanupResults.logsSaved ? '✅ 成功' : '❌ 失败'}`));\n    console.log(ConsoleColors.dim(`   - 发现临时目录: ${cleanupResults.tempDirsFound} 个`));\n    console.log(ConsoleColors.dim(`   - 成功删除: ${cleanupResults.tempDirsDeleted} 个`));\n    console.log(ConsoleColors.dim(`   - 错误数量: ${cleanupResults.errors.length} 个`));\n    \n    if (cleanupResults.errors.length > 0) {\n      console.log(ConsoleColors.warning('\\n⚠️  清理过程中遇到以下问题:'));\n      cleanupResults.errors.forEach((error, index) => {\n        console.log(ConsoleColors.warning(`   ${index + 1}. ${error}`));\n      });\n    }\n    \n    if (cleanupResults.tempDirsDeleted === cleanupResults.tempDirsFound && cleanupResults.errors.length === 0) {\n      console.log(ConsoleColors.success('✅ 清理完成，所有临时文件已删除'));\n    } else {\n      console.log(ConsoleColors.warning('⚠️  清理完成，但存在部分问题'));\n    }\n    \n  } catch (error) {\n    const errorMsg = `清理过程中发生未预期的错误: ${error instanceof Error ? error.message : String(error)}`;\n    console.log(ConsoleColors.error(`💥 ${errorMsg}`));\n    cleanupResults.errors.push(errorMsg);\n  }\n}\n\n/**\n * 注册程序退出时的清理处理器\n */\nfunction registerExitHandlers(migrator?: GitLabMigrator): void {\n  // 处理正常退出\n  process.on('exit', () => {\n    // 注意：在 exit 事件中不能执行异步操作\n  });\n  \n  // 处理 Ctrl+C (SIGINT)\n  process.on('SIGINT', () => {\n    console.log('\\n🛑 收到中断信号 (Ctrl+C)');\n    cleanupOnExit(migrator);\n    process.exit(0);\n  });\n  \n  // 处理终止信号 (SIGTERM)\n  process.on('SIGTERM', () => {\n    console.log('\\n🛑 收到终止信号');\n    cleanupOnExit(migrator);\n    process.exit(0);\n  });\n  \n  // 处理未捕获的异常\n  process.on('uncaughtException', (error) => {\n    console.error('\\n💥 未捕获的异常:', error.message);\n    cleanupOnExit(migrator);\n    process.exit(1);\n  });\n  \n  // 处理未处理的 Promise 拒绝\n  process.on('unhandledRejection', (reason, promise) => {\n    console.error('\\n💥 未处理的 Promise 拒绝:', reason);\n    cleanupOnExit(migrator);\n    process.exit(1);\n  });\n}\n\n/**\n * 初始化 move.md 配置文件\n */\nfunction initMoveFile(targetDir: string = process.cwd()): void {\n  const moveFilePath = path.join(targetDir, 'move.md');\n  \n  // 检查文件是否已存在\n  if (existsSync(moveFilePath)) {\n    console.log(ConsoleColors.warning(`⚠️  配置文件已存在: ${moveFilePath}`));\n    console.log(ConsoleColors.info('如需重新初始化，请先删除现有文件'));\n    return;\n  }\n  \n  // 创建目录（如果不存在）\n  const dir = path.dirname(moveFilePath);\n  if (!existsSync(dir)) {\n    mkdirSync(dir, { recursive: true });\n  }\n  \n  // 生成默认配置内容\n  const defaultConfig = `# Gitlab 项目迁移到新的分组\n\n## 迁移目标 Access Token\n\nyour_gitlab_access_token\n\n## 迁移目标分组\n\nhttps://gitlab.example.com/target-group/\n\n## 需要迁移仓库\n\n| 项目名称 | 项目描述 | 原仓库地址 |\n|---------|---------|----------|\n| project1 | 项目1描述 | ssh://git@gitlab.example.com:10022/old-group/project1.git |\n| project2 | 项目2描述 | ssh://git@gitlab.example.com:10022/old-group/project2.git |\n\n## 日志\n\n<!-- 迁移日志将自动生成在这里 -->\n`;\n  \n  try {\n    writeFileSync(moveFilePath, defaultConfig, 'utf8');\n    console.log(ConsoleColors.success(`✅ 配置文件初始化成功: ${moveFilePath}`));\n    console.log('');\n    console.log(ConsoleColors.info('📝 请编辑配置文件并填入正确的信息:'));\n    console.log(ConsoleColors.dim('   1. 设置目标 GitLab 地址'));\n    console.log(ConsoleColors.dim('   2. 设置目标分组路径'));\n    console.log(ConsoleColors.dim('   3. 设置 Access Token'));\n    console.log(ConsoleColors.dim('   4. 添加需要迁移的项目信息'));\n    console.log('');\n    console.log(ConsoleColors.info('🚀 配置完成后，运行以下命令开始迁移:'));\n    // 显示本地运行方式\n    console.log(ConsoleColors.highlight(`   bun run migrate-gitlab.ts`));\n    // 显示全局运行方式\n    console.log(ConsoleColors.highlight(`   mgitlab`));\n    // 显示帮助信息\n    console.log(ConsoleColors.highlight(`   mgitlab --help     # 查看更多详细的使用说明和示例`));\n  } catch (error) {\n    console.error(ConsoleColors.error(`❌ 初始化配置文件失败: ${error instanceof Error ? error.message : String(error)}`));\n    process.exit(1);\n  }\n}\n\n/**\n * 显示帮助信息\n */\n/**\n * 显示版本信息\n */\nfunction showVersion(): void {\n  // 尝试从多个可能的位置读取 package.json\n  let packageJson;\n  \n  // 获取当前脚本的目录\n  const currentScriptPath = import.meta.url.replace('file:///', '').replace(/\\/[^/]*$/, '');\n  const possiblePaths = [\n    path.join(currentScriptPath, 'package.json'),\n    path.join(currentScriptPath, '../package.json'),\n    path.join(currentScriptPath, '../../package.json'),\n    './package.json',\n    '../package.json',\n    './dist/package.json'\n  ];\n  \n  for (const packagePath of possiblePaths) {\n    try {\n      if (existsSync(packagePath)) {\n        packageJson = JSON.parse(readFileSync(packagePath, 'utf-8'));\n        break;\n      }\n    } catch (error) {\n      // 继续尝试下一个路径\n    }\n  }\n  \n  if (!packageJson) {\n    console.log(ConsoleColors.error('无法找到 package.json 文件'));\n    return;\n  }\n  console.log(ConsoleColors.box(`GitLab 项目迁移工具 v${packageJson.version}`));\n  console.log('');\n  console.log(ConsoleColors.info('项目信息:'));\n  console.log(ConsoleColors.dim(`  名称: ${packageJson.name}`));\n  console.log(ConsoleColors.dim(`  版本: ${packageJson.version}`));\n  console.log(ConsoleColors.dim(`  描述: ${packageJson.description}`));\n  console.log(ConsoleColors.dim(`  作者: ${packageJson.author}`));\n  console.log(ConsoleColors.dim(`  许可证: ${packageJson.license}`));\n  console.log('');\n  console.log(ConsoleColors.info('运行环境:'));\n  console.log(ConsoleColors.dim(`  Node.js: ${process.version}`));\n  console.log(ConsoleColors.dim(`  平台: ${process.platform} ${process.arch}`));\n  console.log('');\n}\n\n/**\n * 显示帮助信息\n */\nfunction showHelp(): void {\n  // 尝试从多个可能的位置读取 package.json\n  let packageJson;\n  \n  // 获取当前脚本的目录\n  const currentScriptPath = import.meta.url.replace('file:///', '').replace(/\\/[^/]*$/, '');\n  const possiblePaths = [\n    path.join(currentScriptPath, 'package.json'),\n    path.join(currentScriptPath, '../package.json'),\n    path.join(currentScriptPath, '../../package.json'),\n    './package.json',\n    '../package.json',\n    './dist/package.json'\n  ];\n  \n  for (const packagePath of possiblePaths) {\n    try {\n      if (existsSync(packagePath)) {\n        packageJson = JSON.parse(readFileSync(packagePath, 'utf-8'));\n        break;\n      }\n    } catch (error) {\n      // 继续尝试下一个路径\n    }\n  }\n  \n  if (!packageJson) {\n    console.log(ConsoleColors.error('无法找到 package.json 文件'));\n    return;\n  }\n  console.log(ConsoleColors.box(`GitLab 项目迁移工具 v${packageJson.version}`));\n  console.log('');\n  console.log(ConsoleColors.info('描述:'));\n  console.log(ConsoleColors.dim('  专业的 GitLab 仓库迁移工具，支持批量迁移、断点续传、智能重试等功能'));\n  console.log('');\n  console.log(ConsoleColors.info('用法:'));\n  console.log(ConsoleColors.dim('  全局安装后:'));\n  console.log(ConsoleColors.highlight('    migrate-gitlab [选项] [参数]'));\n  console.log(ConsoleColors.highlight('    mgitlab [选项] [参数]'));\n  console.log('');\n  console.log(ConsoleColors.dim('  本地运行:'));\n  console.log(ConsoleColors.highlight('    bun run migrate-gitlab.ts [选项] [参数]'));\n  console.log('');\n  console.log(ConsoleColors.info('命令:'));\n  console.log(ConsoleColors.dim('  init [目录]           初始化配置文件到指定目录 (默认: 当前目录)'));\n  console.log(ConsoleColors.dim('  migrate [配置文件]    执行迁移任务 (默认: ./move.md)'));\n  console.log('');\n  console.log(ConsoleColors.info('选项:'));\n  console.log(ConsoleColors.dim('  -h, --help           显示帮助信息'));\n  console.log(ConsoleColors.dim('  -v, --version        显示版本信息'));\n  console.log(ConsoleColors.dim('  -p, --projects       指定要迁移的项目列表 (逗号分隔)'));\n  console.log(ConsoleColors.dim('  -t, --token          指定 GitLab Access Token'));\n  console.log(ConsoleColors.dim('  -s, --skip-clone     禁用克隆迁移后的仓库到本地'));\n  console.log(ConsoleColors.dim('  -q, --quiet          简化控制台输出，隐藏命令执行详情'));\n  console.log('');\n  console.log(ConsoleColors.info('参数说明:'));\n  console.log(ConsoleColors.dim('  配置文件路径         move.md 配置文件的路径 (默认: ./move.md)'));\n  console.log(ConsoleColors.dim('  项目列表            逗号分隔的项目名称列表'));\n  console.log(ConsoleColors.dim('  Access Token        GitLab Access Token'));\n  console.log(ConsoleColors.dim('  目标目录            初始化配置文件的目录'));\n  console.log('');\n  console.log(ConsoleColors.info('示例:'));\n  console.log(ConsoleColors.dim('  # 初始化配置文件'));\n  console.log(ConsoleColors.highlight('  mgitlab init'));\n  console.log(ConsoleColors.highlight('  mgitlab init /path/to/project'));\n  console.log('');\n  console.log(ConsoleColors.dim('  # 显示版本和帮助'));\n  console.log(ConsoleColors.highlight('  mgitlab --version'));\n  console.log(ConsoleColors.highlight('  mgitlab --help'));\n  console.log('');\n  console.log(ConsoleColors.dim('  # 迁移所有项目'));\n  console.log(ConsoleColors.highlight('  mgitlab'));\n  console.log(ConsoleColors.highlight('  mgitlab ./move.md'));\n  console.log('');\n  console.log(ConsoleColors.dim('  # 迁移指定项目'));\n  console.log(ConsoleColors.highlight('  mgitlab --projects \"project1,project2\"'));\n  console.log(ConsoleColors.highlight('  mgitlab ./move.md \"project1,project2\"'));\n  console.log('');\n  console.log(ConsoleColors.dim('  # 使用指定 Token'));\n  console.log(ConsoleColors.highlight('  mgitlab --token your_gitlab_token'));\n  console.log(ConsoleColors.highlight('  mgitlab ./move.md \"\" your_gitlab_token'));\n  console.log('');\n  console.log(ConsoleColors.dim('  # 禁用克隆迁移后的仓库'));\n  console.log(ConsoleColors.highlight('  mgitlab --skip-clone'));\n  console.log(ConsoleColors.highlight('  mgitlab --projects \"project1,project2\" --skip-clone'));\n  console.log('');\n  console.log(ConsoleColors.info('功能特性:'));\n  console.log(ConsoleColors.dim('  ✅ 批量迁移多个 GitLab 仓库'));\n  console.log(ConsoleColors.dim('  ✅ 断点续传，支持从中断点继续'));\n  console.log(ConsoleColors.dim('  ✅ 智能重试机制，自动处理临时错误'));\n  console.log(ConsoleColors.dim('  ✅ 完整的镜像克隆，保留所有分支和标签'));\n  console.log(ConsoleColors.dim('  ✅ 自动创建目标仓库和更新描述'));\n  console.log(ConsoleColors.dim('  ✅ 详细的迁移日志和进度报告'));\n  console.log(ConsoleColors.dim('  ✅ 配置文件自动备份和垃圾清理'));\n  console.log(ConsoleColors.dim('  ✅ 预检查机制，验证权限和网络连通性'));\n  console.log('');\n  console.log(ConsoleColors.info('更多信息:'));\n  console.log(ConsoleColors.dim('  文档: https://github.com/Garynan52000/migrate-gitlab#readme'));\n  console.log(ConsoleColors.dim('  问题反馈: https://github.com/Garynan52000/migrate-gitlab/issues'));\n  console.log('');\n}\n\n/**\n * 主函数 - 脚本入口点\n */\n/**\n * 解析命令行参数\n */\nfunction parseCommandLineArgs(args: string[]): {\n  command?: string;\n  moveFilePath?: string;\n  projectList?: string;\n  accessToken?: string;\n  targetDir?: string;\n  showHelp?: boolean;\n  showVersion?: boolean;\n  skipFinalClone?: boolean;\n  quietMode?: boolean;\n} {\n  const result: any = {};\n  let i = 0;\n\n  while (i < args.length) {\n    const arg = args[i];\n\n    switch (arg) {\n      case '--help':\n      case '-h':\n      case 'help':\n        result.showHelp = true;\n        break;\n      case '--version':\n      case '-v':\n      case 'version':\n        result.showVersion = true;\n        break;\n      case '--projects':\n      case '-p':\n        result.projectList = args[++i];\n        break;\n      case '--token':\n      case '-t':\n        result.accessToken = args[++i];\n        break;\n      case '--skip-clone':\n      case '-s':\n        result.skipFinalClone = true;\n        break;\n      case '--quiet':\n      case '-q':\n        result.quietMode = true;\n        break;\n      case 'init':\n        result.command = 'init';\n        if (i + 1 < args.length && !args[i + 1].startsWith('-')) {\n          result.targetDir = args[++i];\n        }\n        break;\n      case 'migrate':\n        result.command = 'migrate';\n        if (i + 1 < args.length && !args[i + 1].startsWith('-')) {\n          result.moveFilePath = args[++i];\n        }\n        break;\n      default:\n        // 处理位置参数\n        if (!arg.startsWith('-')) {\n          if (!result.command) {\n            // 如果没有明确的命令，根据参数内容推断\n            if (arg === 'init') {\n              result.command = 'init';\n            } else if (arg.endsWith('.md') || arg.includes('/') || arg.includes('\\\\')) {\n              result.moveFilePath = arg;\n              result.command = 'migrate';\n            } else {\n              // 可能是项目列表\n              if (!result.projectList) {\n                result.projectList = arg;\n              } else if (!result.accessToken) {\n                result.accessToken = arg;\n              }\n              result.command = result.command || 'migrate';\n            }\n          } else if (result.command === 'init' && !result.targetDir) {\n            result.targetDir = arg;\n          } else if (result.command === 'migrate' && !result.moveFilePath) {\n            result.moveFilePath = arg;\n          } else if (!result.projectList) {\n            result.projectList = arg;\n          } else if (!result.accessToken) {\n            result.accessToken = arg;\n          }\n        }\n        break;\n    }\n    i++;\n  }\n\n  // 设置默认值\n  if (!result.command && !result.showHelp && !result.showVersion) {\n    result.command = 'migrate';\n  }\n  if (result.command === 'migrate' && !result.moveFilePath) {\n    result.moveFilePath = path.resolve(process.cwd(), 'move.md');\n  }\n  if (result.command === 'init' && !result.targetDir) {\n    result.targetDir = process.cwd();\n  }\n\n  return result;\n}\n\n/**\n * 主函数\n */\nasync function main() {\n  let migrator: GitLabMigrator | undefined;\n  \n  try {\n    // 获取命令行参数\n    const args = process.argv.slice(2);\n    const parsed = parseCommandLineArgs(args);\n    \n    // 处理版本信息\n    if (parsed.showVersion) {\n      showVersion();\n      return;\n    }\n    \n    // 处理帮助信息\n    if (parsed.showHelp || (args.length === 0 && !parsed.command)) {\n      if (args.length === 0) {\n        console.log('🚀 GitLab 项目迁移工具启动');\n        console.log('📋 正在读取迁移配置...');\n      } else {\n        showHelp();\n        return;\n      }\n    }\n    \n    // 处理 init 命令\n    if (parsed.command === 'init') {\n      console.log('🔧 初始化 GitLab 迁移配置文件');\n      console.log(`📁 目标目录: ${parsed.targetDir}`);\n      console.log('');\n      initMoveFile(parsed.targetDir!);\n      return;\n    }\n    \n    // 处理 migrate 命令\n    if (parsed.command === 'migrate') {\n      console.log('🚀 GitLab 项目迁移工具启动');\n      console.log('📋 正在读取迁移配置...');\n      \n      // 解析项目名称列表\n      let selectedProjects: string[] = [];\n      if (parsed.projectList) {\n        selectedProjects = parsed.projectList.split(',').map(name => name.trim()).filter(name => name.length > 0);\n        console.log(`🎯 指定迁移项目: ${selectedProjects.join(', ')}`);\n      } else {\n        console.log('📦 将迁移所有项目');\n      }\n      \n      // 获取 Access Token（优先级：命令行参数 > 环境变量）\n      const accessToken = parsed.accessToken || process.env.GITLAB_ACCESS_TOKEN;\n      \n      // 创建迁移器实例\n      migrator = new GitLabMigrator(parsed.moveFilePath!, selectedProjects, accessToken, parsed.skipFinalClone, parsed.quietMode);\n      \n      // 注册退出处理器（传入 migrator 实例）\n      registerExitHandlers(migrator);\n      \n      // 执行迁移\n      await migrator.migrate();\n      \n      // 生成并显示报告\n      const report = migrator.generateMigrationReport();\n      console.log(report);\n      \n      console.log('\\n🎉 迁移任务完成！');\n      \n      // 正常完成时也进行清理\n      cleanupOnExit(migrator);\n      return;\n    }\n    \n    // 如果没有匹配的命令，显示帮助信息\n    showHelp();\n    \n  } catch (error) {\n    console.error('\\n💥 迁移过程中发生错误:');\n    console.error(error instanceof Error ? error.message : String(error));\n    \n    // 错误退出前进行清理（现在可以传入 migrator 实例）\n    if (migrator) {\n      console.log('\\n🧹 正在清理临时文件...');\n      cleanupOnExit(migrator);\n    } else {\n      // 如果 migrator 未创建，进行基本清理\n      cleanupOnExit();\n    }\n    process.exit(1);\n  }\n}\n\n// 如果直接运行此脚本，则执行主函数\nif (process.argv[1] && import.meta.url.endsWith(process.argv[1].replace(/\\\\/g, '/'))) {\n  main();\n}\n\nexport { GitLabMigrator, type TRepository, type TMigrationConfig, type TMigrationLog };"
  ],
  "mappings": ";;AAOA,mBAAS,sBACT,uBAAS,mBAAc,gBAAe,YAAY,eAAQ,iBAAW,cAAa,WAClF,uBACA,2BAKA,MAAM,CAAc,OAEF,OAAQ,gBACR,QAAS,gBACT,KAAM,gBAGN,KAAM,iBACN,OAAQ,iBACR,QAAS,iBACT,MAAO,iBACP,SAAU,iBACV,MAAO,iBACP,OAAQ,iBACR,MAAO,iBAGP,QAAS,iBACT,UAAW,iBACX,WAAY,iBACZ,SAAU,iBAGnB,QAAO,CAAC,EAAsB,CACnC,MAAO,GAAG,EAAc,QAAQ,EAAc,gBAAU,IAAO,EAAc,cAGxE,MAAK,CAAC,EAAsB,CACjC,MAAO,GAAG,EAAc,MAAM,EAAc,gBAAU,IAAO,EAAc,cAGtE,QAAO,CAAC,EAAsB,CACnC,MAAO,GAAG,EAAc,SAAS,EAAc,uBAAY,IAAO,EAAc,cAG3E,KAAI,CAAC,EAAsB,CAChC,MAAO,GAAG,EAAc,OAAO,EAAc,uBAAY,IAAO,EAAc,cAGzE,SAAQ,CAAC,EAAsB,CACpC,MAAO,GAAG,EAAc,OAAO,EAAc,sBAAW,IAAO,EAAc,cAGxE,UAAS,CAAC,EAAsB,CACrC,MAAO,GAAG,EAAc,UAAU,EAAc,SAAS,IAAO,EAAc,cAGzE,IAAG,CAAC,EAAsB,CAC/B,MAAO,GAAG,EAAc,OAAO,IAAO,EAAc,cAG/C,MAAK,CAAC,EAAsB,CACjC,MAAO,GAAG,EAAc,OAAO,EAAc,sBAAW,IAAO,EAAc,cAGxE,UAAS,CAAC,EAAiB,GAAY,CAC5C,MAAO,GAAG,EAAc,OAAO,SAAG,OAAO,CAAM,IAAI,EAAc,cAG5D,IAAG,CAAC,EAAsB,CAC/B,IAAM,EAAQ,EAAK,MAAM;AAAA,CAAI,EACvB,EAAY,KAAK,IAAI,GAAG,EAAM,IAAI,KAAQ,EAAK,MAAM,CAAC,EACtD,EAAS,SAAG,OAAO,EAAY,CAAC,EAElC,EAAS,GAAG,EAAc,aAAO,UAAU,EAAc;AAAA,EAO7D,OANA,EAAM,QAAQ,KAAQ,CACpB,IAAM,EAAU,IAAI,OAAO,EAAY,EAAK,MAAM,EAClD,GAAU,GAAG,EAAc,eAAS,EAAc,QAAQ,IAAO,MAAY,EAAc,aAAQ,EAAc;AAAA,EAClH,EACD,GAAU,GAAG,EAAc,aAAO,UAAU,EAAc,QAEnD,QAGF,KAAI,CAAC,EAAoB,EAAsB,CACpD,MAAO,GAAG,EAAc,OAAO,EAAc,mCAAc,KAAc,EAAc,SAAS,EAAc,QAAQ,IAAO,EAAc,cAGtI,SAAQ,CAAC,EAAsB,CACpC,MAAO,GAAG,EAAc,qBAAU,IAAO,EAAc,cAGlD,IAAG,CAAC,EAAsB,CAC/B,MAAO,GAAG,EAAc,oBAAS,IAAO,EAAc,cAGjD,KAAI,CAAC,EAAsB,CAChC,MAAO,GAAG,EAAc,UAAU,EAAc,sBAAW,IAAO,EAAc,cAG3E,YAAW,CAAC,EAAsB,CACvC,MAAO,GAAG,EAAc,oBAAS,IAAO,EAAc,QAE1D,CAuGA,SAAS,CAAoB,EAAoB,CAC/C,OAAO,IAAI,QAAQ,CAAC,IAAY,CAE9B,IAAM,EAAc,kBAAgB,CAClC,MAAO,QAAQ,MACf,OAAQ,OACR,SAAU,EACZ,CAAC,EAGK,EAAQ,QAAQ,MACtB,EAAM,WAAW,EAAI,EACrB,EAAM,OAAO,EACb,EAAM,YAAY,MAAM,EAExB,IAAI,EAAQ,GACZ,QAAQ,IAAI;AAAA,kJAAgD,EAE5D,EAAM,GAAG,OAAQ,CAAC,IAAgB,CAEhC,GAAI,IAAQ,MAAQ,IAAQ;AAAA,EAAM,CAChC,EAAM,WAAW,EAAK,EACtB,EAAM,MAAM,EACZ,EAAG,MAAM,EACT,QAAQ,IAAI;AAAA,uCAAqB,EACjC,EAAQ,EAAM,KAAK,CAAC,EACpB,OAIF,GAAI,IAAQ,MAAY,IAAQ,OAAU,CACxC,GAAI,EAAM,OAAS,EACjB,EAAQ,EAAM,MAAM,EAAG,EAAE,EAE3B,OAIF,GAAI,IAAQ,OACV,QAAQ,IAAI;AAAA,4CAAW,EACvB,QAAQ,KAAK,CAAC,EAIhB,GAAI,EAAI,WAAW,CAAC,GAAK,GACvB,GAAS,EAEZ,EACF,EAMH,MAAM,CAAe,CACX,aACA,YACA,eACA,aACA,KACA,iBACA,QACA,YAAqC,KACrC,eACA,UAER,WAAW,CAAC,EAA4B,UAAQ,QAAQ,IAAI,EAAG,SAAS,EAAG,EAA6B,EAAsB,EAA0B,GAAO,EAAqB,GAAO,CACzL,KAAK,aAAe,EACpB,KAAK,YAAc,GAAe,GAClC,KAAK,eAAiB,EACtB,KAAK,UAAY,EACjB,KAAK,eAAiB,GACtB,KAAK,aAAe,CAAC,EACrB,KAAK,KAAO,IAAI,IAChB,KAAK,iBAAmB,GAAoB,CAAC,EAG7C,IAAM,EAAY,IAAI,KAAK,EAAE,YAAY,EAAE,QAAQ,QAAS,GAAG,EACzD,EAAe,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,EAC9D,KAAK,QAAe,OAAK,QAAQ,IAAI,EAAG,kBAAkB,KAAa,GAAc,EAGrF,KAAK,kBAAkB,EACvB,KAAK,0BAA0B,EAMzB,aAAa,EAAS,CAG5B,GAFA,QAAQ,IAAI,6DAAoB,GAE3B,EAAW,KAAK,YAAY,EAC/B,MAAM,IAAI,MAAM,0CAAgB,KAAK,cAAc,EAGrD,IAAM,EAAU,EAAa,KAAK,aAAc,OAAO,EACjD,EAAQ,EAAQ,MAAM;AAAA,CAAI,EAC1B,EAAwB,CAAC,EAG/B,IAAK,KAAK,YAAa,CACrB,IAAM,EAAmB,EAAM,UAAU,KAAQ,EAAK,SAAS,0CAAqB,CAAC,EACrF,GAAI,IAAqB,IAAM,EAAmB,EAAI,EAAM,OAAQ,CAClE,IAAM,EAAY,EAAM,EAAmB,GAAG,KAAK,EACnD,GAAI,GAAa,IAAc,4BAA8B,IAAc,oBACzE,KAAK,YAAc,EACnB,QAAQ,IAAI,+EAAiC,EAG/C,OAAY,KAAK,gEAAuB,EAK5C,IAAM,EAAmB,EAAM,UAAU,KAAQ,EAAK,SAAS,yCAAU,CAAC,EAC1E,GAAI,IAAqB,IAAM,EAAmB,EAAI,EAAM,QAE1D,GADA,KAAK,eAAiB,EAAM,EAAmB,GAAG,KAAK,GAClD,KAAK,eACR,EAAY,KAAK,yCAAU,EACtB,SAAK,KAAK,WAAW,KAAK,cAAc,EAC7C,EAAY,KAAK,wDAAe,KAAK,gBAAgB,EAGvD,OAAY,KAAK,wDAAU,EAI7B,IAAM,EAAkB,EAAM,UAAU,KAAQ,EAAK,SAAS,0FAAwB,CAAC,EACvF,GAAI,IAAoB,GAAI,CAC1B,IAAI,EAAiB,EACrB,QAAS,EAAI,EAAkB,EAAG,EAAI,EAAM,OAAQ,IAAK,CACvD,IAAM,EAAO,EAAM,GAAG,KAAK,EACrB,EAAa,EAAI,EAGvB,IAAK,GAAQ,EAAK,SAAS,iBAAM,GAAK,EAAK,SAAS,KAAK,EAAG,MAG5D,GAAI,EAAK,MAAM,eAAe,EAAG,SAGjC,IAAK,EAAK,WAAW,GAAG,IAAM,EAAK,SAAS,GAAG,EAAG,CAChD,EAAY,KAAK,SAAG,4GAAgC,EACpD,SAGF,IAAM,EAAU,EAAK,MAAM,GAAG,EAAE,IAAI,KAAO,EAAI,KAAK,CAAC,EAAE,OAAO,KAAO,CAAG,EAExE,GAAI,EAAQ,OAAS,EAAG,CACtB,EAAY,KAAK,SAAG,8LAA4C,EAChE,SAGF,IAAO,EAAM,EAAa,GAAe,EAGzC,IAAK,EAAM,CACT,EAAY,KAAK,SAAG,+DAAsB,EAC1C,SAGF,IAAK,EAAa,CAChB,EAAY,KAAK,SAAG,qEAAuB,EAC3C,SAIF,IAAK,KAAK,cAAc,CAAW,EAAG,CACpC,EAAY,KAAK,SAAG,wEAA0B,GAAa,EAC3D,SAIF,GAAI,KAAK,aAAa,KAAK,KAAQ,EAAK,OAAS,CAAI,EAAG,CACtD,EAAY,KAAK,SAAG,sDAAuB,GAAM,EACjD,SAGF,KAAK,aAAa,KAAK,CACrB,OACA,YAAa,GAAe,qBAC5B,aACF,CAAC,EAED,IAGF,GAAI,IAAmB,EACrB,EAAY,KAAK,8DAAW,EAG9B,OAAY,KAAK,wDAAU,EAO7B,GAHA,KAAK,kBAAkB,CAAO,EAG1B,EAAY,OAAS,EACvB,QAAQ,IAAI,EAAc,QAAQ,iEAAc,CAAC,EACjD,EAAY,QAAQ,KAAS,CAC3B,QAAQ,IAAI,EAAc,IAAI,aAAO,GAAO,CAAC,EAC9C,EACD,QAAQ,IAAI,EAAE,EAGhB,QAAQ,IAAI,qDAAY,KAAK,aAAa,6CAAe,EACzD,QAAQ,IAAI,0CAAW,KAAK,gBAAgB,EAG5C,IAAM,EAAa,KAAK,sBAAsB,EAG9C,GAAI,EAAW,SAAS,OAAS,EAC/B,QAAQ,IAAI,EAAc,QAAQ,qDAAY,CAAC,EAC/C,EAAW,SAAS,QAAQ,KAAW,CACrC,QAAQ,IAAI,EAAc,IAAI,aAAO,GAAS,CAAC,EAChD,EACD,QAAQ,IAAI,EAAE,EAGhB,GAAI,EAAW,OAAO,OAAS,EAM7B,MALA,QAAQ,IAAI,EAAc,MAAM,8CAAU,CAAC,EAC3C,EAAW,OAAO,QAAQ,KAAS,CACjC,QAAQ,IAAI,EAAc,IAAI,aAAO,GAAO,CAAC,EAC9C,EACD,QAAQ,IAAI,EAAE,EACR,IAAI,MAAM,oHAAoB,EAItC,IAAK,KAAK,gBAAkB,KAAK,aAAa,SAAW,EACvD,MAAM,IAAI,MAAM,8GAAmB,EAO/B,UAAU,CAAC,EAAsB,CACvC,GAAI,CAEF,OADA,IAAI,IAAI,CAAG,EACJ,GACP,KAAM,CACN,MAAO,IAOH,aAAa,CAAC,EAAsB,CAG1C,MADsB,qFACD,KAAK,CAAG,EAMvB,qBAAqB,EAA+D,CAC1F,IAAM,EAAmB,CAAC,EACpB,EAAqB,CAAC,EAG5B,IAAK,KAAK,aAAe,KAAK,cAAgB,4BAA8B,KAAK,cAAgB,oBAC/F,EAAS,KAAK,uIAAkC,EAC3C,QAAI,KAAK,YAAY,OAAS,GACnC,EAAS,KAAK,yIAAmD,EAInE,IAAK,KAAK,eACR,EAAO,KAAK,+CAAW,EAEvB,SAAK,KAAK,WAAW,KAAK,cAAc,EACtC,EAAO,KAAK,wDAAe,KAAK,gBAAgB,EAC3C,SAAK,KAAK,eAAe,SAAS,QAAQ,EAC/C,EAAS,KAAK,uHAA4B,EAK9C,GAAI,KAAK,aAAa,SAAW,EAC/B,EAAO,KAAK,oEAAY,EACnB,KAEL,IAAM,EAAU,IAAI,IACd,EAA2B,CAAC,EAyBlC,GAvBA,KAAK,aAAa,QAAQ,KAAQ,CAChC,GAAI,EAAQ,IAAI,EAAK,IAAI,EACvB,EAAe,KAAK,EAAK,IAAI,EAE7B,OAAQ,IAAI,EAAK,IAAI,EAIvB,IAAK,mBAAmB,KAAK,EAAK,IAAI,EACpC,EAAS,KAAK,6BAAQ,EAAK,kGAAuB,EAIpD,IAAK,KAAK,cAAc,EAAK,WAAW,EACtC,EAAO,KAAK,iBAAM,EAAK,uEAAqB,EAAK,aAAa,EAIhE,GAAI,EAAK,aAAe,EAAK,YAAY,OAAS,KAChD,EAAS,KAAK,iBAAM,EAAK,0EAAmB,EAE/C,EAEG,EAAe,OAAS,EAC1B,EAAO,KAAK,2DAAa,EAAe,KAAK,IAAI,GAAG,EAKxD,GAAI,KAAK,iBAAiB,OAAS,EAAG,CACpC,IAAM,EAAkB,KAAK,iBAAiB,OAAO,MAClD,KAAK,aAAa,KAAK,KAAQ,EAAK,OAAS,CAAI,CACpD,EAEA,GAAI,EAAgB,OAAS,EAC3B,EAAO,KAAK,qDAAY,EAAgB,KAAK,IAAI,GAAG,EAIxD,MAAO,CACL,QAAS,EAAO,SAAW,EAC3B,SACA,UACF,EAMM,iBAAiB,CAAC,EAAuB,CAC/C,IAAM,EAAQ,EAAQ,MAAM;AAAA,CAAI,EAC5B,EAA4C,KAEhD,QAAS,EAAI,EAAG,EAAI,EAAM,OAAQ,IAAK,CACrC,IAAM,EAAO,EAAM,GAAG,KAAK,EAG3B,GAAI,EAAK,WAAW,MAAM,IAAM,EAAK,SAAS,iBAAiB,EAAG,CAEhE,GAAI,GAAc,EAAW,YAC3B,KAAK,KAAK,IAAI,EAAW,YAAa,CAA2B,EAKnE,EAAa,CACX,YAFkB,EAAK,UAAU,CAAC,EAAE,KAAK,EAGzC,mBAAoB,GACpB,gBAAiB,GACjB,YAAa,GACb,cAAe,GACf,UAAW,GACX,QAAS,GACT,SAAU,GACV,iBAAkB,GAClB,gBAAiB,GACjB,eAAgB,GAChB,qBAAsB,GACtB,cAAe,GACf,cAAe,GACf,MAAO,CAAC,EACR,SAAU,CAAC,EACX,WAAY,EACZ,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,EAIF,GAAI,GAAc,EAAK,WAAW,MAAM,EAAG,CACzC,IAAM,EAAQ,EAAK,MAAM,uBAAuB,EAChD,GAAI,EAAO,CACT,KAAS,EAAK,GAAS,EACvB,OAAQ,OACD,2BACH,EAAW,mBAAqB,EAChC,UACG,iCACH,EAAW,gBAAkB,EAC7B,UACG,2BACH,EAAW,YAAc,EACzB,UACG,uCACH,EAAW,cAAgB,EAC3B,UACG,2BACH,EAAW,UAAY,EACvB,UACG,2BACH,EAAW,QAAU,EACrB,UACG,eACH,EAAW,SAAW,EACtB,UACG,+DACH,EAAW,iBAAmB,IAAU,SACxC,UACG,yDACH,EAAW,gBAAkB,IAAU,SACvC,UACG,2EACH,EAAW,eAAiB,IAAU,SACtC,UACG,uFACH,EAAW,qBAAuB,IAAU,SAC5C,UACG,qEACH,EAAW,cAAgB,IAAU,SACrC,UACG,2BACH,EAAW,cAAgB,EAC3B,SAOV,GAAI,GAAc,EAAW,YAC3B,KAAK,KAAK,IAAI,EAAW,YAAa,CAA2B,EAGnE,QAAQ,IAAI,mCAAS,KAAK,KAAK,iDAAc,EAG7C,KAAK,oBAAoB,EAMnB,mBAAmB,EAAS,CAClC,IAAM,EAAyB,IAAI,IAAI,KAAK,aAAa,IAAI,KAAQ,EAAK,IAAI,CAAC,EACzE,EAA6B,CAAC,EAGpC,QAAY,KAAgB,KAAK,KAC/B,IAAK,EAAuB,IAAI,CAAW,EACzC,EAAiB,KAAK,CAAW,EAKrC,GAAI,EAAiB,OAAS,EAC5B,QAAQ,IAAI,6BAAQ,EAAiB,0FAAyB,EAAiB,KAAK,IAAI,GAAG,EAC3F,EAAiB,QAAQ,KAAe,CACtC,KAAK,KAAK,OAAO,CAAW,EAC7B,EAOG,gBAAgB,EAAW,CAEjC,IAAM,EAAM,IAAI,IAAI,KAAK,cAAc,EACvC,MAAO,GAAG,EAAI,aAAa,EAAI,cAMzB,gBAAgB,CAAC,EAA0B,CACjD,GAAI,CAEF,IAAI,EADQ,IAAI,IAAI,CAAQ,EACT,SAEnB,GAAI,EAAS,WAAW,GAAG,EACzB,EAAW,EAAS,UAAU,CAAC,EAGjC,GAAI,EAAS,SAAS,GAAG,EACvB,EAAW,EAAS,MAAM,EAAG,EAAE,EAEjC,OAAO,EACP,MAAO,EAAO,CACd,MAAM,IAAI,MAAM,sCAAY,GAAU,QAO5B,WAAU,CAAC,EAAmC,CAC1D,GAAI,CACF,IAAM,EAAY,KAAK,iBAAiB,CAAQ,EAC1C,EAAS,GAAG,KAAK,iBAAiB,YAAY,mBAAmB,CAAS,IAE1E,EAAW,MAAM,MAAM,EAAQ,CACnC,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,CACF,CAAC,EAED,IAAK,EAAS,GACZ,MAAM,IAAI,MAAM,iFAAoB,EAAS,QAAQ,EAIvD,OADkB,MAAM,EAAS,KAAK,GACrB,GACjB,MAAO,EAAY,CACnB,MAAM,IAAI,MAAM,2CAAY,EAAM,SAAS,GAOvC,cAAc,CAAC,EAAiB,EAAsB,CAC5D,GAAI,CACF,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,IAAI,6BAAQ,GAAS,CAAC,EAElD,IAAM,EAAS,EAAS,EAAS,CAC/B,IAAK,GAAO,QAAQ,IAAI,EACxB,SAAU,QACV,MAAO,MACT,CAAC,EACD,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,IAAI,sCAAO,CAAC,EAExC,OAAO,EAAO,SAAS,EAAE,KAAK,EAC9B,MAAO,EAAY,CAEnB,MADA,QAAQ,IAAI,EAAc,MAAM,yCAAU,GAAS,CAAC,EAC9C,IAAI,MAAM,yCAAU;AAAA,4BAAkB,EAAM,SAAS,GAOvD,0BAA0B,CAAC,EAAiB,EAAsB,CACxE,GAAI,CACF,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,IAAI,6BAAQ,GAAS,CAAC,EAElD,IAAM,EAAS,EAAS,EAAS,CAC/B,IAAK,GAAO,QAAQ,IAAI,EACxB,SAAU,QACV,MAAO,KAAK,UAAY,OAAS,SACnC,CAAC,EACD,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,IAAI,sCAAO,CAAC,EAExC,OAAO,EAAS,EAAO,SAAS,EAAE,KAAK,EAAI,GAC3C,MAAO,EAAY,CAEnB,MADA,QAAQ,IAAI,EAAc,MAAM,yCAAU,GAAS,CAAC,EAC9C,IAAI,MAAM,yCAAU;AAAA,4BAAkB,EAAM,SAAS,GAOvD,gCAAgC,CAAC,EAAiB,EAAsE,CAC9H,GAAI,CACF,QAAQ,IAAI,EAAc,IAAI,6BAAQ,GAAS,CAAC,EAChD,IAAM,EAAS,EAAS,EAAS,CAC/B,IAAK,GAAO,QAAQ,IAAI,EACxB,SAAU,QACV,MAAO,MACT,CAAC,EAED,OADA,QAAQ,IAAI,EAAc,IAAI,sCAAO,CAAC,EAC/B,CAAE,QAAS,GAAM,OAAQ,EAAO,SAAS,EAAE,KAAK,CAAE,EACzD,MAAO,EAAY,CACnB,IAAM,EAAe,EAAM,SAAW,GAGtC,GAAI,EAAa,SAAS,4BAA4B,GAClD,EAAa,SAAS,kBAAkB,GACxC,EAAa,SAAS,qBAAqB,GAC3C,EAAa,SAAS,gBAAgB,GACtC,EAAa,SAAS,mBAAmB,GACzC,EAAa,SAAS,aAAa,GACnC,EAAa,SAAS,YAAY,GAClC,EAAa,SAAS,YAAY,GAClC,EAAa,SAAS,uCAAuC,GAC7D,EAAa,SAAS,iBAAiB,GACvC,EAAa,SAAS,2BAA2B,GACjD,EAAa,SAAS,qBAAqB,GAC3C,EAAa,SAAS,eAAe,GACrC,EAAa,SAAS,kBAAkB,GACxC,EAAa,SAAS,KAAK,GAC3B,EAAa,SAAS,uBAAuB,GAC7C,EAAa,SAAS,kBAAkB,GACxC,EAAa,SAAS,0BAA0B,GAChD,EAAa,SAAS,uBAAuB,GAC7C,EAAa,SAAS,aAAa,GACnC,EAAa,SAAS,6BAA6B,GACnD,EAAa,SAAS,uBAAuB,EAG/C,OAFA,QAAQ,IAAI,EAAc,QAAQ,+BAAU,GAAc,CAAC,EAC3D,QAAQ,IAAI,EAAc,KAAK,gIAAsB,CAAC,EAC/C,CAAE,QAAS,GAAM,OAAQ,GAAI,QAAS,CAAa,EAI5D,GAAI,EAAa,SAAS,gCAAgC,GACtD,EAAa,SAAS,yBAAyB,GAC/C,EAAa,SAAS,eAAe,GACrC,EAAa,SAAS,eAAe,GACrC,EAAa,SAAS,mCAAmC,GACzD,EAAa,SAAS,2BAA2B,GACjD,EAAa,SAAS,iCAAiC,GACvD,EAAa,SAAS,yBAAyB,EAAG,CACpD,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,QAAQ,0FAAmB,CAAC,EACtD,QAAQ,IAAI,EAAc,KAAK,gIAAsB,CAAC,EAExD,MAAO,CAAE,QAAS,GAAM,OAAQ,GAAI,QAAS,oHAAqB,EAKpE,MADA,QAAQ,IAAI,EAAc,MAAM,yCAAU,GAAS,CAAC,EAC9C,IAAI,MAAM,yCAAU;AAAA,4BAAkB,GAAc,GAOtD,oCAAoC,CAAC,EAAiB,EAAsE,CAClI,GAAI,CACF,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,IAAI,6BAAQ,GAAS,CAAC,EAElD,IAAM,EAAS,EAAS,EAAS,CAC/B,IAAK,GAAO,QAAQ,IAAI,EACxB,SAAU,QACV,MAAO,KAAK,UAAY,OAAS,SACnC,CAAC,EACD,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,IAAI,sCAAO,CAAC,EAExC,MAAO,CAAE,QAAS,GAAM,OAAQ,EAAS,EAAO,SAAS,EAAE,KAAK,EAAI,EAAG,EACvE,MAAO,EAAY,CAEnB,IAAM,EAAe,EAAM,SAAW,GAChC,EAAS,EAAM,OAAS,EAAM,OAAO,SAAS,EAAI,GAClD,EAAS,EAAM,OAAS,EAAM,OAAO,SAAS,EAAI,GAClD,EAAmB,GAAG;AAAA,EAAiB;AAAA,EAAW,IAAS,KAAK,EAGtE,GAAI,EAAiB,SAAS,4BAA4B,GACtD,EAAiB,SAAS,kBAAkB,GAC5C,EAAiB,SAAS,qBAAqB,GAC/C,EAAiB,SAAS,gBAAgB,GAC1C,EAAiB,SAAS,mBAAmB,GAC7C,EAAiB,SAAS,aAAa,GACvC,EAAiB,SAAS,YAAY,GACtC,EAAiB,SAAS,YAAY,GACtC,EAAiB,SAAS,uCAAuC,GACjE,EAAiB,SAAS,iBAAiB,GAC3C,EAAiB,SAAS,2BAA2B,GACrD,EAAiB,SAAS,qBAAqB,GAC/C,EAAiB,SAAS,eAAe,GACzC,EAAiB,SAAS,kBAAkB,GAC5C,EAAiB,SAAS,KAAK,GAC/B,EAAiB,SAAS,uBAAuB,GACjD,EAAiB,SAAS,kBAAkB,GAC5C,EAAiB,SAAS,0BAA0B,GACpD,EAAiB,SAAS,uBAAuB,GACjD,EAAiB,SAAS,aAAa,GACvC,EAAiB,SAAS,6BAA6B,GACvD,EAAiB,SAAS,uBAAuB,GACjD,EAAO,SAAS,4BAA4B,GAC5C,EAAO,SAAS,kBAAkB,GAClC,EAAO,SAAS,qBAAqB,GACrC,EAAO,SAAS,gBAAgB,GAChC,EAAO,SAAS,mBAAmB,GACnC,EAAO,SAAS,aAAa,GAC7B,EAAO,SAAS,YAAY,GAC5B,EAAO,SAAS,iBAAiB,GACjC,EAAO,SAAS,qBAAqB,GACrC,EAAO,SAAS,eAAe,GAC/B,EAAO,SAAS,kBAAkB,GAClC,EAAO,SAAS,KAAK,GACrB,EAAO,SAAS,uBAAuB,GACvC,EAAO,SAAS,kBAAkB,GAClC,EAAO,SAAS,0BAA0B,GAC1C,EAAO,SAAS,uBAAuB,GACvC,EAAO,SAAS,aAAa,GAC7B,EAAO,SAAS,6BAA6B,GAC7C,EAAO,SAAS,uBAAuB,EAAG,CAC5C,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,QAAQ,wHAAwB,CAAC,EAC3D,QAAQ,IAAI,EAAc,KAAK,gIAAsB,CAAC,EAExD,MAAO,CAAE,QAAS,GAAM,OAAQ,EAAQ,QAAS,kJAA0B,EAI7E,GAAI,EAAiB,SAAS,gCAAgC,GAC1D,EAAiB,SAAS,yBAAyB,GACnD,EAAiB,SAAS,eAAe,GACzC,EAAiB,SAAS,eAAe,GACzC,EAAiB,SAAS,mCAAmC,GAC7D,EAAiB,SAAS,2BAA2B,GACrD,EAAiB,SAAS,iCAAiC,GAC3D,EAAiB,SAAS,yBAAyB,GACnD,EAAO,SAAS,gCAAgC,GAChD,EAAO,SAAS,yBAAyB,GACzC,EAAO,SAAS,eAAe,GAC/B,EAAO,SAAS,eAAe,EAAG,CACpC,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,QAAQ,0FAAmB,CAAC,EACtD,QAAQ,IAAI,EAAc,KAAK,gIAAsB,CAAC,EAExD,MAAO,CAAE,QAAS,GAAM,OAAQ,EAAQ,QAAS,oHAAqB,EAIxE,IAAK,KAAK,UACR,QAAQ,IAAI,EAAc,MAAM,yCAAU,GAAS,CAAC,EAEtD,MAAM,IAAI,MAAM,yCAAU;AAAA,4BAAkB,GAAkB,QAOpD,sBAAqB,CAAC,EAAuF,CACzH,GAAI,CACF,QAAQ,IAAI,kEAAe,GAAU,EAGrC,IAAM,EAAY,KAAK,iBAAiB,KAAK,cAAc,EACrD,EAAS,GAAG,KAAK,iBAAiB,cAAc,mBAAmB,EAAY,IAAM,CAAQ,IAE7F,EAAW,MAAM,MAAM,EAAQ,CACnC,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,CACF,CAAC,EAED,GAAI,EAAS,SAAW,IAAK,CAC3B,IAAM,EAAc,MAAM,EAAS,KAAK,EAKxC,GAJA,QAAQ,IAAI,gDAAY,GAAU,EAGlB,MAAM,KAAK,yBAAyB,EAAY,EAAE,EACrD,CAMX,GALA,QAAQ,IAAI,EAAc,QAAQ,yCAAU,EAAc,UAAU,CAAQ,wCAAU,CAAC,GAChE,MAAM,KAAK,uBAChC,6BAAQ;AAAA,uCACV,EAGE,MAAM,IAAI,MAAM,kDAAS,EAQ3B,OALA,QAAQ,IAAI,EAAc,KAAK,0EAAa,CAAC,EAKtC,CAAE,OAAQ,GAAM,QAAS,GAAM,UAHpB,KAAK,eAAe,WAAW,UAAU,EACvD,EAAY,iBACZ,EAAY,eACgC,EAGlD,MAAO,CAAE,OAAQ,GAAM,QAAS,EAAM,EACjC,QAAI,EAAS,SAAW,IAE7B,OADA,QAAQ,IAAI,wEAAgB,GAAU,EAC/B,CAAE,OAAQ,EAAM,EAEvB,WAAM,IAAI,MAAM,uFAAqB,EAAS,QAAQ,EAExD,MAAO,EAAY,CAEnB,MADA,QAAQ,IAAI,oFAAkB,EAAM,SAAS,EACvC,QAOI,yBAAwB,CAAC,EAAqC,CAC1E,GAAI,CAEF,IAAM,EAAa,GAAG,KAAK,iBAAiB,cAAc,uBACpD,EAAkB,MAAM,MAAM,EAAY,CAC9C,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,CACF,CAAC,EAED,GAAI,EAAgB,SAAW,IAE7B,OADgB,MAAM,EAAgB,KAAK,GAC5B,SAAW,EACrB,QAAI,EAAgB,SAAW,IAEpC,MAAO,GAGT,MAAO,GACP,MAAO,EAAY,CAGnB,OAFA,QAAQ,IAAI,gGAAoB,EAAM,SAAS,EAExC,SAOG,uBAAsB,CAAC,EAAmC,CACtE,OAAO,IAAI,QAAQ,CAAC,IAAY,CAC9B,IAAM,EAAc,kBAAgB,CAClC,MAAO,QAAQ,MACf,OAAQ,QAAQ,MAClB,CAAC,EAED,EAAG,SAAS,EAAS,CAAC,IAAW,CAC/B,EAAG,MAAM,EACT,IAAM,EAAmB,EAAO,YAAY,EAAE,KAAK,EACnD,EAAQ,IAAqB,KAAO,IAAqB,KAAK,EAC/D,EACF,EAMK,sBAAsB,CAAC,EAAqB,CAClD,IAAM,EAAQ,EAAI,MAAM,kBAAkB,EAC1C,GAAI,EACF,OAAO,EAAM,GAIf,IAAM,EAAW,EAAI,MAAM,GAAG,EAC9B,OAAO,EAAS,EAAS,OAAS,GAM5B,uBAAuB,CAAC,EAA2B,CAKzD,GAJA,QAAQ,IAAI,wEAAgB,EAAK,MAAM,EACvC,QAAQ,IAAI,EAAc,KAAK,mCAAS,EAAc,IAAI,EAAK,WAAW,GAAG,CAAC,GAGzE,EAAW,KAAK,OAAO,EAC1B,EAAU,KAAK,QAAS,CAAE,UAAW,EAAK,CAAC,EAC3C,QAAQ,IAAI,EAAc,IAAI,yCAAU,KAAK,SAAS,CAAC,EAIzD,IAAM,EAAiB,KAAK,uBAAuB,EAAK,WAAW,EAC7D,EAAY,IAAI,KAAK,EAAE,YAAY,EAAE,QAAQ,QAAS,GAAG,EACzD,EAAe,KAAK,OAAO,EAAE,SAAS,EAAE,EAAE,UAAU,EAAG,CAAC,EACxD,EAAe,GAAG,KAAkB,KAAa,QACjD,EAAgB,OAAK,KAAK,QAAS,CAAY,EAIrD,GAHA,QAAQ,IAAI,EAAc,KAAK,6BAAQ,EAAc,IAAI,CAAQ,GAAG,CAAC,EAGjE,EAAW,CAAQ,EACrB,QAAQ,IAAI,EAAc,QAAQ,iEAAc,EAAc,IAAI,CAAQ,GAAG,CAAC,EAC9E,EAAO,EAAU,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAGnD,QAAQ,IAAI,EAAc,SAAS,yCAAU,CAAC,EAC9C,IAAM,EAAe,sBAAsB,EAAK,gBAAgB,KAIhE,OAHA,KAAK,2BAA2B,CAAY,EAE5C,QAAQ,IAAI,EAAc,QAAQ,2DAAa,EAAc,IAAI,CAAQ,GAAG,CAAC,EACtE,OAMK,uBAAsB,CAAC,EAAoC,CACvE,GAAI,CACF,QAAQ,IAAI,EAAc,KAAK,qDAAY,EAAc,UAAU,EAAK,IAAI,GAAG,CAAC,EAGhF,IAAM,EAAU,MAAM,KAAK,WAAW,KAAK,cAAc,EACnD,EAAS,GAAG,KAAK,iBAAiB,aAElC,EAAc,CAClB,KAAM,EAAK,KACX,KAAM,EAAK,KACX,YAAa,EAAK,aAAe,GACjC,aAAc,EACd,WAAY,WACZ,uBAAwB,GACxB,eAAgB,GAChB,uBAAwB,GACxB,aAAc,GACd,iBAAkB,EACpB,EAEM,EAAW,MAAM,MAAM,EAAQ,CACnC,OAAQ,OACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CAAW,CAClC,CAAC,EAED,IAAK,EAAS,GAAI,CAChB,IAAM,EAAY,MAAM,EAAS,KAAK,EACtC,MAAM,IAAI,MAAM,qEAAkB,EAAS,yCAAgB,GAAW,EAGxE,IAAM,EAAc,MAAM,EAAS,KAAK,EAElC,EAAY,KAAK,eAAe,WAAW,UAAU,EACvD,EAAY,iBACZ,EAAY,gBAGhB,OADA,QAAQ,IAAI,EAAc,QAAQ,qDAAY,EAAc,IAAI,CAAS,GAAG,CAAC,EACtE,EACP,MAAO,EAAY,CAEnB,MADA,QAAQ,IAAI,EAAc,MAAM,qDAAY,EAAM,SAAS,CAAC,EACtD,GAOF,kBAAkB,CAAC,EAAkB,EAAkE,CAC7G,QAAQ,IAAI,EAAc,KAAK,uEAAe,CAAC,EAC/C,QAAQ,IAAI,EAAc,KAAK,yCAAU,EAAc,IAAI,CAAS,GAAG,CAAC,EACxE,QAAQ,IAAI,EAAc,KAAK,6BAAQ,EAAc,IAAI,CAAQ,GAAG,CAAC,EAErE,IAAM,EAAc,QAAQ,IAAI,EAC1B,EAAqB,CAAC,EACxB,EAAc,GAElB,GAAI,CAEF,QAAQ,IAAI,EAAc,SAAS,+CAAW,GAAU,CAAC,EACzD,QAAQ,MAAM,CAAQ,EAGtB,QAAQ,IAAI,EAAc,SAAS,iEAAc,CAAC,EAClD,IAAM,EAAgB,8BAA8B,KACpD,KAAK,eAAe,CAAa,EAGjC,QAAQ,IAAI,EAAc,SAAS,uEAAe,CAAC,EACnD,IAAM,EAAc,oBACd,EAAa,KAAK,qCAAqC,CAAW,EAExE,GAAI,EAAW,QAAS,CACtB,EAAc,GACd,IAAM,EAAa,uEAAe,EAAW,UAC7C,EAAS,KAAK,CAAU,EACxB,QAAQ,IAAI,EAAc,KAAK,gIAAsB,CAAC,EAEtD,aAAQ,IAAI,EAAc,QAAQ,sCAAO,CAAC,EAG5C,MAAO,CAAE,cAAa,SAAU,EAAc,EAAW,MAAU,SACnE,CAEA,QAAQ,IAAI,EAAc,SAAS,kDAAS,CAAC,EAC7C,QAAQ,MAAM,CAAW,QAOf,4BAA2B,CAAC,EAAkB,EAAoC,CAC9F,GAAI,CAGF,GAFA,QAAQ,IAAI,EAAc,KAAK,qDAAY,EAAc,KAAK,CAAQ,GAAG,CAAC,GAErE,GAAe,EAAY,KAAK,IAAM,GAAI,CAC7C,QAAQ,IAAI,EAAc,QAAQ,wDAAU,CAAC,EAC7C,OAKF,IAAM,EAAc,GADF,KAAK,iBAAiB,KAAK,cAAc,KACvB,IAC9B,EAAS,GAAG,KAAK,iBAAiB,cAAc,mBAAmB,CAAW,IAE9E,EAAa,CACjB,YAAa,EAAY,KAAK,CAChC,EAEM,EAAW,MAAM,MAAM,EAAQ,CACnC,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,EACA,KAAM,KAAK,UAAU,CAAU,CACjC,CAAC,EAED,IAAK,EAAS,GAAI,CAChB,IAAM,EAAY,MAAM,EAAS,KAAK,EACtC,MAAM,IAAI,MAAM,iFAAoB,EAAS,yCAAgB,GAAW,EAG1E,QAAQ,IAAI,EAAc,QAAQ,qDAAY,EAAc,YAAY,EAAY,KAAK,CAAC,GAAG,CAAC,EAC9F,MAAO,EAAY,CAEnB,MADA,QAAQ,IAAI,EAAc,MAAM,qDAAY,EAAM,SAAS,CAAC,EACtD,GAOF,oBAAoB,CAAC,EAAmB,EAAwB,CAMtE,GALA,QAAQ,IAAI,EAAc,KAAK,mFAAiB,EAAc,KAAK,CAAQ,GAAG,CAAC,EAC/E,QAAQ,IAAI,EAAc,KAAK,yCAAU,EAAc,IAAI,CAAS,GAAG,CAAC,EACxE,QAAQ,IAAI,EAAc,KAAK,6BAAQ,EAAc,IAAI,CAAQ,GAAG,CAAC,EAGjE,EAAW,CAAQ,EACrB,QAAQ,IAAI,EAAc,QAAQ,qDAAY,EAAc,IAAI,CAAQ,GAAG,CAAC,EAC5E,EAAO,EAAU,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAGnD,QAAQ,IAAI,EAAc,SAAS,iEAAc,CAAC,EAClD,IAAM,EAAe,cAAc,OAAe,KAClD,KAAK,2BAA2B,CAAY,EAE5C,QAAQ,IAAI,EAAc,QAAQ,2DAAa,EAAc,KAAK,CAAQ,GAAG,CAAC,EAMxE,yBAAyB,EAAS,CAExC,GAAI,KAAK,YACP,aAAa,KAAK,WAAW,EAI/B,KAAK,YAAc,WAAW,IAAM,CAClC,KAAK,kBAAkB,EACvB,KAAK,YAAc,MAClB,IAAI,EAMF,sBAAsB,EAAS,CACpC,GAAI,KAAK,YACP,aAAa,KAAK,WAAW,EAC7B,KAAK,YAAc,KAErB,KAAK,kBAAkB,EAMjB,kBAAkB,CAAC,EAA0B,CAKnD,GAHA,EAAI,YAAc,IAAI,KAAK,EAAE,YAAY,GAGpC,EAAI,MAAO,EAAI,MAAQ,CAAC,EAC7B,IAAK,EAAI,SAAU,EAAI,SAAW,CAAC,EACnC,GAAI,EAAI,aAAe,OAAW,EAAI,WAAa,EACnD,IAAK,EAAI,WAAa,EAAI,cACxB,EAAI,UAAY,UAGlB,KAAK,KAAK,IAAI,EAAI,YAAa,CAAG,EAElC,KAAK,0BAA0B,EAMzB,kBAAkB,EAAW,CACnC,IAAM,EAAY,IAAI,KAAK,EAAE,YAAY,EAAE,QAAQ,QAAS,GAAG,EACzD,EAAa,KAAK,aAAa,QAAQ,QAAS,WAAW,MAAc,EAE/E,GAAI,CACF,IAAM,EAAU,EAAa,KAAK,aAAc,OAAO,EAGvD,OAFA,EAAc,EAAY,EAAS,OAAO,EAC1C,QAAQ,IAAI,EAAc,IAAI,wEAAqB,WAAS,CAAU,GAAG,CAAC,EACnE,EACP,MAAO,EAAO,CAEd,OADA,QAAQ,IAAI,EAAc,QAAQ,uDAAc,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GAAG,CAAC,EAClG,IAOH,iBAAiB,EAAS,CAChC,GAAI,CACF,IAAM,EAAW,UAAQ,KAAK,YAAY,EACpC,EAAgB,WAAS,KAAK,aAAc,KAAK,EAGhD,EAFO,EAAY,CAAG,EAGzB,OAAO,CAAC,IAAiB,EAAK,WAAW,GAAG,WAAkB,GAAK,EAAK,SAAS,KAAK,CAAC,EACvF,IAAI,CAAC,KAAkB,CACtB,KAAM,EACN,KAAW,OAAK,EAAK,CAAI,EACzB,KAAM,EAAc,OAAK,EAAK,CAAI,CAAC,EAAE,KACvC,EAAE,EACF,KAAK,CAAC,EAAQ,IAAW,EAAE,KAAK,QAAQ,EAAI,EAAE,KAAK,QAAQ,CAAC,EAG/D,GAAI,EAAY,OAAS,EACD,EAAY,MAAM,CAAC,EAC3B,QAAQ,CAAC,IAAc,CACnC,GAAI,CACF,EAAO,EAAK,IAAI,EAChB,QAAQ,IAAI,EAAc,IAAI,6DAAe,EAAK,MAAM,CAAC,EACzD,MAAO,EAAO,CACd,QAAQ,IAAI,EAAc,QAAQ,uDAAc,EAAK,MAAM,CAAC,GAE/D,EAEH,MAAO,EAAO,CAEd,QAAQ,IAAI,EAAc,IAAI,4HAAuB,CAAC,GAWlD,yBAAyB,EAAS,CACxC,GAAI,CACF,IAAM,EAAa,QAAQ,IAAI,EAG/B,IAAK,EAAW,CAAU,EAAG,CAC3B,QAAQ,KAAK,EAAc,QAAQ,kGAAiB,CAAC,EACrD,OAGF,IAAM,EAAQ,EAAY,CAAU,EAC9B,EAAM,IAAI,KAAK,EAAE,QAAQ,EACzB,EAAW,SACX,EAAY,QAGZ,EAAW,EACd,OAAO,CAAC,IAAiB,CACxB,GAAI,CACF,OAAO,EAAK,WAAW,iBAAiB,GACjC,EAAc,OAAK,EAAY,CAAI,CAAC,EAAE,YAAY,EACzD,KAAM,CACN,MAAO,IAEV,EACA,IAAI,CAAC,IAAgB,CACpB,IAAM,EAAe,OAAK,EAAY,CAAG,EACzC,GAAI,CACF,IAAM,EAAO,EAAS,CAAO,EAGzB,EAAU,GACV,EAAY,EAChB,GAAI,CAEF,EADoB,EAAY,CAAO,EACf,OACxB,EAAU,IAAc,EACxB,MAAO,EAAO,CACd,QAAQ,KAAK,EAAc,QAAQ,4BAAO,qCAAc,GAAO,CAAC,EAGlE,MAAO,CACL,KAAM,EACN,KAAM,EACN,KAAM,EAAK,MACX,IAAK,EAAM,EAAK,MAAM,QAAQ,EAC9B,QAAS,EACT,UAAW,EACX,KAAM,KAAK,iBAAiB,CAAO,CACrC,EACA,MAAO,EAAO,CAEd,OADA,QAAQ,KAAK,EAAc,QAAQ,4BAAO,qCAAc,GAAO,CAAC,EACzD,MAEV,EACA,OAAO,CAAC,IAAwC,IAAQ,IAAI,EAC5D,KAAK,CAAC,EAAG,IAAM,EAAE,KAAK,QAAQ,EAAI,EAAE,KAAK,QAAQ,CAAC,EAErD,GAAI,EAAS,SAAW,EAAG,CACzB,QAAQ,IAAI,EAAc,IAAI,0EAAa,CAAC,EAC5C,OAGF,QAAQ,IAAI,EAAc,KAAK,gBAAK,EAAS,uCAAc,CAAC,EAG5D,IAAM,EAAY,EAAS,OAAO,KAAO,EAAI,OAAO,EAC9C,EAAU,EAAS,OAAO,KAAO,EAAI,IAAM,IAAa,EAAI,OAAO,EACnE,EAAc,EAAS,OAAO,KAAO,EAAI,IAAM,IAAc,EAAI,OAAO,EACxE,EAAa,EAAS,MAAM,CAAC,EAAE,OAAO,MAAQ,EAAI,SAAW,EAAI,IAAM,CAAQ,EAG/E,EAAe,CACnB,GAAG,EACH,GAAG,EACH,GAAG,EACH,GAAG,EAAY,OAAO,MAAQ,EAAQ,SAAS,CAAG,IAAM,EAAW,SAAS,CAAG,CAAC,CAClF,EAGM,EAAqB,MAAM,KAAK,IAAI,IAAI,CAAY,CAAC,EAE3D,GAAI,EAAmB,SAAW,EAAG,CACnC,QAAQ,IAAI,EAAc,IAAI,8GAAmB,CAAC,EAClD,OAIF,GADA,QAAQ,IAAI,EAAc,KAAK,yCAAU,EAAmB,wCAAe,CAAC,EACxE,EAAU,OAAS,EACrB,QAAQ,IAAI,EAAc,IAAI,OAAO,EAAU,iCAAY,CAAC,EAE9D,GAAI,EAAQ,OAAS,EACnB,QAAQ,IAAI,EAAc,IAAI,OAAO,EAAQ,2DAAkB,CAAC,EAElE,GAAI,EAAY,OAAS,EACvB,QAAQ,IAAI,EAAc,IAAI,OAAO,EAAY,OAAO,MAAQ,EAAQ,SAAS,CAAG,CAAC,EAAE,0DAAiB,CAAC,EAE3G,GAAI,EAAW,OAAS,EACtB,QAAQ,IAAI,EAAc,IAAI,OAAO,EAAW,qEAAkB,CAAC,EAGrE,IAAI,EAAe,EACf,EAAe,EAkBnB,GAhBA,EAAmB,QAAQ,KAAO,CAChC,GAAI,CACF,IAAM,EAAW,KAAK,MAAM,EAAI,IAAM,EAAY,EAAE,EAAI,GAClD,EAAW,EAAI,KAAO,EAAI,KAAK,KAAK,YAAY,EAAI,IAAI,KAAO,YAC/D,EAAU,EAAW,EAAI,kBAAS,KAAK,YAE7C,EAAO,EAAI,KAAM,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EACjD,QAAQ,IAAI,EAAc,IAAI,gCAAW,EAAI,OAAO,IAAW,GAAS,CAAC,EACzE,IACA,MAAO,EAAO,CACd,QAAQ,KAAK,EAAc,QAAQ,sCAAY,EAAI,UAAU,GAAO,CAAC,EACrE,KAEH,EAGG,EAAe,EACjB,QAAQ,IAAI,EAAc,QAAQ,mCAAS,kCAAoB,CAAC,EAElE,GAAI,EAAe,EACjB,QAAQ,KAAK,EAAc,QAAQ,UAAI,8CAAsB,CAAC,EAGhE,MAAO,EAAO,CACd,QAAQ,KAAK,EAAc,QAAQ,2DAAa,GAAO,CAAC,GAOpD,gBAAgB,CAAC,EAAyB,CAChD,GAAI,CACF,IAAI,EAAY,EACV,EAAQ,EAAY,CAAO,EAEjC,QAAW,KAAQ,EAAO,CACxB,IAAM,EAAgB,OAAK,EAAS,CAAI,EAClC,EAAQ,EAAS,CAAQ,EAE/B,GAAI,EAAM,YAAY,EACpB,GAAa,KAAK,iBAAiB,CAAQ,EAE3C,QAAa,EAAM,KAIvB,OAAO,EACP,MAAO,EAAO,CACd,MAAO,IAOH,WAAW,CAAC,EAAuB,CACzC,GAAI,IAAU,EAAG,MAAO,MAExB,IAAM,EAAI,KACJ,EAAQ,CAAC,IAAK,KAAM,KAAM,IAAI,EAC9B,EAAI,KAAK,MAAM,KAAK,IAAI,CAAK,EAAI,KAAK,IAAI,CAAC,CAAC,EAElD,OAAO,YAAY,EAAQ,KAAK,IAAI,EAAG,CAAC,GAAG,QAAQ,CAAC,CAAC,EAAI,IAAM,EAAM,GAM/D,iBAAiB,EAAS,CAChC,GAAI,CAMF,GAJ2B,MAAM,KAAK,KAAK,KAAK,OAAO,CAAC,EAAE,KAAK,KAC7D,EAAI,eAAiB,EAAI,aAC3B,EAGE,KAAK,mBAAmB,EAI1B,IAAM,EAAW,UAAQ,KAAK,YAAY,EAC1C,IAAK,EAAW,CAAG,EACjB,EAAU,EAAK,CAAE,UAAW,EAAK,CAAC,EAIpC,IAAI,EACJ,GAAI,EAAW,KAAK,YAAY,EAC9B,EAAU,EAAa,KAAK,aAAc,OAAO,EAEjD,aAAQ,IAAI,2GAA0B,EACtC,EAAU;AAAA;AAAA,iBAGZ,IAAM,EAAQ,EAAQ,MAAM;AAAA,CAAI,EAG5B,EAAgB,EAAM,UAAU,KAAQ,EAAK,SAAS,iBAAM,CAAC,EAC7D,EAEJ,GAAI,IAAkB,GAEpB,QAAQ,IAAI,+GAAoB,EAChC,EAAiB,CAAC,GAAG,EAAO,GAAI,iBAAM,EAGtC,OAAiB,EAAM,MAAM,EAAG,EAAgB,CAAC,EAInD,IAAM,EAAqB,CAAC,EAAE,EAGxB,EAAyB,IAAI,IAAI,KAAK,aAAa,IAAI,KAAQ,EAAK,IAAI,CAAC,EAC3E,EAAiB,EAErB,QAAW,KAAQ,KAAK,aAAc,CACpC,IAAM,EAAM,KAAK,KAAK,IAAI,EAAK,IAAI,EACnC,GAAI,GAAO,EAAuB,IAAI,EAAK,IAAI,EAAG,CAehD,GAdA,EAAS,KAAK,OAAO,EAAI,aAAa,EACtC,EAAS,KAAK,mCAAc,EAAI,aAAa,EAC7C,EAAS,KAAK,mCAAc,EAAI,oBAAoB,EACpD,EAAS,KAAK,yCAAe,EAAI,iBAAiB,EAClD,EAAS,KAAK,mCAAc,EAAI,aAAa,EAC7C,EAAS,KAAK,+CAAgB,EAAI,eAAe,EACjD,EAAS,KAAK,mCAAc,EAAI,WAAW,EAC3C,EAAS,KAAK,mCAAc,EAAI,SAAS,EACzC,EAAS,KAAK,uBAAY,EAAI,UAAU,EACxC,EAAS,KAAK,uEAAoB,EAAI,iBAAmB,SAAM,UAAK,EACpE,EAAS,KAAK,iEAAmB,EAAI,gBAAkB,SAAM,UAAK,EAClE,EAAS,KAAK,mFAAsB,EAAI,eAAiB,SAAM,UAAK,EACpE,EAAS,KAAK,+FAAwB,EAAI,qBAAuB,SAAM,UAAK,EAC5E,EAAS,KAAK,6EAAqB,EAAI,cAAgB,SAAM,UAAK,EAC9D,EAAI,UAAY,EAAI,SAAS,OAAS,EACxC,EAAS,KAAK,mCAAc,EAAI,SAAS,KAAK,IAAI,GAAG,EAEvD,GAAI,EAAI,cACN,EAAS,KAAK,mCAAc,EAAI,eAAe,EAEjD,EAAS,KAAK,EAAE,EAChB,KAKJ,IAAM,EAAa,CAAC,GAAG,EAAgB,GAAG,CAAQ,EAAE,KAAK;AAAA,CAAI,EAG7D,EAAc,KAAK,aAAc,EAAY,OAAO,EAEpD,QAAQ,IAAI,mCAAS,gHAAmC,EAExD,MAAO,EAAY,CACnB,QAAQ,MAAM,gDAAY,EAAM,SAAS,GAOrC,mBAAmB,CACzB,EACA,EACA,EACA,EACA,EACA,EACM,CACN,IAAM,EAAM,KAAK,KAAK,IAAI,CAAW,EACrC,IAAK,EAAK,OAEV,IAAM,EAAoB,EAAI,MAAM,UAAU,KAAQ,EAAK,OAAS,CAAQ,EACtE,EAAM,IAAI,KAAK,EAAE,YAAY,EAEnC,GAAI,GAAqB,EAAG,CAE1B,IAAM,EAAO,EAAI,MAAM,GACjB,EAAY,EAAK,WAAa,EAEpC,EAAI,MAAM,GAAqB,IAC1B,EACH,SACA,QAAS,IAAW,aAAe,IAAW,UAAY,IAAW,UAAY,EAAM,EAAK,QAC5F,SAAU,IAAW,aAAe,IAAW,UAAY,IAAW,UAClE,IAAI,KAAK,CAAG,EAAE,QAAQ,EAAI,IAAI,KAAK,CAAS,EAAE,QAAQ,EACtD,EAAK,SACT,QACA,YACA,SAAU,GAAY,EAAK,UAAY,CAAC,CAC1C,EAGA,OAAI,MAAM,KAAK,CACb,KAAM,EACN,SACA,UAAW,IAAW,cAAgB,EAAM,OAC5C,QAAS,IAAW,aAAe,IAAW,UAAY,IAAW,UAAY,EAAM,OACvF,SAAU,IAAW,aAAe,IAAW,UAAY,IAAW,UAAY,EAAI,OACtF,QACA,YACA,SAAU,GAAY,CAAC,CACzB,CAAC,EAGH,KAAK,mBAAmB,CAAG,EAMrB,UAAU,CAAC,EAAqB,EAAuB,CAC7D,IAAM,EAAM,KAAK,KAAK,IAAI,CAAW,EACrC,IAAK,EAAK,OAEV,IAAK,EAAI,SAAS,SAAS,CAAO,EAChC,EAAI,SAAS,KAAK,CAAO,EACzB,KAAK,mBAAmB,CAAG,EAOvB,aAAa,CAAC,EAA2B,CAC/C,IAAM,EAAa,EAAM,YAAY,EAGrC,GAAI,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,OAAO,GAC3B,EAAW,SAAS,MAAM,GAC1B,EAAW,SAAS,MAAM,GAC1B,EAAW,SAAS,OAAO,GAC3B,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,sBAAsB,GAC1C,EAAW,SAAS,uBAAuB,GAC3C,EAAW,SAAS,6BAA6B,GACjD,EAAW,SAAS,mBAAmB,GACvC,EAAW,SAAS,uBAAuB,GAC3C,EAAW,SAAS,oBAAoB,GACxC,EAAW,SAAS,iBAAiB,GACrC,EAAW,SAAS,8CAA8C,GAClE,EAAW,SAAS,yBAAyB,GAC7C,EAAW,SAAS,sBAAsB,GAC1C,EAAW,SAAS,8BAA8B,GAClD,EAAW,SAAS,+BAA+B,GACnD,EAAW,SAAS,kBAAkB,GACtC,EAAW,SAAS,oBAAoB,GACxC,EAAW,SAAS,kBAAkB,GACtC,EAAW,SAAS,gBAAgB,GACpC,EAAW,SAAS,oBAAoB,EAC1C,MAAO,gBAIT,GAAI,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,MAAM,GAC1B,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,cAAc,GAClC,EAAW,SAAS,WAAW,GAC/B,EAAW,SAAS,aAAa,GACjC,EAAW,SAAS,qBAAqB,GACzC,EAAW,SAAS,uBAAuB,GAC3C,EAAW,SAAS,YAAY,GAChC,EAAW,SAAS,wBAAwB,GAC5C,EAAW,SAAS,6BAA6B,GACjD,EAAW,SAAS,6BAA6B,GACjD,EAAW,SAAS,eAAe,GACnC,EAAW,SAAS,eAAe,GACnC,EAAW,SAAS,oBAAoB,EAC1C,MAAO,gBAIT,GAAI,EAAW,SAAS,SAAS,GAC7B,EAAW,SAAS,SAAS,GAC7B,EAAW,SAAS,YAAY,GAChC,EAAW,SAAS,KAAK,GACzB,EAAW,SAAS,WAAW,GAC/B,EAAW,SAAS,cAAc,GAClC,EAAW,SAAS,YAAY,GAChC,EAAW,SAAS,WAAW,GAC/B,EAAW,SAAS,gBAAgB,GACpC,EAAW,SAAS,wBAAwB,GAC5C,EAAW,SAAS,qBAAqB,GACzC,EAAW,SAAS,sBAAsB,GAC1C,EAAW,SAAS,wBAAwB,GAC5C,EAAW,SAAS,wBAAwB,GAC5C,EAAW,SAAS,sCAAsC,EAC5D,MAAO,UAIT,GAAI,EAAW,SAAS,OAAO,GAC3B,EAAW,SAAS,yBAAyB,GAC7C,EAAW,SAAS,uCAAuC,GAC3D,EAAW,SAAS,eAAe,GACnC,EAAW,SAAS,eAAe,GACnC,EAAW,SAAS,qBAAqB,GACzC,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,2BAA2B,GAC/C,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,mBAAmB,GACvC,EAAW,SAAS,OAAO,GAC3B,EAAW,SAAS,yBAAyB,GAC7C,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,qBAAqB,GACzC,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,yBAAyB,GAC7C,EAAW,SAAS,WAAW,GAC/B,EAAW,SAAS,gBAAgB,GACpC,EAAW,SAAS,kBAAkB,GACtC,EAAW,SAAS,kBAAkB,EACxC,MAAO,aAIT,GAAI,EAAW,SAAS,YAAY,GAChC,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,yBAAyB,GAC7C,EAAW,SAAS,gBAAgB,GACpC,EAAW,SAAS,kBAAkB,GACtC,EAAW,SAAS,qBAAqB,GACzC,EAAW,SAAS,0BAA0B,GAC9C,EAAW,SAAS,yBAAyB,GAC7C,EAAW,SAAS,cAAc,GAClC,EAAW,SAAS,4BAA4B,GAChD,EAAW,SAAS,uBAAuB,EAC7C,MAAO,aAIT,GAAI,EAAW,SAAS,YAAY,GAChC,EAAW,SAAS,SAAS,GAC7B,EAAW,SAAS,WAAW,GAC/B,EAAW,SAAS,QAAQ,GAC5B,EAAW,SAAS,aAAa,GACjC,EAAW,SAAS,sBAAsB,GAC1C,EAAW,SAAS,kBAAkB,GACtC,EAAW,SAAS,mBAAmB,GACvC,EAAW,SAAS,SAAS,GAC7B,EAAW,SAAS,iBAAiB,GACrC,EAAW,SAAS,aAAa,GACjC,EAAW,SAAS,cAAc,GAClC,EAAW,SAAS,6BAA6B,GACjD,EAAW,SAAS,gBAAgB,GACpC,EAAW,SAAS,kBAAkB,EACxC,MAAO,aAGT,MAAO,UAMD,uBAAuB,CAAC,EAAe,EAA+B,CAC5E,IAAM,EAAc,EAAM,OAAS,IAAM,EAAM,UAAU,EAAG,GAAG,EAAI,MAAQ,EACrE,EAAa,EAAY,YAAY,EAE3C,OAAQ,OACD,gBACH,GAAI,EAAW,SAAS,OAAO,EAC7B,MAAO,iCAAY,8IACd,QAAI,EAAW,SAAS,MAAM,EACnC,MAAO,iCAAY,oGACd,QAAI,EAAW,SAAS,OAAO,EACpC,MAAO,iCAAY,wFACd,QAAI,EAAW,SAAS,uBAAuB,EACpD,MAAO,iCAAY,wEAEnB,WAAO,iCAAY,QAGlB,gBACH,GAAI,EAAW,SAAS,KAAK,EAC3B,MAAO,iCAAY,kHACd,QAAI,EAAW,SAAS,KAAK,EAClC,MAAO,iCAAY,oIACd,QAAI,EAAW,SAAS,KAAK,EAClC,MAAO,uCAAa,8FACf,QAAI,EAAW,SAAS,KAAK,EAClC,MAAO,iCAAY,sHACd,QAAI,EAAW,SAAS,KAAK,EAClC,MAAO,6CAAc,gHAChB,QAAI,EAAW,SAAS,KAAK,EAClC,MAAO,uCAAa,uHAEpB,WAAO,iCAAY,QAGlB,UACH,GAAI,EAAW,SAAS,SAAS,EAC/B,MAAO,6BAAQ,wFACV,QAAI,EAAW,SAAS,WAAW,GAAK,EAAW,SAAS,aAAa,EAC9E,MAAO,iCAAY,sGACd,QAAI,EAAW,SAAS,cAAc,EAC3C,MAAO,mCAAS,0FAEhB,WAAO,yCAAU,0EAGhB,aACH,GAAI,EAAW,SAAS,eAAe,EACrC,MAAO,mCAAS,gGACX,QAAI,EAAW,SAAS,yBAAyB,EACtD,MAAO,6BAAQ,gHAEf,WAAO,6BAAQ,0EAGd,aACH,GAAI,EAAW,SAAS,yBAAyB,EAC/C,MAAO,yCAAU,wFACZ,QAAI,EAAW,SAAS,oBAAoB,EACjD,MAAO,yCAAU,kFAEjB,WAAO,yCAAU,wGAGhB,aACH,GAAI,EAAW,SAAS,OAAO,GAAK,EAAW,SAAS,yBAAyB,EAC/E,MAAO,yCAAU,8IACZ,QAAI,EAAW,SAAS,eAAe,GAAK,EAAW,SAAS,eAAe,EACpF,MAAO,yCAAU,sHACZ,QAAI,EAAW,SAAS,QAAQ,GAAK,EAAW,SAAS,2BAA2B,EACzF,MAAO,mCAAS,8IACX,QAAI,EAAW,SAAS,QAAQ,GAAK,EAAW,SAAS,yBAAyB,EACvF,MAAO,yCAAU,4EAEjB,WAAO,yCAAU,kHAIjB,MAAO,6BAAQ,sHAOT,iBAAgB,EAAoD,CAChF,IAAM,EAAmB,CAAC,EAE1B,QAAQ,IAAI,4DAAc,EAE1B,GAAI,CAEF,QAAQ,IAAI,kDAAc,EAC1B,IAAM,EAAe,MAAM,KAAK,yBAAyB,EACzD,IAAK,EAAa,QAChB,EAAO,KAAK,2DAAa,EAAa,OAAO,EAE7C,aAAQ,IAAI,mDAAU,EAIxB,QAAQ,IAAI,4CAAuB,EACnC,IAAM,EAAW,MAAM,KAAK,0BAA0B,EACtD,IAAK,EAAS,QACZ,EAAO,KAAK,oDAAqB,EAAS,OAAO,EAEjD,aAAQ,IAAI,wDAAoB,EAIlC,QAAQ,IAAI,oEAAiB,EAC7B,IAAM,EAAa,MAAM,KAAK,4BAA4B,EAC1D,IAAK,EAAW,QACd,EAAO,KAAK,iEAAc,EAAW,OAAO,EAE5C,aAAQ,IAAI,qEAAa,EAI3B,QAAQ,IAAI,iDAAkB,EAC9B,IAAM,EAAW,MAAM,KAAK,yBAAyB,EACrD,IAAK,EAAS,QACZ,EAAO,KAAK,0DAAiB,EAAS,OAAO,EAE7C,aAAQ,IAAI,kDAAc,EAG5B,IAAM,EAAU,EAAO,SAAW,EAClC,GAAI,EACF,QAAQ,IAAI,yGAAmB,EAE/B,aAAQ,IAAI,6FAAiB,EAC7B,EAAO,QAAQ,KAAS,QAAQ,IAAI,OAAO,GAAO,CAAC,EAGrD,MAAO,CAAE,UAAS,QAAO,EACzB,MAAO,EAAO,CACd,IAAM,EAAW,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,EAEtE,OADA,EAAO,KAAK,iEAAc,GAAU,EAC7B,CAAE,QAAS,GAAO,QAAO,QAOtB,yBAAwB,EAAkD,CACtF,GAAI,CAEF,IAAM,EAAa,IAAI,IAAI,KAAK,cAAc,EAAE,SAC1C,EAAW,MAAM,MAAM,WAAW,mBAA6B,CACnE,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,aAClC,EACA,OAAQ,YAAY,QAAQ,GAAK,CACnC,CAAC,EAED,IAAK,EAAS,GACZ,MAAO,CAAE,QAAS,GAAO,MAAO,6DAAoB,EAAS,SAAU,EAGzE,MAAO,CAAE,QAAS,EAAK,EACvB,MAAO,EAAO,CAEd,MAAO,CAAE,QAAS,GAAO,MAAO,yCADf,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GACjB,QAO3C,0BAAyB,EAAkD,CACvF,GAAI,CACF,IAAM,EAAS,GAAG,KAAK,iBAAiB,SAClC,EAAW,MAAM,MAAM,EAAQ,CACnC,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,EACA,OAAQ,YAAY,QAAQ,GAAK,CACnC,CAAC,EAED,IAAK,EAAS,GACZ,GAAI,EAAS,SAAW,IACtB,MAAO,CAAE,QAAS,GAAO,MAAO,mDAAqB,EAChD,QAAI,EAAS,SAAW,IAC7B,MAAO,CAAE,QAAS,GAAO,MAAO,uCAAmB,EAEnD,WAAO,CAAE,QAAS,GAAO,MAAO,iCAAY,EAAS,SAAU,EAInE,IAAM,EAAW,MAAM,EAAS,KAAK,EAGrC,OAFA,QAAQ,IAAI,+BAAU,EAAS,SAAS,EAAS,WAAW,EAErD,CAAE,QAAS,EAAK,EACvB,MAAO,EAAO,CAEd,MAAO,CAAE,QAAS,GAAO,MAAO,6CADf,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GACb,QAO/C,4BAA2B,EAAkD,CACzF,GAAI,CACF,IAAM,EAAU,MAAM,KAAK,WAAW,KAAK,cAAc,EACnD,EAAS,GAAG,KAAK,iBAAiB,YAAY,IAE9C,EAAW,MAAM,MAAM,EAAQ,CACnC,OAAQ,MACR,QAAS,CACP,cAAiB,UAAU,KAAK,cAChC,eAAgB,kBAClB,EACA,OAAQ,YAAY,QAAQ,GAAK,CACnC,CAAC,EAED,IAAK,EAAS,GACZ,GAAI,EAAS,SAAW,IACtB,MAAO,CAAE,QAAS,GAAO,MAAO,gFAAe,EAC1C,QAAI,EAAS,SAAW,IAC7B,MAAO,CAAE,QAAS,GAAO,MAAO,0EAAc,EAE9C,WAAO,CAAE,QAAS,GAAO,MAAO,qDAAY,EAAS,SAAU,EAInE,IAAM,EAAY,MAAM,EAAS,KAAK,EAItC,GAHA,QAAQ,IAAI,+BAAU,EAAU,SAAS,EAAU,YAAY,EAG3D,EAAU,aAAe,EAAU,YAAY,cAEjD,GADoB,EAAU,YAAY,aAAa,aACrC,GAChB,MAAO,CAAE,QAAS,GAAO,MAAO,6JAAqC,EAIzE,MAAO,CAAE,QAAS,EAAK,EACvB,MAAO,EAAO,CAEd,MAAO,CAAE,QAAS,GAAO,MAAO,qDADf,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GACf,QAO7C,yBAAwB,EAAkD,CACtF,GAAI,CAEF,GAAI,CACF,KAAK,eAAe,eAAe,EACnC,MAAO,EAAO,CACd,MAAO,CAAE,QAAS,GAAO,MAAO,8EAAuB,EAIzD,GAAI,CACF,IAAM,EAAW,KAAK,eAAe,+BAA+B,EAAE,KAAK,EACrE,EAAY,KAAK,eAAe,gCAAgC,EAAE,KAAK,EAE7E,IAAK,IAAa,EAChB,MAAO,CACL,QAAS,GACT,MAAO,kLACT,EAGF,QAAQ,IAAI,uBAAY,MAAa,IAAY,EACjD,MAAO,EAAO,CACd,MAAO,CAAE,QAAS,GAAO,MAAO,0CAAY,EAI9C,GAAI,CACF,IAAK,EAAW,KAAK,OAAO,EAC1B,EAAU,KAAK,QAAS,CAAE,UAAW,EAAK,CAAC,EAI7C,IAAM,EAAgB,OAAK,KAAK,QAAS,2BAA2B,EACpE,EAAc,EAAU,MAAM,EAC9B,EAAO,CAAQ,EACf,MAAO,EAAO,CACd,MAAO,CAAE,QAAS,GAAO,MAAO,qDAAY,KAAK,SAAU,EAG7D,MAAO,CAAE,QAAS,EAAK,EACvB,MAAO,EAAO,CAEd,MAAO,CAAE,QAAS,GAAO,MAAO,6CADf,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GACb,GAOrD,WAAW,CAAC,EAAuB,EAA6B,CACtE,IAAM,EAAa,KAAK,cAAc,CAAS,EAC/C,OAAO,EAAa,EAMd,aAAa,CAAC,EAA+B,CAWnD,MAVmB,CACjB,QAAW,EACX,cAAiB,EACjB,cAAiB,EACjB,WAAc,EACd,WAAc,EACd,WAAc,EACd,QAAW,CACb,EAEkB,GAMZ,aAAa,CAAC,EAA4B,CAEhD,OAAO,KAAK,IAAI,KAAO,KAAK,IAAI,EAAG,CAAU,EAAG,IAAI,EAM9C,qBAAqB,CAAC,EAK5B,CACA,IAAM,EAA4B,CAAC,EAC/B,EAAW,2BACX,EAAY,GACZ,EAAe,GAGnB,GAAI,EAAI,gBAAkB,EAAI,cAC5B,MAAO,CACL,SAAU,qBACV,UAAW,GACX,aAAc,GACd,gBAAiB,CAAC,8DAAW,CAC/B,EAIF,GAAI,EAAI,cAAe,CACrB,IAAM,EAAY,EAAI,WAAa,UAEnC,GAAI,KAAK,YAAY,EAAW,EAAI,YAAc,CAAC,EAGjD,OAFA,EAAgB,KAAK,uEAAe,EAAI,YAAc,GAAG,EAEjD,OACD,UACH,EAAgB,KAAK,kGAAiB,EACtC,UACG,gBACH,EAAgB,KAAK,0EAA4B,EACjD,UACG,gBACH,EAAgB,KAAK,sGAAqB,EAC1C,EAAe,GACf,MAGJ,OAAgB,KAAK,8GAAmB,EACxC,EAAY,GAKhB,IAAK,EAAI,iBACP,EAAW,6CACN,SAAK,EAAI,gBACd,EAAW,uCACN,SAAK,EAAI,eACd,EAAW,yDACN,SAAK,EAAI,qBACd,EAAW,uCACN,SAAK,EAAI,cACd,EAAW,mDAGb,MAAO,CAAE,WAAU,YAAW,eAAc,iBAAgB,EAMtD,gBAAgB,EAAS,CAC/B,IAAM,EAAoB,MAAM,KAAK,KAAK,KAAK,OAAO,CAAC,EAAE,OAAO,MAC7D,EAAI,eAAiB,EAAI,aAC5B,EAEA,GAAI,EAAkB,SAAW,EAAG,CAClC,QAAQ,IAAI,EAAc,QAAQ,iIAAuB,CAAC,EAC1D,OAGF,QAAQ,IAAI;AAAA,EAAO,EAAc,KAAK,gEAAa,CAAC,EACpD,QAAQ,IAAI,EAAc,UAAU,EAAE,CAAC,EAEvC,QAAW,KAAO,EAAmB,CACnC,IAAM,EAAW,KAAK,sBAAsB,CAAG,EAM/C,GAJA,QAAQ,IAAI;AAAA,6BAAW,EAAc,UAAU,EAAI,WAAW,GAAG,EACjE,QAAQ,IAAI,oBAAS,EAAS,UAAY,EAAc,QAAQ,oBAAK,EAAI,EAAc,MAAM,sCAAQ,GAAG,EACxG,QAAQ,IAAI,0BAAU,EAAc,KAAK,EAAS,QAAQ,GAAG,EAEzD,EAAI,YAAc,EAAI,WAAa,EACrC,QAAQ,IAAI,gCAAW,EAAc,IAAI,EAAI,WAAW,SAAS,CAAC,GAAG,EAGvE,GAAI,EAAI,cACN,QAAQ,IAAI,gCAAW,EAAc,MAAM,EAAI,aAAa,GAAG,EAGjE,GAAI,EAAS,gBAAgB,OAAS,EACpC,QAAQ,IAAI,kBAAO,EACnB,EAAS,gBAAgB,QAAQ,KAAO,CACtC,QAAQ,IAAI,UAAU,EAAc,IAAI,CAAG,GAAG,EAC/C,EAIL,QAAQ,IAAI,EAAc,UAAU,EAAE,CAAC,OAM3B,wBAAuB,CAAC,EAAkC,CACtE,QAAQ,IAAI;AAAA,EAAO,EAAc,UAAU,EAAE,CAAC,EAC9C,QAAQ,IAAI,EAAc,SAAS,yCAAU,EAAc,UAAU,EAAK,IAAI,GAAG,CAAC,EAClF,QAAQ,IAAI,EAAc,YAAY,6BAAQ,EAAK,aAAa,CAAC,EACjE,QAAQ,IAAI,EAAc,IAAI,mCAAS,EAAK,aAAa,CAAC,EAC1D,QAAQ,IAAI,EAAc,UAAU,EAAE,CAAC,EAGvC,IAAI,EAAM,KAAK,KAAK,IAAI,EAAK,IAAI,EAEjC,GAAI,EAAK,CAIP,GAHA,QAAQ,IAAI,EAAc,KAAK,+FAAmB,CAAC,EAG/C,EAAI,gBAAkB,EAAI,cAAe,CAC3C,QAAQ,IAAI,EAAc,QAAQ,gBAAK,EAAc,UAAU,EAAK,IAAI,oDAAY,CAAC,EACrF,OAGF,QAAQ,IAAI,EAAc,KAAK,iEAAc,CAAC,EACzC,KAEL,IAAM,EAAY,IAAI,KACtB,EAAM,CACJ,YAAa,EAAK,KAClB,mBAAoB,EAAK,YACzB,gBAAiB,EAAK,YACtB,YAAa,KAAK,eAClB,cAAe,GACf,UAAW,EAAU,YAAY,EACjC,QAAS,GACT,SAAU,GACV,iBAAkB,GAClB,gBAAiB,GACjB,eAAgB,GAChB,qBAAsB,GACtB,cAAe,GACf,cAAe,GACf,MAAO,CAAC,EACR,SAAU,CAAC,EACX,WAAY,EACZ,YAAa,IAAI,KAAK,EAAE,YAAY,CACtC,EAGF,IAAM,EAAqB,EAAI,UAAY,IAAI,KAAK,EAAI,SAAS,EAAI,IAAI,KACzE,IAAK,EAAI,UACP,EAAI,UAAY,EAAmB,YAAY,EAGjD,GAAI,CAEF,GAAI,EAAI,gBAAkB,EAAI,cAC5B,EAAI,cAAgB,GAItB,IAAI,EAAoF,KACxF,IAAK,EAAI,gBAAiB,CAExB,IAAM,EAAoB,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,sCAAO,EACtE,GAAI,GAAqB,EAAkB,SAAW,YACpD,QAAQ,IAAI,EAAc,QAAQ,0EAAa,CAAC,EAC3C,KACL,KAAK,oBAAoB,EAAK,KAAM,uCAAS,aAAa,EAC1D,GAAI,CAEF,GADA,EAAiB,MAAM,KAAK,sBAAsB,EAAK,IAAI,EACvD,EAAe,SAAW,EAAe,QAAS,CACpD,EAAI,cAAgB,2EACpB,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAU,EAAI,cAAe,YAAY,EACtF,QAAQ,IAAI,EAAc,MAAM,6BAAQ,EAAI,eAAe,CAAC,EAC5D,KAAK,mBAAmB,CAAG,EAC3B,OAEF,KAAK,oBAAoB,EAAK,KAAM,uCAAS,WAAW,EACxD,MAAO,EAAY,CACnB,IAAM,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAE7C,MADA,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAU,EAAU,CAAS,EACpE,IAGL,KAEL,IAAM,EAAoB,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,sCAAO,EACtE,IAAK,GAAqB,EAAkB,SAAW,YACrD,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAS,EAEtD,aAAQ,IAAI,EAAc,QAAQ,0EAAa,CAAC,EAOpD,IAAI,EAAW,GADQ,KAAK,uBAAuB,EAAK,WAAW,QAEnE,IAAK,EAAI,iBAAkB,CACzB,QAAQ,IAAI,EAAc,KAAK,EAAG,4CAAQ,CAAC,EAC3C,KAAK,oBAAoB,EAAK,KAAM,6CAAU,aAAa,EAC3D,GAAI,CACF,EAAW,KAAK,wBAAwB,CAAI,EAC5C,EAAI,iBAAmB,GACvB,KAAK,oBAAoB,EAAK,KAAM,6CAAU,WAAW,EACzD,KAAK,mBAAmB,CAAG,EAC3B,MAAO,EAAY,CACnB,IAAM,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAE7C,MADA,KAAK,oBAAoB,EAAK,KAAM,6CAAU,SAAU,EAAU,CAAS,EACrE,GAEH,KACL,QAAQ,IAAI,EAAc,QAAQ,uEAAe,EAAc,IAAI,CAAQ,GAAG,CAAC,EAE/E,IAAM,EAAe,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,4CAAQ,EAClE,IAAK,GAAgB,EAAa,SAAW,YAC3C,KAAK,oBAAoB,EAAK,KAAM,6CAAU,SAAS,EAK3D,IAAK,EAAI,gBACP,GAAI,GAAkB,EAAe,QAAU,EAAe,SAAW,EAAe,UAEtF,QAAQ,IAAI,EAAc,KAAK,EAAG,4CAAQ,CAAC,EAC3C,KAAK,oBAAoB,EAAK,KAAM,uCAAS,aAAa,EAC1D,EAAI,cAAgB,EAAe,UACnC,EAAI,gBAAkB,GACtB,KAAK,oBAAoB,EAAK,KAAM,uCAAS,WAAW,EACxD,KAAK,mBAAmB,CAAG,EACtB,KAEL,QAAQ,IAAI,EAAc,KAAK,EAAG,sCAAO,CAAC,EAC1C,KAAK,oBAAoB,EAAK,KAAM,uCAAS,aAAa,EAC1D,GAAI,CACF,IAAM,EAAY,MAAM,KAAK,uBAAuB,CAAI,EACxD,EAAI,cAAgB,EACpB,EAAI,gBAAkB,GACtB,KAAK,oBAAoB,EAAK,KAAM,uCAAS,WAAW,EACxD,KAAK,mBAAmB,CAAG,EAC3B,MAAO,EAAY,CACnB,IAAM,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAE7C,MADA,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAU,EAAU,CAAS,EACpE,GAGL,KACL,QAAQ,IAAI,EAAc,QAAQ,iEAAc,EAAc,IAAI,EAAI,aAAa,GAAG,CAAC,EAEvF,IAAM,EAAe,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,sCAAO,EACjE,IAAK,GAAgB,EAAa,SAAW,YAC3C,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAS,EAK1D,IAAK,EAAI,qBAAsB,CAC7B,QAAQ,IAAI,EAAc,KAAK,EAAG,sCAAO,CAAC,EAC1C,KAAK,oBAAoB,EAAK,KAAM,uCAAS,aAAa,EAC1D,GAAI,CACF,MAAM,KAAK,4BAA4B,EAAK,KAAM,EAAK,WAAW,EAClE,EAAI,qBAAuB,GAC3B,KAAK,oBAAoB,EAAK,KAAM,uCAAS,WAAW,EACxD,KAAK,mBAAmB,CAAG,EAC3B,MAAO,EAAY,CACnB,IAAM,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAE7C,MADA,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAU,EAAU,CAAS,EACpE,GAEH,KACL,QAAQ,IAAI,EAAc,QAAQ,8DAAW,CAAC,EAE9C,IAAM,EAAe,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,sCAAO,EACjE,IAAK,GAAgB,EAAa,SAAW,YAC3C,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAS,EAK1D,IAAK,EAAI,eAAgB,CACvB,QAAQ,IAAI,EAAc,KAAK,EAAG,wDAAU,CAAC,EAC7C,KAAK,oBAAoB,EAAK,KAAM,yDAAY,aAAa,EAC7D,GAAI,CACF,IAAM,EAAa,KAAK,mBAAmB,EAAU,EAAI,aAAa,EAGtE,GAFA,EAAI,eAAiB,GAEjB,EAAW,YACb,KAAK,oBAAoB,EAAK,KAAM,yDAAY,UAAW,OAAW,OAAW,EAAW,QAAQ,EACpG,EAAW,UAAU,QAAQ,KAAW,KAAK,WAAW,EAAK,KAAM,CAAO,CAAC,EAE3E,UAAK,oBAAoB,EAAK,KAAM,yDAAY,WAAW,EAG7D,KAAK,mBAAmB,CAAG,EAC3B,MAAO,EAAY,CACnB,IAAM,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAG7C,GAAI,EAAS,SAAS,4BAA4B,GAC9C,EAAS,SAAS,kBAAkB,GACpC,EAAS,SAAS,qBAAqB,GACvC,EAAS,SAAS,gBAAgB,GAClC,EAAS,SAAS,mBAAmB,GACrC,EAAS,SAAS,aAAa,GAC/B,EAAS,SAAS,YAAY,GAC9B,EAAS,SAAS,YAAY,GAC9B,EAAS,SAAS,uCAAuC,GACzD,EAAS,SAAS,iBAAiB,GACnC,EAAS,SAAS,2BAA2B,GAC7C,EAAS,SAAS,qBAAqB,GACvC,EAAS,SAAS,eAAe,GACjC,EAAS,SAAS,kBAAkB,GACpC,EAAS,SAAS,KAAK,GACvB,EAAS,SAAS,uBAAuB,GACzC,EAAS,SAAS,kBAAkB,GACpC,EAAS,SAAS,0BAA0B,GAC5C,EAAS,SAAS,uBAAuB,GACzC,EAAS,SAAS,aAAa,GAC/B,EAAS,SAAS,6BAA6B,GAC/C,EAAS,SAAS,uBAAuB,EAC3C,QAAQ,IAAI,EAAc,QAAQ,gKAA6B,CAAC,EAChE,EAAI,eAAiB,GACrB,KAAK,oBAAoB,EAAK,KAAM,yDAAY,UAAW,OAAW,OAAW,CAAC,+FAAoB,GAAU,CAAC,EACjH,KAAK,WAAW,EAAK,KAAM,+FAAmB,GAAU,EACxD,KAAK,mBAAmB,CAAG,EAG3B,WADA,KAAK,oBAAoB,EAAK,KAAM,yDAAY,SAAU,EAAU,CAAS,EACvE,GAGL,KACL,QAAQ,IAAI,EAAc,QAAQ,kDAAS,CAAC,EAE5C,IAAM,EAAe,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,wDAAU,EACpE,IAAK,GAAiB,EAAa,SAAW,aAAe,EAAa,SAAW,UACnF,KAAK,oBAAoB,EAAK,KAAM,yDAAY,SAAS,EAK7D,GAAI,KAAK,eACP,QAAQ,IAAI,EAAc,QAAQ,sFAAe,CAAC,EAClD,KAAK,oBAAoB,EAAK,KAAM,mDAAW,SAAS,EACxD,EAAI,cAAgB,GACf,SAAK,EAAI,cAAe,CAC7B,QAAQ,IAAI,EAAc,KAAK,EAAG,oEAAY,CAAC,EAC/C,KAAK,oBAAoB,EAAK,KAAM,mDAAW,aAAa,EAC5D,GAAI,CACF,KAAK,qBAAqB,EAAI,cAAe,EAAK,IAAI,EACtD,EAAI,cAAgB,GACpB,KAAK,oBAAoB,EAAK,KAAM,mDAAW,WAAW,EAC1D,MAAO,EAAY,CACnB,IAAM,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAG7C,GAAI,EAAS,SAAS,4BAA4B,GAC9C,EAAS,SAAS,kBAAkB,GACpC,EAAS,SAAS,YAAY,EAChC,QAAQ,IAAI,EAAc,QAAQ,mFAAiB,GAAU,CAAC,EAC9D,KAAK,WAAW,EAAK,KAAM,uEAAe,GAAU,EACpD,KAAK,oBAAoB,EAAK,KAAM,mDAAW,UAAW,OAAW,OAAW,CAAC,CAAQ,CAAC,EAC1F,EAAI,cAAgB,GAGpB,WADA,KAAK,oBAAoB,EAAK,KAAM,mDAAW,SAAU,EAAU,CAAS,EACtE,GAGL,KACL,QAAQ,IAAI,EAAc,QAAQ,oEAAY,CAAC,EAE/C,IAAM,EAAe,EAAI,MAAM,KAAK,KAAQ,EAAK,OAAS,kDAAS,EACnE,IAAK,GAAgB,EAAa,SAAW,YAC3C,KAAK,oBAAoB,EAAK,KAAM,mDAAW,SAAS,EAK5D,GAAI,EAAW,CAAQ,EACrB,EAAO,EAAU,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EACjD,QAAQ,IAAI,EAAc,IAAI,mEAAqB,WAAS,CAAQ,GAAG,CAAC,EAG1E,IAAM,EAAU,IAAI,KAOpB,GANA,EAAI,QAAU,EAAQ,YAAY,EAClC,EAAI,SAAW,GAAG,KAAK,OAAO,EAAQ,QAAQ,EAAI,EAAmB,QAAQ,GAAK,IAAI,UAEtF,KAAK,mBAAmB,CAAG,EAC3B,QAAQ,IAAI;AAAA,EAAO,EAAc,QAAQ,yCAAU,EAAc,UAAU,EAAK,IAAI,KAAK,EAAc,SAAS,kBAAQ,EAAI,WAAW,GAAG,EAAI;AAAA,CAAI,EAE9I,EAAI,UAAY,EAAI,SAAS,OAAS,EACxC,QAAQ,IAAI,EAAc,QAAQ,0CAAW,EAAI,SAAS,eAAU,CAAC,EAGvE,MAAO,EAAY,CACnB,IAAM,EAAU,IAAI,KACd,EAAW,EAAM,QACjB,EAAY,KAAK,cAAc,CAAQ,EAE7C,EAAI,UAAY,EAChB,EAAI,YAAc,EAAI,YAAc,GAAK,EACzC,IAAM,EAAgB,KAAK,wBAAwB,EAAU,CAAS,EAGtE,GAAI,KAAK,YAAY,EAAW,EAAI,UAAU,EAAG,CAC/C,IAAM,EAAa,KAAK,cAAc,EAAI,WAAa,CAAC,EAClD,EAAa,KAAK,cAAc,CAAS,EAE/C,QAAQ,IAAI;AAAA,EAAO,EAAc,QAAQ,oFAAkB,CAAC,EAC5D,QAAQ,IAAI,EAAc,MAAM,iBAAM,GAAe,CAAC,EACtD,QAAQ,IAAI,EAAc,IAAI,6BAAQ,GAAW,CAAC,EAClD,QAAQ,IAAI,EAAc,KAAK,6BAAQ,EAAI,cAAc,GAAY,CAAC,EACtE,QAAQ,IAAI,EAAc,KAAK,gBAAK,EAAa,kCAAc,CAAC,EAEhE,KAAK,oBAAoB,EAAK,KAAM,6BAAQ,EAAI,cAAc,KAAe,cAAe,gBAAM,EAAa,aAAQ,EACvH,KAAK,mBAAmB,CAAG,EAG3B,GAAI,CACF,GAAI,EAAW,KAAK,OAAO,EAAG,CAC5B,IAAM,EAAQ,EAAY,KAAK,OAAO,EAChC,EAAiB,KAAK,uBAAuB,EAAK,WAAW,EAChD,EAAM,OAAO,KAC9B,EAAK,WAAW,CAAc,GAAK,EAAK,SAAS,MAAM,CACzD,EAEW,QAAQ,KAAO,CACxB,IAAM,EAAe,OAAK,KAAK,QAAS,CAAG,EAC3C,GAAI,EAAW,CAAO,EACpB,EAAO,EAAS,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,EAChD,QAAQ,IAAI,EAAc,IAAI,mEAAgB,GAAK,CAAC,EAEvD,GAEH,MAAO,EAAO,CACd,QAAQ,IAAI,EAAc,QAAQ,kFAAgB,CAAC,EAWrD,OAPA,MAAM,IAAI,QAAQ,KAAW,WAAW,EAAS,CAAU,CAAC,EAG5D,EAAI,cAAgB,GAGpB,QAAQ,IAAI,EAAc,KAAK,mCAAS,EAAI,kCAAmB,EAAc,UAAU,EAAK,IAAI,GAAG,CAAC,EAC7F,MAAM,KAAK,wBAAwB,CAAI,EACzC,KAEL,EAAI,QAAU,EAAQ,YAAY,EAClC,EAAI,SAAW,GAAG,KAAK,OAAO,EAAQ,QAAQ,EAAI,EAAmB,QAAQ,GAAK,IAAI,UACtF,EAAI,cAAgB,EAEpB,KAAK,oBAAoB,EAAK,KAAM,uCAAS,SAAU,EAAI,cAAe,CAAS,EACnF,KAAK,mBAAmB,CAAG,EAE3B,QAAQ,IAAI;AAAA,EAAO,EAAc,MAAM,4DAAc,EAAc,UAAU,EAAK,IAAI,GAAG,CAAC,EAC1F,QAAQ,IAAI,EAAc,MAAM,6BAAQ,EAAI,eAAe,CAAC,EAC5D,QAAQ,IAAI,EAAc,MAAM,6BAAQ,GAAW,CAAC,EACpD,QAAQ,IAAI,EAAc,MAAM,mCAAS,EAAI,YAAY,CAAC,EAG1D,IAAM,EAAW,KAAK,sBAAsB,CAAG,EAC/C,GAAI,EAAS,gBAAgB,OAAS,EACpC,QAAQ,IAAI,EAAc,KAAK,4BAAO,CAAC,EACvC,EAAS,gBAAgB,QAAQ,KAAO,CACtC,QAAQ,IAAI,EAAc,IAAI,QAAQ,GAAK,CAAC,EAC7C,EAKH,IAAM,EAAW,GADM,KAAK,uBAAuB,EAAK,WAAW,QAEnE,GAAI,EAAW,CAAQ,EACrB,EAAO,EAAU,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,SAS5C,QAAO,EAAkB,CACpC,GAAI,CAQF,GAPA,QAAQ,IAAI;AAAA,EAAO,EAAc,IAAI,6CAAc,CAAC,EACpD,QAAQ,IAAI,EAAE,EAGd,KAAK,cAAc,GAGd,KAAK,aAAe,KAAK,cAAgB,qBAAuB,KAAK,cAAgB,4BAYxF,GAXA,QAAQ,IAAI,EAAc,QAAQ,0DAA2B,CAAC,EAC9D,QAAQ,IAAI,EAAc,KAAK,8CAAoB,CAAC,EACpD,QAAQ,IAAI,EAAc,IAAI,uEAAoB,CAAC,EACnD,QAAQ,IAAI,EAAc,IAAI,gGAA6C,CAAC,EAC5E,QAAQ,IAAI,EAAc,IAAI,qDAAgC,CAAC,EAC/D,QAAQ,IAAI,EAAc,IAAI,qDAAiB,CAAC,EAChD,QAAQ,IAAI,EAAE,EAGd,KAAK,YAAc,MAAM,EAAqB,GAEzC,KAAK,aAAe,KAAK,YAAY,KAAK,IAAM,GAEnD,MADA,QAAQ,MAAM,EAAc,MAAM,uCAAkB,CAAC,EAC/C,IAAI,MAAM,uCAAkB,EAKtC,KAAK,iBAAiB,EAGtB,IAAM,EAAiB,MAAM,KAAK,iBAAiB,EACnD,IAAK,EAAe,QAWlB,MAVA,QAAQ,MAAM;AAAA,EAAO,EAAc,MAAM,kFAAgB,CAAC,EAC1D,EAAe,OAAO,QAAQ,KAAS,QAAQ,MAAM,EAAc,MAAM,OAAO,GAAO,CAAC,CAAC,EAGzF,QAAQ,IAAI,EAAc,QAAQ;AAAA,uHAA0B,CAAC,EAC7D,EAAc,IAAI,EAGlB,MAAM,IAAI,QAAQ,KAAW,WAAW,EAAS,GAAG,CAAC,EAE/C,IAAI,MAAM,kGAAiB,EAInC,IAAI,EAAwB,KAAK,aACjC,GAAI,KAAK,iBAAiB,OAAS,EAAG,CACpC,EAAwB,KAAK,aAAa,OAAO,KAC/C,KAAK,iBAAiB,SAAS,EAAK,IAAI,CAC1C,EAEA,QAAQ,IAAI,EAAc,KAAK,yCAAU,EAAc,UAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,GAAG,CAAC,EACrG,QAAQ,IAAI,EAAc,QAAQ,yCAAU,EAAc,UAAU,EAAsB,IAAI,KAAK,EAAE,IAAI,EAAE,KAAK,IAAI,CAAC,GAAG,CAAC,EAEzH,IAAM,EAAW,KAAK,iBAAiB,OAAO,MAC3C,KAAK,aAAa,KAAK,KAAQ,EAAK,OAAS,CAAI,CACpD,EACA,GAAI,EAAS,OAAS,EACpB,QAAQ,IAAI,EAAc,QAAQ,yCAAU,EAAS,KAAK,IAAI,GAAG,CAAC,EAItE,GAAI,EAAsB,SAAW,EAAG,CACtC,QAAQ,IAAI,EAAc,QAAQ,oEAAY,CAAC,EAC/C,OAGF,QAAQ,IAAI;AAAA,EAAO,EAAc,SAAS,4BAAO,EAAc,UAAU,EAAsB,OAAO,SAAS,CAAC,sBAAO,CAAC,EACxH,QAAQ,IAAI,EAAc,UAAU,EAAE,CAAC,EAGvC,QAAW,KAAQ,EACjB,MAAM,KAAK,wBAAwB,CAAI,EAGzC,QAAQ,IAAI;AAAA,EAAO,EAAc,UAAU,EAAE,CAAC,EAC9C,QAAQ,IAAI,EAAc,QAAQ,+DAAY,CAAC,EAE/C,MAAO,EAAY,CACnB,QAAQ,MAAM,EAAc,MAAM,2DAAa,EAAM,SAAS,CAAC,EAC/D,QAAQ,KAAK,CAAC,GAOX,uBAAuB,EAAW,CAOvC,IAAM,GALwB,KAAK,iBAAiB,OAAS,EACzD,KAAK,aAAa,OAAO,KAAQ,KAAK,iBAAiB,SAAS,EAAK,IAAI,CAAC,EAC1E,KAAK,cAG0C,IAAI,KAAQ,EAAK,IAAI,EAClE,EAAe,MAAM,KAAK,KAAK,KAAK,OAAO,CAAC,EAAE,OAAO,KAAO,EAAqB,SAAS,EAAI,WAAW,CAAC,EAE1G,EAAa,EAAa,OAC1B,EAAkB,EAAa,OAAO,KAAO,EAAI,gBAAkB,EAAI,aAAa,EAAE,OACtF,EAAc,EAAa,EAC3B,EAAoB,EAAa,OAAO,KAAO,EAAI,UAAY,EAAI,SAAS,OAAS,CAAC,EAAE,OAE1F,EAAS;AAAA,EAAO,EAAc,IAAI,6CAAc,EAAI;AAAA,EAExD,GAAI,KAAK,iBAAiB,OAAS,EACjC,GAAU,EAAc,KAAK,yCAAU,EAAc,UAAU,KAAK,iBAAiB,KAAK,IAAI,CAAC,GAAG,EAAI;AAAA,EAMxG,GAHA,GAAU,EAAc,KAAK,iBAAM,EAAc,UAAU,EAAW,SAAS,CAAC,sBAAO,EAAI;AAAA,EAC3F,GAAU,EAAc,QAAQ,iBAAM,EAAc,UAAU,EAAgB,SAAS,CAAC,sBAAO,EAAI;AAAA,EAE/F,EAAc,EAChB,GAAU,EAAc,MAAM,iBAAM,EAAc,UAAU,EAAY,SAAS,CAAC,sBAAO,EAAI;AAAA,EAE7F,QAAU,EAAc,QAAQ,iBAAM,EAAc,UAAU,GAAG,sBAAO,EAAI;AAAA,EAG9E,GAAI,EAAoB,EACtB,GAAU,EAAc,QAAQ,iBAAM,EAAc,UAAU,EAAkB,SAAS,CAAC,sBAAO,EAAI;AAAA,EAGvG,IAAM,EAAc,EAAa,EAAI,KAAK,MAAO,EAAkB,EAAc,GAAG,EAAI,EAClF,EAAmB,IAAgB,IAAM,EAAc,QAAU,GAAe,GAAK,EAAc,QAAU,EAAc,MAIjI,GAHA,GAAU,EAAiB,uBAAO,EAAc,UAAU,EAAc,GAAG,GAAG,EAAI;AAAA,EAG9E,EAAoB,EACtB,GAAU;AAAA,EAAO,EAAc,QAAQ,uCAAQ,EAAI;AAAA,EACnD,EACG,OAAO,KAAO,EAAI,UAAY,EAAI,SAAS,OAAS,CAAC,EACrD,QAAQ,KAAO,CACd,GAAU,EAAc,QAAQ,YAAM,EAAc,UAAU,EAAI,WAAW,IAAI,EAAI;AAAA,EACrF,EAAI,SAAS,QAAQ,KAAW,CAC9B,GAAU,EAAc,IAAI,SAAS,GAAS,EAAI;AAAA,EACnD,EACF,EAGL,GAAI,EAAc,EAChB,GAAU;AAAA,EAAO,EAAc,MAAM,iCAAO,EAAI;AAAA,EAChD,EACG,OAAO,KAAO,EAAI,aAAa,EAC/B,QAAQ,KAAO,CACd,GAAU,EAAc,MAAM,YAAM,EAAc,UAAU,EAAI,WAAW,MAAM,EAAI,eAAe,EAAI;AAAA,EACzG,EAGL,OAAO,EAEX,CAKA,SAAS,CAAa,CAAC,EAAiC,CACtD,QAAQ,IAAI;AAAA,+FAAsB,EAElC,IAAI,EAAiB,CACnB,UAAW,GACX,cAAe,EACf,gBAAiB,EACjB,OAAQ,CAAC,CACX,EAGA,GAAI,EACF,GAAI,CACF,EAAS,uBAAuB,EAChC,EAAe,UAAY,GAC3B,QAAQ,IAAI,yDAAW,EACvB,MAAO,EAAO,CACd,IAAM,EAAW,qDAAY,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,IAClF,EAAe,OAAO,KAAK,CAAQ,EACnC,QAAQ,IAAI,EAAc,QAAQ,iBAAM,GAAU,CAAC,EAKvD,GAAI,CACF,IAAM,EAAa,QAAQ,IAAI,EAC/B,QAAQ,IAAI,EAAc,IAAI,0CAAW,GAAY,CAAC,EAEtD,IAAI,EAAkB,CAAC,EACvB,GAAI,CACF,EAAQ,EAAY,CAAU,EAC9B,MAAO,EAAO,CACd,IAAM,EAAW,yCAAU,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,IAChF,EAAe,OAAO,KAAK,CAAQ,EACnC,QAAQ,IAAI,EAAc,MAAM,UAAI,GAAU,CAAC,EAC/C,OAIF,IAAM,EAAW,EAAM,OAAO,KAAQ,CACpC,GAAI,CACF,IAAM,EAAgB,OAAK,EAAY,CAAI,EACrC,EAAQ,EAAS,CAAQ,EAAE,YAAY,EACvC,EAAY,EAAK,WAAW,iBAAiB,EACnD,OAAO,GAAS,EAChB,MAAO,EAAO,CAEd,OADA,QAAQ,IAAI,EAAc,QAAQ,0CAAW,yBAAa,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GAAG,CAAC,EAC5G,IAEV,EAID,GAFA,EAAe,cAAgB,EAAS,OAEpC,EAAS,OAAS,EACpB,QAAQ,IAAI,oCAAU,EAAS,wEAAsB,EAErD,EAAS,QAAQ,KAAO,CACtB,GAAI,CACF,IAAM,EAAgB,OAAK,EAAY,CAAG,EAO1C,GANA,QAAQ,IAAI,EAAc,IAAI,6CAAc,GAAK,CAAC,EAGlD,EAAO,EAAU,CAAE,UAAW,GAAM,MAAO,EAAK,CAAC,GAG5C,EAAW,CAAQ,EACtB,EAAe,kBACf,QAAQ,IAAI,EAAc,QAAQ,iCAAY,GAAK,CAAC,EAC/C,KACL,IAAM,EAAW,yCAAU,IAC3B,EAAe,OAAO,KAAK,CAAQ,EACnC,QAAQ,IAAI,EAAc,QAAQ,oBAAS,GAAU,CAAC,GAExD,MAAO,EAAO,CACd,IAAM,EAAW,4BAAO,mBAAW,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,IACxF,EAAe,OAAO,KAAK,CAAQ,EACnC,QAAQ,IAAI,EAAc,MAAM,aAAO,GAAU,CAAC,GAErD,EAED,aAAQ,IAAI,EAAc,IAAI,yDAAW,CAAC,EAU5C,GANA,QAAQ,IAAI;AAAA,mDAAa,EACzB,QAAQ,IAAI,EAAc,IAAI,8CAAe,EAAe,UAAY,sBAAS,uBAAQ,CAAC,EAC1F,QAAQ,IAAI,EAAc,IAAI,8CAAe,EAAe,sBAAiB,CAAC,EAC9E,QAAQ,IAAI,EAAc,IAAI,kCAAa,EAAe,wBAAmB,CAAC,EAC9E,QAAQ,IAAI,EAAc,IAAI,kCAAa,EAAe,OAAO,eAAU,CAAC,EAExE,EAAe,OAAO,OAAS,EACjC,QAAQ,IAAI,EAAc,QAAQ;AAAA,kFAAmB,CAAC,EACtD,EAAe,OAAO,QAAQ,CAAC,EAAO,IAAU,CAC9C,QAAQ,IAAI,EAAc,QAAQ,MAAM,EAAQ,MAAM,GAAO,CAAC,EAC/D,EAGH,GAAI,EAAe,kBAAoB,EAAe,eAAiB,EAAe,OAAO,SAAW,EACtG,QAAQ,IAAI,EAAc,QAAQ,6FAAiB,CAAC,EAEpD,aAAQ,IAAI,EAAc,QAAQ,wFAAiB,CAAC,EAGtD,MAAO,EAAO,CACd,IAAM,EAAW,mFAAiB,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,IACvF,QAAQ,IAAI,EAAc,MAAM,gBAAK,GAAU,CAAC,EAChD,EAAe,OAAO,KAAK,CAAQ,GAOvC,SAAS,CAAoB,CAAC,EAAiC,CAE7D,QAAQ,GAAG,OAAQ,IAAM,EAExB,EAGD,QAAQ,GAAG,SAAU,IAAM,CACzB,QAAQ,IAAI;AAAA,2DAAqB,EACjC,EAAc,CAAQ,EACtB,QAAQ,KAAK,CAAC,EACf,EAGD,QAAQ,GAAG,UAAW,IAAM,CAC1B,QAAQ,IAAI;AAAA,kDAAY,EACxB,EAAc,CAAQ,EACtB,QAAQ,KAAK,CAAC,EACf,EAGD,QAAQ,GAAG,oBAAqB,CAAC,IAAU,CACzC,QAAQ,MAAM;AAAA,oDAAe,EAAM,OAAO,EAC1C,EAAc,CAAQ,EACtB,QAAQ,KAAK,CAAC,EACf,EAGD,QAAQ,GAAG,qBAAsB,CAAC,EAAQ,IAAY,CACpD,QAAQ,MAAM;AAAA,6DAAwB,CAAM,EAC5C,EAAc,CAAQ,EACtB,QAAQ,KAAK,CAAC,EACf,EAMH,SAAS,CAAY,CAAC,EAAoB,QAAQ,IAAI,EAAS,CAC7D,IAAM,EAAoB,OAAK,EAAW,SAAS,EAGnD,GAAI,EAAW,CAAY,EAAG,CAC5B,QAAQ,IAAI,EAAc,QAAQ,6DAAe,GAAc,CAAC,EAChE,QAAQ,IAAI,EAAc,KAAK,kGAAiB,CAAC,EACjD,OAIF,IAAM,EAAW,UAAQ,CAAY,EACrC,IAAK,EAAW,CAAG,EACjB,EAAU,EAAK,CAAE,UAAW,EAAK,CAAC,EAIpC,IAAM,EAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAsBtB,GAAI,CACF,EAAc,EAAc,EAAe,MAAM,EACjD,QAAQ,IAAI,EAAc,QAAQ,kEAAe,GAAc,CAAC,EAChE,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,0GAAoB,CAAC,EACpD,QAAQ,IAAI,EAAc,IAAI,oDAAqB,CAAC,EACpD,QAAQ,IAAI,EAAc,IAAI,wDAAe,CAAC,EAC9C,QAAQ,IAAI,EAAc,IAAI,iCAAsB,CAAC,EACrD,QAAQ,IAAI,EAAc,IAAI,0EAAkB,CAAC,EACjD,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,gHAAqB,CAAC,EAErD,QAAQ,IAAI,EAAc,UAAU,8BAA8B,CAAC,EAEnE,QAAQ,IAAI,EAAc,UAAU,YAAY,CAAC,EAEjD,QAAQ,IAAI,EAAc,UAAU,8GAAuC,CAAC,EAC5E,MAAO,EAAO,CACd,QAAQ,MAAM,EAAc,MAAM,kEAAe,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,GAAG,CAAC,EAC1G,QAAQ,KAAK,CAAC,GAUlB,SAAS,CAAW,EAAS,CAE3B,IAAI,EAGE,EAAoB,YAAY,IAAI,QAAQ,WAAY,EAAE,EAAE,QAAQ,WAAY,EAAE,EAClF,EAAgB,CACf,OAAK,EAAmB,cAAc,EACtC,OAAK,EAAmB,iBAAiB,EACzC,OAAK,EAAmB,oBAAoB,EACjD,iBACA,kBACA,qBACF,EAEA,QAAW,KAAe,EACxB,GAAI,CACF,GAAI,EAAW,CAAW,EAAG,CAC3B,EAAc,KAAK,MAAM,EAAa,EAAa,OAAO,CAAC,EAC3D,OAEF,MAAO,EAAO,EAKlB,IAAK,EAAa,CAChB,QAAQ,IAAI,EAAc,MAAM,oDAAqB,CAAC,EACtD,OAEF,QAAQ,IAAI,EAAc,IAAI,gDAAiB,EAAY,SAAS,CAAC,EACrE,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,2BAAM,CAAC,EACtC,QAAQ,IAAI,EAAc,IAAI,mBAAQ,EAAY,MAAM,CAAC,EACzD,QAAQ,IAAI,EAAc,IAAI,mBAAQ,EAAY,SAAS,CAAC,EAC5D,QAAQ,IAAI,EAAc,IAAI,mBAAQ,EAAY,aAAa,CAAC,EAChE,QAAQ,IAAI,EAAc,IAAI,mBAAQ,EAAY,QAAQ,CAAC,EAC3D,QAAQ,IAAI,EAAc,IAAI,yBAAS,EAAY,SAAS,CAAC,EAC7D,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,2BAAM,CAAC,EACtC,QAAQ,IAAI,EAAc,IAAI,cAAc,QAAQ,SAAS,CAAC,EAC9D,QAAQ,IAAI,EAAc,IAAI,mBAAQ,QAAQ,YAAY,QAAQ,MAAM,CAAC,EACzE,QAAQ,IAAI,EAAE,EAMhB,SAAS,CAAQ,EAAS,CAExB,IAAI,EAGE,EAAoB,YAAY,IAAI,QAAQ,WAAY,EAAE,EAAE,QAAQ,WAAY,EAAE,EAClF,EAAgB,CACf,OAAK,EAAmB,cAAc,EACtC,OAAK,EAAmB,iBAAiB,EACzC,OAAK,EAAmB,oBAAoB,EACjD,iBACA,kBACA,qBACF,EAEA,QAAW,KAAe,EACxB,GAAI,CACF,GAAI,EAAW,CAAW,EAAG,CAC3B,EAAc,KAAK,MAAM,EAAa,EAAa,OAAO,CAAC,EAC3D,OAEF,MAAO,EAAO,EAKlB,IAAK,EAAa,CAChB,QAAQ,IAAI,EAAc,MAAM,oDAAqB,CAAC,EACtD,OAEF,QAAQ,IAAI,EAAc,IAAI,gDAAiB,EAAY,SAAS,CAAC,EACrE,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,eAAI,CAAC,EACpC,QAAQ,IAAI,EAAc,IAAI,0LAAwC,CAAC,EACvE,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,eAAI,CAAC,EACpC,QAAQ,IAAI,EAAc,IAAI,mCAAS,CAAC,EACxC,QAAQ,IAAI,EAAc,UAAU,kDAA6B,CAAC,EAClE,QAAQ,IAAI,EAAc,UAAU,2CAAsB,CAAC,EAC3D,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,IAAI,6BAAQ,CAAC,EACvC,QAAQ,IAAI,EAAc,UAAU,6DAAwC,CAAC,EAC7E,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,eAAI,CAAC,EACpC,QAAQ,IAAI,EAAc,IAAI,mJAA8C,CAAC,EAC7E,QAAQ,IAAI,EAAc,IAAI,wGAA2C,CAAC,EAC1E,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,eAAI,CAAC,EACpC,QAAQ,IAAI,EAAc,IAAI,6DAA8B,CAAC,EAC7D,QAAQ,IAAI,EAAc,IAAI,6DAA8B,CAAC,EAC7D,QAAQ,IAAI,EAAc,IAAI,gHAAyC,CAAC,EACxE,QAAQ,IAAI,EAAc,IAAI,yDAA8C,CAAC,EAC7E,QAAQ,IAAI,EAAc,IAAI,uGAAqC,CAAC,EACpE,QAAQ,IAAI,EAAc,IAAI,yHAAwC,CAAC,EACvE,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,2BAAM,CAAC,EACtC,QAAQ,IAAI,EAAc,IAAI,6HAAiD,CAAC,EAChF,QAAQ,IAAI,EAAc,IAAI,0GAA8B,CAAC,EAC7D,QAAQ,IAAI,EAAc,IAAI,2CAA2C,CAAC,EAC1E,QAAQ,IAAI,EAAc,IAAI,oGAA6B,CAAC,EAC5D,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,eAAI,CAAC,EACpC,QAAQ,IAAI,EAAc,IAAI,gDAAY,CAAC,EAC3C,QAAQ,IAAI,EAAc,UAAU,gBAAgB,CAAC,EACrD,QAAQ,IAAI,EAAc,UAAU,iCAAiC,CAAC,EACtE,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,IAAI,gDAAY,CAAC,EAC3C,QAAQ,IAAI,EAAc,UAAU,qBAAqB,CAAC,EAC1D,QAAQ,IAAI,EAAc,UAAU,kBAAkB,CAAC,EACvD,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,IAAI,0CAAW,CAAC,EAC1C,QAAQ,IAAI,EAAc,UAAU,WAAW,CAAC,EAChD,QAAQ,IAAI,EAAc,UAAU,qBAAqB,CAAC,EAC1D,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,IAAI,0CAAW,CAAC,EAC1C,QAAQ,IAAI,EAAc,UAAU,0CAA0C,CAAC,EAC/E,QAAQ,IAAI,EAAc,UAAU,yCAAyC,CAAC,EAC9E,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,IAAI,oCAAe,CAAC,EAC9C,QAAQ,IAAI,EAAc,UAAU,qCAAqC,CAAC,EAC1E,QAAQ,IAAI,EAAc,UAAU,0CAA0C,CAAC,EAC/E,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,IAAI,kEAAe,CAAC,EAC9C,QAAQ,IAAI,EAAc,UAAU,wBAAwB,CAAC,EAC7D,QAAQ,IAAI,EAAc,UAAU,uDAAuD,CAAC,EAC5F,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,2BAAM,CAAC,EACtC,QAAQ,IAAI,EAAc,IAAI,mEAAqB,CAAC,EACpD,QAAQ,IAAI,EAAc,IAAI,yFAAkB,CAAC,EACjD,QAAQ,IAAI,EAAc,IAAI,qGAAoB,CAAC,EACnD,QAAQ,IAAI,EAAc,IAAI,iHAAsB,CAAC,EACrD,QAAQ,IAAI,EAAc,IAAI,yFAAkB,CAAC,EACjD,QAAQ,IAAI,EAAc,IAAI,mFAAiB,CAAC,EAChD,QAAQ,IAAI,EAAc,IAAI,yFAAkB,CAAC,EACjD,QAAQ,IAAI,EAAc,IAAI,2GAAqB,CAAC,EACpD,QAAQ,IAAI,EAAE,EACd,QAAQ,IAAI,EAAc,KAAK,2BAAM,CAAC,EACtC,QAAQ,IAAI,EAAc,IAAI,uEAA4D,CAAC,EAC3F,QAAQ,IAAI,EAAc,IAAI,mFAA8D,CAAC,EAC7F,QAAQ,IAAI,EAAE,EAShB,SAAS,CAAoB,CAAC,EAU5B,CACA,IAAM,EAAc,CAAC,EACjB,EAAI,EAER,MAAO,EAAI,EAAK,OAAQ,CACtB,IAAM,EAAM,EAAK,GAEjB,OAAQ,OACD,aACA,SACA,OACH,EAAO,SAAW,GAClB,UACG,gBACA,SACA,UACH,EAAO,YAAc,GACrB,UACG,iBACA,KACH,EAAO,YAAc,EAAK,EAAE,GAC5B,UACG,cACA,KACH,EAAO,YAAc,EAAK,EAAE,GAC5B,UACG,mBACA,KACH,EAAO,eAAiB,GACxB,UACG,cACA,KACH,EAAO,UAAY,GACnB,UACG,OAEH,GADA,EAAO,QAAU,OACb,EAAI,EAAI,EAAK,SAAW,EAAK,EAAI,GAAG,WAAW,GAAG,EACpD,EAAO,UAAY,EAAK,EAAE,GAE5B,UACG,UAEH,GADA,EAAO,QAAU,UACb,EAAI,EAAI,EAAK,SAAW,EAAK,EAAI,GAAG,WAAW,GAAG,EACpD,EAAO,aAAe,EAAK,EAAE,GAE/B,cAGA,IAAK,EAAI,WAAW,GAAG,GACrB,IAAK,EAAO,QAEV,GAAI,IAAQ,OACV,EAAO,QAAU,OACZ,QAAI,EAAI,SAAS,KAAK,GAAK,EAAI,SAAS,GAAG,GAAK,EAAI,SAAS,IAAI,EACtE,EAAO,aAAe,EACtB,EAAO,QAAU,UACZ,KAEL,IAAK,EAAO,YACV,EAAO,YAAc,EAChB,SAAK,EAAO,YACjB,EAAO,YAAc,EAEvB,EAAO,QAAU,EAAO,SAAW,UAEhC,QAAI,EAAO,UAAY,SAAW,EAAO,UAC9C,EAAO,UAAY,EACd,QAAI,EAAO,UAAY,YAAc,EAAO,aACjD,EAAO,aAAe,EACjB,SAAK,EAAO,YACjB,EAAO,YAAc,EAChB,SAAK,EAAO,YACjB,EAAO,YAAc,EAGzB,MAEJ,IAIF,IAAK,EAAO,UAAY,EAAO,WAAa,EAAO,YACjD,EAAO,QAAU,UAEnB,GAAI,EAAO,UAAY,YAAc,EAAO,aAC1C,EAAO,aAAoB,UAAQ,QAAQ,IAAI,EAAG,SAAS,EAE7D,GAAI,EAAO,UAAY,SAAW,EAAO,UACvC,EAAO,UAAY,QAAQ,IAAI,EAGjC,OAAO,EAMT,eAAe,CAAI,EAAG,CACpB,IAAI,EAEJ,GAAI,CAEF,IAAM,EAAO,QAAQ,KAAK,MAAM,CAAC,EAC3B,EAAS,EAAqB,CAAI,EAGxC,GAAI,EAAO,YAAa,CACtB,EAAY,EACZ,OAIF,GAAI,EAAO,UAAa,EAAK,SAAW,IAAM,EAAO,QACnD,GAAI,EAAK,SAAW,EAClB,QAAQ,IAAI,sEAAmB,EAC/B,QAAQ,IAAI,kEAAe,EACtB,KACL,EAAS,EACT,OAKJ,GAAI,EAAO,UAAY,OAAQ,CAC7B,QAAQ,IAAI,6EAAqB,EACjC,QAAQ,IAAI,0CAAW,EAAO,WAAW,EACzC,QAAQ,IAAI,EAAE,EACd,EAAa,EAAO,SAAU,EAC9B,OAIF,GAAI,EAAO,UAAY,UAAW,CAChC,QAAQ,IAAI,sEAAmB,EAC/B,QAAQ,IAAI,kEAAe,EAG3B,IAAI,EAA6B,CAAC,EAClC,GAAI,EAAO,YACT,EAAmB,EAAO,YAAY,MAAM,GAAG,EAAE,IAAI,KAAQ,EAAK,KAAK,CAAC,EAAE,OAAO,KAAQ,EAAK,OAAS,CAAC,EACxG,QAAQ,IAAI,sDAAa,EAAiB,KAAK,IAAI,GAAG,EAEtD,aAAQ,IAAI,yDAAW,EAIzB,IAAM,EAAc,EAAO,aAAe,QAAQ,IAAI,oBAGtD,EAAW,IAAI,EAAe,EAAO,aAAe,EAAkB,EAAa,EAAO,eAAgB,EAAO,SAAS,EAG1H,EAAqB,CAAQ,EAG7B,MAAM,EAAS,QAAQ,EAGvB,IAAM,EAAS,EAAS,wBAAwB,EAChD,QAAQ,IAAI,CAAM,EAElB,QAAQ,IAAI;AAAA,wDAAa,EAGzB,EAAc,CAAQ,EACtB,OAIF,EAAS,EAET,MAAO,EAAO,CAKd,GAJA,QAAQ,MAAM;AAAA,qEAAgB,EAC9B,QAAQ,MAAM,aAAiB,MAAQ,EAAM,QAAU,OAAO,CAAK,CAAC,EAGhE,EACF,QAAQ,IAAI;AAAA,iEAAiB,EAC7B,EAAc,CAAQ,EAGtB,OAAc,EAEhB,QAAQ,KAAK,CAAC,GAKlB,GAAI,QAAQ,KAAK,IAAM,YAAY,IAAI,SAAS,QAAQ,KAAK,GAAG,QAAQ,MAAO,GAAG,CAAC,EACjF,EAAK",
  "debugId": "86FFB51EA07B026764756E2164756E21",
  "names": []
}